
takeoff_byanyway.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d090  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000500  0800d1a0  0800d1a0  0001d1a0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d6a0  0800d6a0  000201ec  2**0
                  CONTENTS
  4 .ARM          00000000  0800d6a0  0800d6a0  000201ec  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800d6a0  0800d6a0  000201ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d6a0  0800d6a0  0001d6a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d6a4  0800d6a4  0001d6a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ec  20000000  0800d6a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000013b0  200001f0  0800d894  000201f0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200015a0  0800d894  000215a0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   000155cc  00000000  00000000  00020215  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003236  00000000  00000000  000357e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001558  00000000  00000000  00038a18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001428  00000000  00000000  00039f70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001aae2  00000000  00000000  0003b398  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000177a9  00000000  00000000  00055e7a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009779d  00000000  00000000  0006d623  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00104dc0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006f38  00000000  00000000  00104e10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001f0 	.word	0x200001f0
 800012c:	00000000 	.word	0x00000000
 8000130:	0800d188 	.word	0x0800d188

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001f4 	.word	0x200001f4
 800014c:	0800d188 	.word	0x0800d188

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <__aeabi_frsub>:
 8000b28:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b2c:	e002      	b.n	8000b34 <__addsf3>
 8000b2e:	bf00      	nop

08000b30 <__aeabi_fsub>:
 8000b30:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b34 <__addsf3>:
 8000b34:	0042      	lsls	r2, r0, #1
 8000b36:	bf1f      	itttt	ne
 8000b38:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b3c:	ea92 0f03 	teqne	r2, r3
 8000b40:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b44:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b48:	d06a      	beq.n	8000c20 <__addsf3+0xec>
 8000b4a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b4e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b52:	bfc1      	itttt	gt
 8000b54:	18d2      	addgt	r2, r2, r3
 8000b56:	4041      	eorgt	r1, r0
 8000b58:	4048      	eorgt	r0, r1
 8000b5a:	4041      	eorgt	r1, r0
 8000b5c:	bfb8      	it	lt
 8000b5e:	425b      	neglt	r3, r3
 8000b60:	2b19      	cmp	r3, #25
 8000b62:	bf88      	it	hi
 8000b64:	4770      	bxhi	lr
 8000b66:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b6a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b6e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b7e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b82:	bf18      	it	ne
 8000b84:	4249      	negne	r1, r1
 8000b86:	ea92 0f03 	teq	r2, r3
 8000b8a:	d03f      	beq.n	8000c0c <__addsf3+0xd8>
 8000b8c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b90:	fa41 fc03 	asr.w	ip, r1, r3
 8000b94:	eb10 000c 	adds.w	r0, r0, ip
 8000b98:	f1c3 0320 	rsb	r3, r3, #32
 8000b9c:	fa01 f103 	lsl.w	r1, r1, r3
 8000ba0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ba4:	d502      	bpl.n	8000bac <__addsf3+0x78>
 8000ba6:	4249      	negs	r1, r1
 8000ba8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bac:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bb0:	d313      	bcc.n	8000bda <__addsf3+0xa6>
 8000bb2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bb6:	d306      	bcc.n	8000bc6 <__addsf3+0x92>
 8000bb8:	0840      	lsrs	r0, r0, #1
 8000bba:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bbe:	f102 0201 	add.w	r2, r2, #1
 8000bc2:	2afe      	cmp	r2, #254	; 0xfe
 8000bc4:	d251      	bcs.n	8000c6a <__addsf3+0x136>
 8000bc6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bce:	bf08      	it	eq
 8000bd0:	f020 0001 	biceq.w	r0, r0, #1
 8000bd4:	ea40 0003 	orr.w	r0, r0, r3
 8000bd8:	4770      	bx	lr
 8000bda:	0049      	lsls	r1, r1, #1
 8000bdc:	eb40 0000 	adc.w	r0, r0, r0
 8000be0:	3a01      	subs	r2, #1
 8000be2:	bf28      	it	cs
 8000be4:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000be8:	d2ed      	bcs.n	8000bc6 <__addsf3+0x92>
 8000bea:	fab0 fc80 	clz	ip, r0
 8000bee:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bf2:	ebb2 020c 	subs.w	r2, r2, ip
 8000bf6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bfa:	bfaa      	itet	ge
 8000bfc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c00:	4252      	neglt	r2, r2
 8000c02:	4318      	orrge	r0, r3
 8000c04:	bfbc      	itt	lt
 8000c06:	40d0      	lsrlt	r0, r2
 8000c08:	4318      	orrlt	r0, r3
 8000c0a:	4770      	bx	lr
 8000c0c:	f092 0f00 	teq	r2, #0
 8000c10:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c14:	bf06      	itte	eq
 8000c16:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c1a:	3201      	addeq	r2, #1
 8000c1c:	3b01      	subne	r3, #1
 8000c1e:	e7b5      	b.n	8000b8c <__addsf3+0x58>
 8000c20:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c24:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c28:	bf18      	it	ne
 8000c2a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c2e:	d021      	beq.n	8000c74 <__addsf3+0x140>
 8000c30:	ea92 0f03 	teq	r2, r3
 8000c34:	d004      	beq.n	8000c40 <__addsf3+0x10c>
 8000c36:	f092 0f00 	teq	r2, #0
 8000c3a:	bf08      	it	eq
 8000c3c:	4608      	moveq	r0, r1
 8000c3e:	4770      	bx	lr
 8000c40:	ea90 0f01 	teq	r0, r1
 8000c44:	bf1c      	itt	ne
 8000c46:	2000      	movne	r0, #0
 8000c48:	4770      	bxne	lr
 8000c4a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c4e:	d104      	bne.n	8000c5a <__addsf3+0x126>
 8000c50:	0040      	lsls	r0, r0, #1
 8000c52:	bf28      	it	cs
 8000c54:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c58:	4770      	bx	lr
 8000c5a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c5e:	bf3c      	itt	cc
 8000c60:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c64:	4770      	bxcc	lr
 8000c66:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c6a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c6e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c72:	4770      	bx	lr
 8000c74:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c78:	bf16      	itet	ne
 8000c7a:	4608      	movne	r0, r1
 8000c7c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c80:	4601      	movne	r1, r0
 8000c82:	0242      	lsls	r2, r0, #9
 8000c84:	bf06      	itte	eq
 8000c86:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c8a:	ea90 0f01 	teqeq	r0, r1
 8000c8e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c92:	4770      	bx	lr

08000c94 <__aeabi_ui2f>:
 8000c94:	f04f 0300 	mov.w	r3, #0
 8000c98:	e004      	b.n	8000ca4 <__aeabi_i2f+0x8>
 8000c9a:	bf00      	nop

08000c9c <__aeabi_i2f>:
 8000c9c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ca0:	bf48      	it	mi
 8000ca2:	4240      	negmi	r0, r0
 8000ca4:	ea5f 0c00 	movs.w	ip, r0
 8000ca8:	bf08      	it	eq
 8000caa:	4770      	bxeq	lr
 8000cac:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cb0:	4601      	mov	r1, r0
 8000cb2:	f04f 0000 	mov.w	r0, #0
 8000cb6:	e01c      	b.n	8000cf2 <__aeabi_l2f+0x2a>

08000cb8 <__aeabi_ul2f>:
 8000cb8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f04f 0300 	mov.w	r3, #0
 8000cc4:	e00a      	b.n	8000cdc <__aeabi_l2f+0x14>
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_l2f>:
 8000cc8:	ea50 0201 	orrs.w	r2, r0, r1
 8000ccc:	bf08      	it	eq
 8000cce:	4770      	bxeq	lr
 8000cd0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cd4:	d502      	bpl.n	8000cdc <__aeabi_l2f+0x14>
 8000cd6:	4240      	negs	r0, r0
 8000cd8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cdc:	ea5f 0c01 	movs.w	ip, r1
 8000ce0:	bf02      	ittt	eq
 8000ce2:	4684      	moveq	ip, r0
 8000ce4:	4601      	moveq	r1, r0
 8000ce6:	2000      	moveq	r0, #0
 8000ce8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cec:	bf08      	it	eq
 8000cee:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cf2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cf6:	fabc f28c 	clz	r2, ip
 8000cfa:	3a08      	subs	r2, #8
 8000cfc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d00:	db10      	blt.n	8000d24 <__aeabi_l2f+0x5c>
 8000d02:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d06:	4463      	add	r3, ip
 8000d08:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d0c:	f1c2 0220 	rsb	r2, r2, #32
 8000d10:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d14:	fa20 f202 	lsr.w	r2, r0, r2
 8000d18:	eb43 0002 	adc.w	r0, r3, r2
 8000d1c:	bf08      	it	eq
 8000d1e:	f020 0001 	biceq.w	r0, r0, #1
 8000d22:	4770      	bx	lr
 8000d24:	f102 0220 	add.w	r2, r2, #32
 8000d28:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d2c:	f1c2 0220 	rsb	r2, r2, #32
 8000d30:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d34:	fa21 f202 	lsr.w	r2, r1, r2
 8000d38:	eb43 0002 	adc.w	r0, r3, r2
 8000d3c:	bf08      	it	eq
 8000d3e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d42:	4770      	bx	lr

08000d44 <__aeabi_fmul>:
 8000d44:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d48:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d4c:	bf1e      	ittt	ne
 8000d4e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d52:	ea92 0f0c 	teqne	r2, ip
 8000d56:	ea93 0f0c 	teqne	r3, ip
 8000d5a:	d06f      	beq.n	8000e3c <__aeabi_fmul+0xf8>
 8000d5c:	441a      	add	r2, r3
 8000d5e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d62:	0240      	lsls	r0, r0, #9
 8000d64:	bf18      	it	ne
 8000d66:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d6a:	d01e      	beq.n	8000daa <__aeabi_fmul+0x66>
 8000d6c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d70:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d74:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d78:	fba0 3101 	umull	r3, r1, r0, r1
 8000d7c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d80:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d84:	bf3e      	ittt	cc
 8000d86:	0049      	lslcc	r1, r1, #1
 8000d88:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d8c:	005b      	lslcc	r3, r3, #1
 8000d8e:	ea40 0001 	orr.w	r0, r0, r1
 8000d92:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d96:	2afd      	cmp	r2, #253	; 0xfd
 8000d98:	d81d      	bhi.n	8000dd6 <__aeabi_fmul+0x92>
 8000d9a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d9e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000da2:	bf08      	it	eq
 8000da4:	f020 0001 	biceq.w	r0, r0, #1
 8000da8:	4770      	bx	lr
 8000daa:	f090 0f00 	teq	r0, #0
 8000dae:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000db2:	bf08      	it	eq
 8000db4:	0249      	lsleq	r1, r1, #9
 8000db6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dba:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dbe:	3a7f      	subs	r2, #127	; 0x7f
 8000dc0:	bfc2      	ittt	gt
 8000dc2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000dc6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dca:	4770      	bxgt	lr
 8000dcc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dd0:	f04f 0300 	mov.w	r3, #0
 8000dd4:	3a01      	subs	r2, #1
 8000dd6:	dc5d      	bgt.n	8000e94 <__aeabi_fmul+0x150>
 8000dd8:	f112 0f19 	cmn.w	r2, #25
 8000ddc:	bfdc      	itt	le
 8000dde:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000de2:	4770      	bxle	lr
 8000de4:	f1c2 0200 	rsb	r2, r2, #0
 8000de8:	0041      	lsls	r1, r0, #1
 8000dea:	fa21 f102 	lsr.w	r1, r1, r2
 8000dee:	f1c2 0220 	rsb	r2, r2, #32
 8000df2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000df6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dfa:	f140 0000 	adc.w	r0, r0, #0
 8000dfe:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e02:	bf08      	it	eq
 8000e04:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e08:	4770      	bx	lr
 8000e0a:	f092 0f00 	teq	r2, #0
 8000e0e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e12:	bf02      	ittt	eq
 8000e14:	0040      	lsleq	r0, r0, #1
 8000e16:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e1a:	3a01      	subeq	r2, #1
 8000e1c:	d0f9      	beq.n	8000e12 <__aeabi_fmul+0xce>
 8000e1e:	ea40 000c 	orr.w	r0, r0, ip
 8000e22:	f093 0f00 	teq	r3, #0
 8000e26:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e2a:	bf02      	ittt	eq
 8000e2c:	0049      	lsleq	r1, r1, #1
 8000e2e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e32:	3b01      	subeq	r3, #1
 8000e34:	d0f9      	beq.n	8000e2a <__aeabi_fmul+0xe6>
 8000e36:	ea41 010c 	orr.w	r1, r1, ip
 8000e3a:	e78f      	b.n	8000d5c <__aeabi_fmul+0x18>
 8000e3c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e40:	ea92 0f0c 	teq	r2, ip
 8000e44:	bf18      	it	ne
 8000e46:	ea93 0f0c 	teqne	r3, ip
 8000e4a:	d00a      	beq.n	8000e62 <__aeabi_fmul+0x11e>
 8000e4c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e50:	bf18      	it	ne
 8000e52:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e56:	d1d8      	bne.n	8000e0a <__aeabi_fmul+0xc6>
 8000e58:	ea80 0001 	eor.w	r0, r0, r1
 8000e5c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e60:	4770      	bx	lr
 8000e62:	f090 0f00 	teq	r0, #0
 8000e66:	bf17      	itett	ne
 8000e68:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e6c:	4608      	moveq	r0, r1
 8000e6e:	f091 0f00 	teqne	r1, #0
 8000e72:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e76:	d014      	beq.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e78:	ea92 0f0c 	teq	r2, ip
 8000e7c:	d101      	bne.n	8000e82 <__aeabi_fmul+0x13e>
 8000e7e:	0242      	lsls	r2, r0, #9
 8000e80:	d10f      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e82:	ea93 0f0c 	teq	r3, ip
 8000e86:	d103      	bne.n	8000e90 <__aeabi_fmul+0x14c>
 8000e88:	024b      	lsls	r3, r1, #9
 8000e8a:	bf18      	it	ne
 8000e8c:	4608      	movne	r0, r1
 8000e8e:	d108      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e90:	ea80 0001 	eor.w	r0, r0, r1
 8000e94:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e98:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e9c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ea0:	4770      	bx	lr
 8000ea2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ea6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eaa:	4770      	bx	lr

08000eac <__aeabi_fdiv>:
 8000eac:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000eb0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000eb4:	bf1e      	ittt	ne
 8000eb6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eba:	ea92 0f0c 	teqne	r2, ip
 8000ebe:	ea93 0f0c 	teqne	r3, ip
 8000ec2:	d069      	beq.n	8000f98 <__aeabi_fdiv+0xec>
 8000ec4:	eba2 0203 	sub.w	r2, r2, r3
 8000ec8:	ea80 0c01 	eor.w	ip, r0, r1
 8000ecc:	0249      	lsls	r1, r1, #9
 8000ece:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ed2:	d037      	beq.n	8000f44 <__aeabi_fdiv+0x98>
 8000ed4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000ed8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000edc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ee0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ee4:	428b      	cmp	r3, r1
 8000ee6:	bf38      	it	cc
 8000ee8:	005b      	lslcc	r3, r3, #1
 8000eea:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000eee:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000ef2:	428b      	cmp	r3, r1
 8000ef4:	bf24      	itt	cs
 8000ef6:	1a5b      	subcs	r3, r3, r1
 8000ef8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000efc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f00:	bf24      	itt	cs
 8000f02:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f06:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f0a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f0e:	bf24      	itt	cs
 8000f10:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f14:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f18:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f1c:	bf24      	itt	cs
 8000f1e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f22:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f26:	011b      	lsls	r3, r3, #4
 8000f28:	bf18      	it	ne
 8000f2a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f2e:	d1e0      	bne.n	8000ef2 <__aeabi_fdiv+0x46>
 8000f30:	2afd      	cmp	r2, #253	; 0xfd
 8000f32:	f63f af50 	bhi.w	8000dd6 <__aeabi_fmul+0x92>
 8000f36:	428b      	cmp	r3, r1
 8000f38:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f3c:	bf08      	it	eq
 8000f3e:	f020 0001 	biceq.w	r0, r0, #1
 8000f42:	4770      	bx	lr
 8000f44:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f48:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f4c:	327f      	adds	r2, #127	; 0x7f
 8000f4e:	bfc2      	ittt	gt
 8000f50:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f54:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f58:	4770      	bxgt	lr
 8000f5a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f5e:	f04f 0300 	mov.w	r3, #0
 8000f62:	3a01      	subs	r2, #1
 8000f64:	e737      	b.n	8000dd6 <__aeabi_fmul+0x92>
 8000f66:	f092 0f00 	teq	r2, #0
 8000f6a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f6e:	bf02      	ittt	eq
 8000f70:	0040      	lsleq	r0, r0, #1
 8000f72:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f76:	3a01      	subeq	r2, #1
 8000f78:	d0f9      	beq.n	8000f6e <__aeabi_fdiv+0xc2>
 8000f7a:	ea40 000c 	orr.w	r0, r0, ip
 8000f7e:	f093 0f00 	teq	r3, #0
 8000f82:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f86:	bf02      	ittt	eq
 8000f88:	0049      	lsleq	r1, r1, #1
 8000f8a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f8e:	3b01      	subeq	r3, #1
 8000f90:	d0f9      	beq.n	8000f86 <__aeabi_fdiv+0xda>
 8000f92:	ea41 010c 	orr.w	r1, r1, ip
 8000f96:	e795      	b.n	8000ec4 <__aeabi_fdiv+0x18>
 8000f98:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f9c:	ea92 0f0c 	teq	r2, ip
 8000fa0:	d108      	bne.n	8000fb4 <__aeabi_fdiv+0x108>
 8000fa2:	0242      	lsls	r2, r0, #9
 8000fa4:	f47f af7d 	bne.w	8000ea2 <__aeabi_fmul+0x15e>
 8000fa8:	ea93 0f0c 	teq	r3, ip
 8000fac:	f47f af70 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fb0:	4608      	mov	r0, r1
 8000fb2:	e776      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fb4:	ea93 0f0c 	teq	r3, ip
 8000fb8:	d104      	bne.n	8000fc4 <__aeabi_fdiv+0x118>
 8000fba:	024b      	lsls	r3, r1, #9
 8000fbc:	f43f af4c 	beq.w	8000e58 <__aeabi_fmul+0x114>
 8000fc0:	4608      	mov	r0, r1
 8000fc2:	e76e      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fc4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000fc8:	bf18      	it	ne
 8000fca:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000fce:	d1ca      	bne.n	8000f66 <__aeabi_fdiv+0xba>
 8000fd0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000fd4:	f47f af5c 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fd8:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000fdc:	f47f af3c 	bne.w	8000e58 <__aeabi_fmul+0x114>
 8000fe0:	e75f      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fe2:	bf00      	nop

08000fe4 <__gesf2>:
 8000fe4:	f04f 3cff 	mov.w	ip, #4294967295
 8000fe8:	e006      	b.n	8000ff8 <__cmpsf2+0x4>
 8000fea:	bf00      	nop

08000fec <__lesf2>:
 8000fec:	f04f 0c01 	mov.w	ip, #1
 8000ff0:	e002      	b.n	8000ff8 <__cmpsf2+0x4>
 8000ff2:	bf00      	nop

08000ff4 <__cmpsf2>:
 8000ff4:	f04f 0c01 	mov.w	ip, #1
 8000ff8:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000ffc:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001000:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001004:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001008:	bf18      	it	ne
 800100a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800100e:	d011      	beq.n	8001034 <__cmpsf2+0x40>
 8001010:	b001      	add	sp, #4
 8001012:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001016:	bf18      	it	ne
 8001018:	ea90 0f01 	teqne	r0, r1
 800101c:	bf58      	it	pl
 800101e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001022:	bf88      	it	hi
 8001024:	17c8      	asrhi	r0, r1, #31
 8001026:	bf38      	it	cc
 8001028:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800102c:	bf18      	it	ne
 800102e:	f040 0001 	orrne.w	r0, r0, #1
 8001032:	4770      	bx	lr
 8001034:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001038:	d102      	bne.n	8001040 <__cmpsf2+0x4c>
 800103a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800103e:	d105      	bne.n	800104c <__cmpsf2+0x58>
 8001040:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001044:	d1e4      	bne.n	8001010 <__cmpsf2+0x1c>
 8001046:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800104a:	d0e1      	beq.n	8001010 <__cmpsf2+0x1c>
 800104c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop

08001054 <__aeabi_cfrcmple>:
 8001054:	4684      	mov	ip, r0
 8001056:	4608      	mov	r0, r1
 8001058:	4661      	mov	r1, ip
 800105a:	e7ff      	b.n	800105c <__aeabi_cfcmpeq>

0800105c <__aeabi_cfcmpeq>:
 800105c:	b50f      	push	{r0, r1, r2, r3, lr}
 800105e:	f7ff ffc9 	bl	8000ff4 <__cmpsf2>
 8001062:	2800      	cmp	r0, #0
 8001064:	bf48      	it	mi
 8001066:	f110 0f00 	cmnmi.w	r0, #0
 800106a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800106c <__aeabi_fcmpeq>:
 800106c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001070:	f7ff fff4 	bl	800105c <__aeabi_cfcmpeq>
 8001074:	bf0c      	ite	eq
 8001076:	2001      	moveq	r0, #1
 8001078:	2000      	movne	r0, #0
 800107a:	f85d fb08 	ldr.w	pc, [sp], #8
 800107e:	bf00      	nop

08001080 <__aeabi_fcmplt>:
 8001080:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001084:	f7ff ffea 	bl	800105c <__aeabi_cfcmpeq>
 8001088:	bf34      	ite	cc
 800108a:	2001      	movcc	r0, #1
 800108c:	2000      	movcs	r0, #0
 800108e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001092:	bf00      	nop

08001094 <__aeabi_fcmple>:
 8001094:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001098:	f7ff ffe0 	bl	800105c <__aeabi_cfcmpeq>
 800109c:	bf94      	ite	ls
 800109e:	2001      	movls	r0, #1
 80010a0:	2000      	movhi	r0, #0
 80010a2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010a6:	bf00      	nop

080010a8 <__aeabi_fcmpge>:
 80010a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ac:	f7ff ffd2 	bl	8001054 <__aeabi_cfrcmple>
 80010b0:	bf94      	ite	ls
 80010b2:	2001      	movls	r0, #1
 80010b4:	2000      	movhi	r0, #0
 80010b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ba:	bf00      	nop

080010bc <__aeabi_fcmpgt>:
 80010bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c0:	f7ff ffc8 	bl	8001054 <__aeabi_cfrcmple>
 80010c4:	bf34      	ite	cc
 80010c6:	2001      	movcc	r0, #1
 80010c8:	2000      	movcs	r0, #0
 80010ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ce:	bf00      	nop

080010d0 <__aeabi_f2uiz>:
 80010d0:	0042      	lsls	r2, r0, #1
 80010d2:	d20e      	bcs.n	80010f2 <__aeabi_f2uiz+0x22>
 80010d4:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80010d8:	d30b      	bcc.n	80010f2 <__aeabi_f2uiz+0x22>
 80010da:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80010de:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80010e2:	d409      	bmi.n	80010f8 <__aeabi_f2uiz+0x28>
 80010e4:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80010e8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80010ec:	fa23 f002 	lsr.w	r0, r3, r2
 80010f0:	4770      	bx	lr
 80010f2:	f04f 0000 	mov.w	r0, #0
 80010f6:	4770      	bx	lr
 80010f8:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80010fc:	d101      	bne.n	8001102 <__aeabi_f2uiz+0x32>
 80010fe:	0242      	lsls	r2, r0, #9
 8001100:	d102      	bne.n	8001108 <__aeabi_f2uiz+0x38>
 8001102:	f04f 30ff 	mov.w	r0, #4294967295
 8001106:	4770      	bx	lr
 8001108:	f04f 0000 	mov.w	r0, #0
 800110c:	4770      	bx	lr
 800110e:	bf00      	nop

08001110 <Calibration>:



//Fucntion Definitions
//0- measure offset
void Calibration(Offset *offset, int *status){
 8001110:	b580      	push	{r7, lr}
 8001112:	b08a      	sub	sp, #40	; 0x28
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
 8001118:	6039      	str	r1, [r7, #0]
	*status = 0;
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	2200      	movs	r2, #0
 800111e:	601a      	str	r2, [r3, #0]
	RawData_Def myAccelRaw, myGyroRaw, myMagRaw;
		for(int i = 0 ; i < 500 ; i++)
 8001120:	2300      	movs	r3, #0
 8001122:	627b      	str	r3, [r7, #36]	; 0x24
 8001124:	e058      	b.n	80011d8 <Calibration+0xc8>
		{
			MPU6050_Get_Accel_RawData_to_CaliBration(&myAccelRaw);
 8001126:	f107 031c 	add.w	r3, r7, #28
 800112a:	4618      	mov	r0, r3
 800112c:	f000 ffa0 	bl	8002070 <MPU6050_Get_Accel_RawData_to_CaliBration>
			MPU6050_Get_Gyro_RawData_to_CaliBration(&myGyroRaw);
 8001130:	f107 0314 	add.w	r3, r7, #20
 8001134:	4618      	mov	r0, r3
 8001136:	f001 f803 	bl	8002140 <MPU6050_Get_Gyro_RawData_to_CaliBration>
			MPU6050_Get_Mag_RawData(&myMagRaw);
 800113a:	f107 030c 	add.w	r3, r7, #12
 800113e:	4618      	mov	r0, r3
 8001140:	f000 fa38 	bl	80015b4 <MPU6050_Get_Mag_RawData>
			HAL_Delay(10);
 8001144:	200a      	movs	r0, #10
 8001146:	f003 fdef 	bl	8004d28 <HAL_Delay>
			*status = *status + 1;
 800114a:	683b      	ldr	r3, [r7, #0]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	1c5a      	adds	r2, r3, #1
 8001150:	683b      	ldr	r3, [r7, #0]
 8001152:	601a      	str	r2, [r3, #0]
			//printf("%i\n\r",*status);
		    // Sum data
			offset->AX += myAccelRaw.x;
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 800115c:	441a      	add	r2, r3
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	601a      	str	r2, [r3, #0]
			offset->AY += myAccelRaw.y;
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	685b      	ldr	r3, [r3, #4]
 8001166:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 800116a:	441a      	add	r2, r3
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	605a      	str	r2, [r3, #4]
			offset->AZ += myAccelRaw.z;
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	689b      	ldr	r3, [r3, #8]
 8001174:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8001178:	441a      	add	r2, r3
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	609a      	str	r2, [r3, #8]
			offset->GX += myGyroRaw.x;
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	68db      	ldr	r3, [r3, #12]
 8001182:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8001186:	441a      	add	r2, r3
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	60da      	str	r2, [r3, #12]
			offset->GY += myGyroRaw.y;
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	691b      	ldr	r3, [r3, #16]
 8001190:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001194:	441a      	add	r2, r3
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	611a      	str	r2, [r3, #16]
			offset->GZ += myGyroRaw.z;
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	695b      	ldr	r3, [r3, #20]
 800119e:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 80011a2:	441a      	add	r2, r3
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	615a      	str	r2, [r3, #20]
			offset->MX += myMagRaw.x;
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	699b      	ldr	r3, [r3, #24]
 80011ac:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80011b0:	441a      	add	r2, r3
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	619a      	str	r2, [r3, #24]
			offset->MY += myMagRaw.y;
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	69db      	ldr	r3, [r3, #28]
 80011ba:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80011be:	441a      	add	r2, r3
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	61da      	str	r2, [r3, #28]
			offset->MZ += myMagRaw.z;
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	6a1b      	ldr	r3, [r3, #32]
 80011c8:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 80011cc:	441a      	add	r2, r3
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	621a      	str	r2, [r3, #32]
		for(int i = 0 ; i < 500 ; i++)
 80011d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011d4:	3301      	adds	r3, #1
 80011d6:	627b      	str	r3, [r7, #36]	; 0x24
 80011d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011da:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80011de:	dba2      	blt.n	8001126 <Calibration+0x16>
		}
		  // Average Data
		offset->AX /= 500;
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	4a2d      	ldr	r2, [pc, #180]	; (800129c <Calibration+0x18c>)
 80011e6:	fb82 1203 	smull	r1, r2, r2, r3
 80011ea:	1152      	asrs	r2, r2, #5
 80011ec:	17db      	asrs	r3, r3, #31
 80011ee:	1ad2      	subs	r2, r2, r3
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	601a      	str	r2, [r3, #0]
		offset->AY /= 500;
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	685b      	ldr	r3, [r3, #4]
 80011f8:	4a28      	ldr	r2, [pc, #160]	; (800129c <Calibration+0x18c>)
 80011fa:	fb82 1203 	smull	r1, r2, r2, r3
 80011fe:	1152      	asrs	r2, r2, #5
 8001200:	17db      	asrs	r3, r3, #31
 8001202:	1ad2      	subs	r2, r2, r3
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	605a      	str	r2, [r3, #4]
		offset->AZ /= 500;
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	689b      	ldr	r3, [r3, #8]
 800120c:	4a23      	ldr	r2, [pc, #140]	; (800129c <Calibration+0x18c>)
 800120e:	fb82 1203 	smull	r1, r2, r2, r3
 8001212:	1152      	asrs	r2, r2, #5
 8001214:	17db      	asrs	r3, r3, #31
 8001216:	1ad2      	subs	r2, r2, r3
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	609a      	str	r2, [r3, #8]
		offset->GX /= 500;
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	68db      	ldr	r3, [r3, #12]
 8001220:	4a1e      	ldr	r2, [pc, #120]	; (800129c <Calibration+0x18c>)
 8001222:	fb82 1203 	smull	r1, r2, r2, r3
 8001226:	1152      	asrs	r2, r2, #5
 8001228:	17db      	asrs	r3, r3, #31
 800122a:	1ad2      	subs	r2, r2, r3
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	60da      	str	r2, [r3, #12]
		offset->GY /= 500;
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	691b      	ldr	r3, [r3, #16]
 8001234:	4a19      	ldr	r2, [pc, #100]	; (800129c <Calibration+0x18c>)
 8001236:	fb82 1203 	smull	r1, r2, r2, r3
 800123a:	1152      	asrs	r2, r2, #5
 800123c:	17db      	asrs	r3, r3, #31
 800123e:	1ad2      	subs	r2, r2, r3
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	611a      	str	r2, [r3, #16]
		offset->GZ /= 500;
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	695b      	ldr	r3, [r3, #20]
 8001248:	4a14      	ldr	r2, [pc, #80]	; (800129c <Calibration+0x18c>)
 800124a:	fb82 1203 	smull	r1, r2, r2, r3
 800124e:	1152      	asrs	r2, r2, #5
 8001250:	17db      	asrs	r3, r3, #31
 8001252:	1ad2      	subs	r2, r2, r3
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	615a      	str	r2, [r3, #20]
		offset->MX /= 500;
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	699b      	ldr	r3, [r3, #24]
 800125c:	4a0f      	ldr	r2, [pc, #60]	; (800129c <Calibration+0x18c>)
 800125e:	fb82 1203 	smull	r1, r2, r2, r3
 8001262:	1152      	asrs	r2, r2, #5
 8001264:	17db      	asrs	r3, r3, #31
 8001266:	1ad2      	subs	r2, r2, r3
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	619a      	str	r2, [r3, #24]
		offset->MY /= 500;
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	69db      	ldr	r3, [r3, #28]
 8001270:	4a0a      	ldr	r2, [pc, #40]	; (800129c <Calibration+0x18c>)
 8001272:	fb82 1203 	smull	r1, r2, r2, r3
 8001276:	1152      	asrs	r2, r2, #5
 8001278:	17db      	asrs	r3, r3, #31
 800127a:	1ad2      	subs	r2, r2, r3
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	61da      	str	r2, [r3, #28]
		offset->MZ /= 500;
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	6a1b      	ldr	r3, [r3, #32]
 8001284:	4a05      	ldr	r2, [pc, #20]	; (800129c <Calibration+0x18c>)
 8001286:	fb82 1203 	smull	r1, r2, r2, r3
 800128a:	1152      	asrs	r2, r2, #5
 800128c:	17db      	asrs	r3, r3, #31
 800128e:	1ad2      	subs	r2, r2, r3
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	621a      	str	r2, [r3, #32]
}
 8001294:	bf00      	nop
 8001296:	3728      	adds	r7, #40	; 0x28
 8001298:	46bd      	mov	sp, r7
 800129a:	bd80      	pop	{r7, pc}
 800129c:	10624dd3 	.word	0x10624dd3

080012a0 <MPU6050_Init>:
//1- i2c Handler
void MPU6050_Init(I2C_HandleTypeDef *I2Chnd)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b082      	sub	sp, #8
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
	//Copy I2C CubeMX handle to local library
	memcpy(&i2cHandler, I2Chnd, sizeof(*I2Chnd));
 80012a8:	2254      	movs	r2, #84	; 0x54
 80012aa:	6879      	ldr	r1, [r7, #4]
 80012ac:	4803      	ldr	r0, [pc, #12]	; (80012bc <MPU6050_Init+0x1c>)
 80012ae:	f008 fb7d 	bl	80099ac <memcpy>
}
 80012b2:	bf00      	nop
 80012b4:	3708      	adds	r7, #8
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	bf00      	nop
 80012bc:	2000020c 	.word	0x2000020c

080012c0 <I2C_Read>:

//2- i2c Read
void I2C_Read(uint8_t ADDR, uint8_t *i2cBif, uint8_t NofData)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b086      	sub	sp, #24
 80012c4:	af02      	add	r7, sp, #8
 80012c6:	4603      	mov	r3, r0
 80012c8:	6039      	str	r1, [r7, #0]
 80012ca:	71fb      	strb	r3, [r7, #7]
 80012cc:	4613      	mov	r3, r2
 80012ce:	71bb      	strb	r3, [r7, #6]
	uint8_t i2cBuf[2];
	uint8_t MPUADDR;
	//Need to Shift address to make it proper to i2c operation
	MPUADDR = (MPU_ADDR<<1);
 80012d0:	23d0      	movs	r3, #208	; 0xd0
 80012d2:	73fb      	strb	r3, [r7, #15]
	i2cBuf[0] = ADDR;
 80012d4:	79fb      	ldrb	r3, [r7, #7]
 80012d6:	733b      	strb	r3, [r7, #12]
	HAL_I2C_Master_Transmit(&i2cHandler, MPUADDR, i2cBuf, 1, 10);
 80012d8:	7bfb      	ldrb	r3, [r7, #15]
 80012da:	b299      	uxth	r1, r3
 80012dc:	f107 020c 	add.w	r2, r7, #12
 80012e0:	230a      	movs	r3, #10
 80012e2:	9300      	str	r3, [sp, #0]
 80012e4:	2301      	movs	r3, #1
 80012e6:	4808      	ldr	r0, [pc, #32]	; (8001308 <I2C_Read+0x48>)
 80012e8:	f004 f9cc 	bl	8005684 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&i2cHandler, MPUADDR, i2cBif, NofData, 100);
 80012ec:	7bfb      	ldrb	r3, [r7, #15]
 80012ee:	b299      	uxth	r1, r3
 80012f0:	79bb      	ldrb	r3, [r7, #6]
 80012f2:	b29b      	uxth	r3, r3
 80012f4:	2264      	movs	r2, #100	; 0x64
 80012f6:	9200      	str	r2, [sp, #0]
 80012f8:	683a      	ldr	r2, [r7, #0]
 80012fa:	4803      	ldr	r0, [pc, #12]	; (8001308 <I2C_Read+0x48>)
 80012fc:	f004 fac0 	bl	8005880 <HAL_I2C_Master_Receive>
}
 8001300:	bf00      	nop
 8001302:	3710      	adds	r7, #16
 8001304:	46bd      	mov	sp, r7
 8001306:	bd80      	pop	{r7, pc}
 8001308:	2000020c 	.word	0x2000020c

0800130c <I2C_Write8>:

//3- i2c Write
void I2C_Write8(uint8_t ADDR, uint8_t data)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b086      	sub	sp, #24
 8001310:	af02      	add	r7, sp, #8
 8001312:	4603      	mov	r3, r0
 8001314:	460a      	mov	r2, r1
 8001316:	71fb      	strb	r3, [r7, #7]
 8001318:	4613      	mov	r3, r2
 800131a:	71bb      	strb	r3, [r7, #6]
	uint8_t i2cData[2];
	i2cData[0] = ADDR;
 800131c:	79fb      	ldrb	r3, [r7, #7]
 800131e:	733b      	strb	r3, [r7, #12]
	i2cData[1] = data;
 8001320:	79bb      	ldrb	r3, [r7, #6]
 8001322:	737b      	strb	r3, [r7, #13]
	uint8_t MPUADDR = (MPU_ADDR<<1);
 8001324:	23d0      	movs	r3, #208	; 0xd0
 8001326:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Master_Transmit(&i2cHandler, MPUADDR, i2cData, 2,100);
 8001328:	7bfb      	ldrb	r3, [r7, #15]
 800132a:	b299      	uxth	r1, r3
 800132c:	f107 020c 	add.w	r2, r7, #12
 8001330:	2364      	movs	r3, #100	; 0x64
 8001332:	9300      	str	r3, [sp, #0]
 8001334:	2302      	movs	r3, #2
 8001336:	4803      	ldr	r0, [pc, #12]	; (8001344 <I2C_Write8+0x38>)
 8001338:	f004 f9a4 	bl	8005684 <HAL_I2C_Master_Transmit>
}
 800133c:	bf00      	nop
 800133e:	3710      	adds	r7, #16
 8001340:	46bd      	mov	sp, r7
 8001342:	bd80      	pop	{r7, pc}
 8001344:	2000020c 	.word	0x2000020c

08001348 <MPU6050_Config>:

//4- MPU6050 Initialaztion Configuration
void MPU6050_Config(MPU_ConfigTypeDef *config)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b084      	sub	sp, #16
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
	uint8_t Buffer = 0;
 8001350:	2300      	movs	r3, #0
 8001352:	73fb      	strb	r3, [r7, #15]
	//Clock Source
	//Reset Device
	I2C_Write8(PWR_MAGT_1_REG, 0x80);
 8001354:	2180      	movs	r1, #128	; 0x80
 8001356:	206b      	movs	r0, #107	; 0x6b
 8001358:	f7ff ffd8 	bl	800130c <I2C_Write8>
	HAL_Delay(100);
 800135c:	2064      	movs	r0, #100	; 0x64
 800135e:	f003 fce3 	bl	8004d28 <HAL_Delay>
	Buffer = config ->ClockSource & 0x07; //change the 7th bits of register
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	781b      	ldrb	r3, [r3, #0]
 8001366:	f003 0307 	and.w	r3, r3, #7
 800136a:	73fb      	strb	r3, [r7, #15]
	Buffer |= (config ->Sleep_Mode_Bit << 6) &0x40; // change only the 7th bit in the register
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	791b      	ldrb	r3, [r3, #4]
 8001370:	019b      	lsls	r3, r3, #6
 8001372:	b25b      	sxtb	r3, r3
 8001374:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001378:	b25a      	sxtb	r2, r3
 800137a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800137e:	4313      	orrs	r3, r2
 8001380:	b25b      	sxtb	r3, r3
 8001382:	73fb      	strb	r3, [r7, #15]
	I2C_Write8(PWR_MAGT_1_REG, Buffer);
 8001384:	7bfb      	ldrb	r3, [r7, #15]
 8001386:	4619      	mov	r1, r3
 8001388:	206b      	movs	r0, #107	; 0x6b
 800138a:	f7ff ffbf 	bl	800130c <I2C_Write8>
	HAL_Delay(100); // should wait 10ms after changeing the clock setting.
 800138e:	2064      	movs	r0, #100	; 0x64
 8001390:	f003 fcca 	bl	8004d28 <HAL_Delay>

	//Set the Digital Low Pass Filter
	Buffer = 0;
 8001394:	2300      	movs	r3, #0
 8001396:	73fb      	strb	r3, [r7, #15]
	Buffer = config->CONFIG_DLPF & 0x07;
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	78db      	ldrb	r3, [r3, #3]
 800139c:	f003 0307 	and.w	r3, r3, #7
 80013a0:	73fb      	strb	r3, [r7, #15]
	I2C_Write8(CONFIG_REG, Buffer);
 80013a2:	7bfb      	ldrb	r3, [r7, #15]
 80013a4:	4619      	mov	r1, r3
 80013a6:	201a      	movs	r0, #26
 80013a8:	f7ff ffb0 	bl	800130c <I2C_Write8>

	//Select the Gyroscope Full Scale Range
	Buffer = 0;
 80013ac:	2300      	movs	r3, #0
 80013ae:	73fb      	strb	r3, [r7, #15]
	Buffer = (config->Gyro_Full_Scale << 3) & 0x18;
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	785b      	ldrb	r3, [r3, #1]
 80013b4:	00db      	lsls	r3, r3, #3
 80013b6:	b2db      	uxtb	r3, r3
 80013b8:	f003 0318 	and.w	r3, r3, #24
 80013bc:	73fb      	strb	r3, [r7, #15]
	I2C_Write8(GYRO_CONFIG_REG, Buffer);
 80013be:	7bfb      	ldrb	r3, [r7, #15]
 80013c0:	4619      	mov	r1, r3
 80013c2:	201b      	movs	r0, #27
 80013c4:	f7ff ffa2 	bl	800130c <I2C_Write8>

	//Select the Accelerometer Full Scale Range
	Buffer = 0;
 80013c8:	2300      	movs	r3, #0
 80013ca:	73fb      	strb	r3, [r7, #15]
	Buffer = (config->Accel_Full_Scale << 3) & 0x18;
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	789b      	ldrb	r3, [r3, #2]
 80013d0:	00db      	lsls	r3, r3, #3
 80013d2:	b2db      	uxtb	r3, r3
 80013d4:	f003 0318 	and.w	r3, r3, #24
 80013d8:	73fb      	strb	r3, [r7, #15]
	I2C_Write8(ACCEL_CONFIG_REG, Buffer);
 80013da:	7bfb      	ldrb	r3, [r7, #15]
 80013dc:	4619      	mov	r1, r3
 80013de:	201c      	movs	r0, #28
 80013e0:	f7ff ff94 	bl	800130c <I2C_Write8>
	//Set SRD To Default
	MPU6050_Set_SMPRT_DIV(0x04);
 80013e4:	2004      	movs	r0, #4
 80013e6:	f000 f857 	bl	8001498 <MPU6050_Set_SMPRT_DIV>
//    HAL_I2C_Mem_Write(&i2cHandler, 0xD0, 0x27, 1, &Buffer, 1, 100);        // Number of data bytes
//    HAL_Delay(10);
    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	//Accelerometer Scaling Factor, Set the Accelerometer and Gyroscope Scaling Factor
	switch (config->Accel_Full_Scale)
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	789b      	ldrb	r3, [r3, #2]
 80013ee:	2b03      	cmp	r3, #3
 80013f0:	d81a      	bhi.n	8001428 <MPU6050_Config+0xe0>
 80013f2:	a201      	add	r2, pc, #4	; (adr r2, 80013f8 <MPU6050_Config+0xb0>)
 80013f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013f8:	08001409 	.word	0x08001409
 80013fc:	08001411 	.word	0x08001411
 8001400:	08001419 	.word	0x08001419
 8001404:	08001421 	.word	0x08001421
	{
		case AFS_SEL_2g:
			accelScalingFactor = (2000.0f/32768.0f);
 8001408:	4b1a      	ldr	r3, [pc, #104]	; (8001474 <MPU6050_Config+0x12c>)
 800140a:	4a1b      	ldr	r2, [pc, #108]	; (8001478 <MPU6050_Config+0x130>)
 800140c:	601a      	str	r2, [r3, #0]
			break;
 800140e:	e00c      	b.n	800142a <MPU6050_Config+0xe2>

		case AFS_SEL_4g:
			accelScalingFactor = (4000.0f/32768.0f);
 8001410:	4b18      	ldr	r3, [pc, #96]	; (8001474 <MPU6050_Config+0x12c>)
 8001412:	4a1a      	ldr	r2, [pc, #104]	; (800147c <MPU6050_Config+0x134>)
 8001414:	601a      	str	r2, [r3, #0]
				break;
 8001416:	e008      	b.n	800142a <MPU6050_Config+0xe2>

		case AFS_SEL_8g:
			accelScalingFactor = (8000.0f/32768.0f);
 8001418:	4b16      	ldr	r3, [pc, #88]	; (8001474 <MPU6050_Config+0x12c>)
 800141a:	4a19      	ldr	r2, [pc, #100]	; (8001480 <MPU6050_Config+0x138>)
 800141c:	601a      	str	r2, [r3, #0]
			break;
 800141e:	e004      	b.n	800142a <MPU6050_Config+0xe2>

		case AFS_SEL_16g:
			accelScalingFactor = (16000.0f/32768.0f);
 8001420:	4b14      	ldr	r3, [pc, #80]	; (8001474 <MPU6050_Config+0x12c>)
 8001422:	4a18      	ldr	r2, [pc, #96]	; (8001484 <MPU6050_Config+0x13c>)
 8001424:	601a      	str	r2, [r3, #0]
			break;
 8001426:	e000      	b.n	800142a <MPU6050_Config+0xe2>

		default:
			break;
 8001428:	bf00      	nop
	}
	//Gyroscope Scaling Factor
	switch (config->Gyro_Full_Scale)
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	785b      	ldrb	r3, [r3, #1]
 800142e:	2b03      	cmp	r3, #3
 8001430:	d81a      	bhi.n	8001468 <MPU6050_Config+0x120>
 8001432:	a201      	add	r2, pc, #4	; (adr r2, 8001438 <MPU6050_Config+0xf0>)
 8001434:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001438:	08001449 	.word	0x08001449
 800143c:	08001451 	.word	0x08001451
 8001440:	08001459 	.word	0x08001459
 8001444:	08001461 	.word	0x08001461
	{
		case FS_SEL_250:
			gyroScalingFactor = 250.0f/32768.0f;
 8001448:	4b0f      	ldr	r3, [pc, #60]	; (8001488 <MPU6050_Config+0x140>)
 800144a:	4a10      	ldr	r2, [pc, #64]	; (800148c <MPU6050_Config+0x144>)
 800144c:	601a      	str	r2, [r3, #0]
			break;
 800144e:	e00c      	b.n	800146a <MPU6050_Config+0x122>

		case FS_SEL_500:
				gyroScalingFactor = 500.0f/32768.0f;
 8001450:	4b0d      	ldr	r3, [pc, #52]	; (8001488 <MPU6050_Config+0x140>)
 8001452:	4a0f      	ldr	r2, [pc, #60]	; (8001490 <MPU6050_Config+0x148>)
 8001454:	601a      	str	r2, [r3, #0]
				break;
 8001456:	e008      	b.n	800146a <MPU6050_Config+0x122>

		case FS_SEL_1000:
			gyroScalingFactor = 1000.0f/32768.0f;
 8001458:	4b0b      	ldr	r3, [pc, #44]	; (8001488 <MPU6050_Config+0x140>)
 800145a:	4a0e      	ldr	r2, [pc, #56]	; (8001494 <MPU6050_Config+0x14c>)
 800145c:	601a      	str	r2, [r3, #0]
			break;
 800145e:	e004      	b.n	800146a <MPU6050_Config+0x122>

		case FS_SEL_2000:
			gyroScalingFactor = 2000.0f/32768.0f;
 8001460:	4b09      	ldr	r3, [pc, #36]	; (8001488 <MPU6050_Config+0x140>)
 8001462:	4a05      	ldr	r2, [pc, #20]	; (8001478 <MPU6050_Config+0x130>)
 8001464:	601a      	str	r2, [r3, #0]
			break;
 8001466:	e000      	b.n	800146a <MPU6050_Config+0x122>

		default:
			break;
 8001468:	bf00      	nop
	}

}
 800146a:	bf00      	nop
 800146c:	3710      	adds	r7, #16
 800146e:	46bd      	mov	sp, r7
 8001470:	bd80      	pop	{r7, pc}
 8001472:	bf00      	nop
 8001474:	20000260 	.word	0x20000260
 8001478:	3d7a0000 	.word	0x3d7a0000
 800147c:	3dfa0000 	.word	0x3dfa0000
 8001480:	3e7a0000 	.word	0x3e7a0000
 8001484:	3efa0000 	.word	0x3efa0000
 8001488:	20000264 	.word	0x20000264
 800148c:	3bfa0000 	.word	0x3bfa0000
 8001490:	3c7a0000 	.word	0x3c7a0000
 8001494:	3cfa0000 	.word	0x3cfa0000

08001498 <MPU6050_Set_SMPRT_DIV>:
	return Buffer;
}

//6- Set Sample Rate Divider
void MPU6050_Set_SMPRT_DIV(uint8_t SMPRTvalue)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b082      	sub	sp, #8
 800149c:	af00      	add	r7, sp, #0
 800149e:	4603      	mov	r3, r0
 80014a0:	71fb      	strb	r3, [r7, #7]
	I2C_Write8(SMPLRT_DIV_REG, SMPRTvalue);
 80014a2:	79fb      	ldrb	r3, [r7, #7]
 80014a4:	4619      	mov	r1, r3
 80014a6:	2019      	movs	r0, #25
 80014a8:	f7ff ff30 	bl	800130c <I2C_Write8>
}
 80014ac:	bf00      	nop
 80014ae:	3708      	adds	r7, #8
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bd80      	pop	{r7, pc}

080014b4 <MPU6050_Get_Accel_RawData>:
//
//}

//9- Get Accel Raw Data
void MPU6050_Get_Accel_RawData(RawData_Def *rawDef)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b088      	sub	sp, #32
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
	uint8_t i2cBuf[2];
	uint8_t AcceArr[6], GyroArr[6];

	I2C_Read(INT_STATUS_REG, &i2cBuf[1],1);
 80014bc:	f107 031c 	add.w	r3, r7, #28
 80014c0:	3301      	adds	r3, #1
 80014c2:	2201      	movs	r2, #1
 80014c4:	4619      	mov	r1, r3
 80014c6:	203a      	movs	r0, #58	; 0x3a
 80014c8:	f7ff fefa 	bl	80012c0 <I2C_Read>
	if((i2cBuf[1]&&0x01))
 80014cc:	7f7b      	ldrb	r3, [r7, #29]
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d04f      	beq.n	8001572 <MPU6050_Get_Accel_RawData+0xbe>
	{
		I2C_Read(ACCEL_XOUT_H_REG, AcceArr,6);
 80014d2:	f107 0314 	add.w	r3, r7, #20
 80014d6:	2206      	movs	r2, #6
 80014d8:	4619      	mov	r1, r3
 80014da:	203b      	movs	r0, #59	; 0x3b
 80014dc:	f7ff fef0 	bl	80012c0 <I2C_Read>

		//Accel Raw Data
		rawDef->x = ((AcceArr[0]<<8) + AcceArr[1]); // x-Axis
 80014e0:	7d3b      	ldrb	r3, [r7, #20]
 80014e2:	b29b      	uxth	r3, r3
 80014e4:	021b      	lsls	r3, r3, #8
 80014e6:	b29a      	uxth	r2, r3
 80014e8:	7d7b      	ldrb	r3, [r7, #21]
 80014ea:	b29b      	uxth	r3, r3
 80014ec:	4413      	add	r3, r2
 80014ee:	b29b      	uxth	r3, r3
 80014f0:	b21a      	sxth	r2, r3
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	801a      	strh	r2, [r3, #0]
		rawDef->y = ((AcceArr[2]<<8) + AcceArr[3]); // y-Axis
 80014f6:	7dbb      	ldrb	r3, [r7, #22]
 80014f8:	b29b      	uxth	r3, r3
 80014fa:	021b      	lsls	r3, r3, #8
 80014fc:	b29a      	uxth	r2, r3
 80014fe:	7dfb      	ldrb	r3, [r7, #23]
 8001500:	b29b      	uxth	r3, r3
 8001502:	4413      	add	r3, r2
 8001504:	b29b      	uxth	r3, r3
 8001506:	b21a      	sxth	r2, r3
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	805a      	strh	r2, [r3, #2]
		rawDef->z = ((AcceArr[4]<<8) + AcceArr[5]); // z-Axis
 800150c:	7e3b      	ldrb	r3, [r7, #24]
 800150e:	b29b      	uxth	r3, r3
 8001510:	021b      	lsls	r3, r3, #8
 8001512:	b29a      	uxth	r2, r3
 8001514:	7e7b      	ldrb	r3, [r7, #25]
 8001516:	b29b      	uxth	r3, r3
 8001518:	4413      	add	r3, r2
 800151a:	b29b      	uxth	r3, r3
 800151c:	b21a      	sxth	r2, r3
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	809a      	strh	r2, [r3, #4]
		//Gyro Raw Data
		I2C_Read(GYRO_XOUT_H_REG, GyroArr,12);
 8001522:	f107 030c 	add.w	r3, r7, #12
 8001526:	220c      	movs	r2, #12
 8001528:	4619      	mov	r1, r3
 800152a:	2043      	movs	r0, #67	; 0x43
 800152c:	f7ff fec8 	bl	80012c0 <I2C_Read>
		GyroRW[0] = ((GyroArr[0]<<8) + GyroArr[1]);
 8001530:	7b3b      	ldrb	r3, [r7, #12]
 8001532:	b29b      	uxth	r3, r3
 8001534:	021b      	lsls	r3, r3, #8
 8001536:	b29a      	uxth	r2, r3
 8001538:	7b7b      	ldrb	r3, [r7, #13]
 800153a:	b29b      	uxth	r3, r3
 800153c:	4413      	add	r3, r2
 800153e:	b29b      	uxth	r3, r3
 8001540:	b21a      	sxth	r2, r3
 8001542:	4b0e      	ldr	r3, [pc, #56]	; (800157c <MPU6050_Get_Accel_RawData+0xc8>)
 8001544:	801a      	strh	r2, [r3, #0]
		GyroRW[1] = (GyroArr[2]<<8) + GyroArr[3];
 8001546:	7bbb      	ldrb	r3, [r7, #14]
 8001548:	b29b      	uxth	r3, r3
 800154a:	021b      	lsls	r3, r3, #8
 800154c:	b29a      	uxth	r2, r3
 800154e:	7bfb      	ldrb	r3, [r7, #15]
 8001550:	b29b      	uxth	r3, r3
 8001552:	4413      	add	r3, r2
 8001554:	b29b      	uxth	r3, r3
 8001556:	b21a      	sxth	r2, r3
 8001558:	4b08      	ldr	r3, [pc, #32]	; (800157c <MPU6050_Get_Accel_RawData+0xc8>)
 800155a:	805a      	strh	r2, [r3, #2]
		GyroRW[2] = ((GyroArr[4]<<8) + GyroArr[5]);
 800155c:	7c3b      	ldrb	r3, [r7, #16]
 800155e:	b29b      	uxth	r3, r3
 8001560:	021b      	lsls	r3, r3, #8
 8001562:	b29a      	uxth	r2, r3
 8001564:	7c7b      	ldrb	r3, [r7, #17]
 8001566:	b29b      	uxth	r3, r3
 8001568:	4413      	add	r3, r2
 800156a:	b29b      	uxth	r3, r3
 800156c:	b21a      	sxth	r2, r3
 800156e:	4b03      	ldr	r3, [pc, #12]	; (800157c <MPU6050_Get_Accel_RawData+0xc8>)
 8001570:	809a      	strh	r2, [r3, #4]
	}
}
 8001572:	bf00      	nop
 8001574:	3720      	adds	r7, #32
 8001576:	46bd      	mov	sp, r7
 8001578:	bd80      	pop	{r7, pc}
 800157a:	bf00      	nop
 800157c:	20000268 	.word	0x20000268

08001580 <MPU6050_Get_Gyro_RawData>:
	CaliDef->y = (AccelScaled.y) - A_Y_Bias;// y-Axis
	CaliDef->z = (AccelScaled.z) - A_Z_Bias;// z-Axis
}
//12- Get Gyro Raw Data
void MPU6050_Get_Gyro_RawData(RawData_Def *rawDef)
{
 8001580:	b480      	push	{r7}
 8001582:	b083      	sub	sp, #12
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]

	//Accel Raw Data
	rawDef->x = GyroRW[0];
 8001588:	4b09      	ldr	r3, [pc, #36]	; (80015b0 <MPU6050_Get_Gyro_RawData+0x30>)
 800158a:	f9b3 2000 	ldrsh.w	r2, [r3]
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	801a      	strh	r2, [r3, #0]
	rawDef->y = GyroRW[1];
 8001592:	4b07      	ldr	r3, [pc, #28]	; (80015b0 <MPU6050_Get_Gyro_RawData+0x30>)
 8001594:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	805a      	strh	r2, [r3, #2]
	rawDef->z = GyroRW[2];
 800159c:	4b04      	ldr	r3, [pc, #16]	; (80015b0 <MPU6050_Get_Gyro_RawData+0x30>)
 800159e:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	809a      	strh	r2, [r3, #4]

}
 80015a6:	bf00      	nop
 80015a8:	370c      	adds	r7, #12
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bc80      	pop	{r7}
 80015ae:	4770      	bx	lr
 80015b0:	20000268 	.word	0x20000268

080015b4 <MPU6050_Get_Mag_RawData>:

void MPU6050_Get_Mag_RawData(RawData_Def *rawDef)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b084      	sub	sp, #16
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
	uint8_t MagArr[6];
	I2C_Read(0x49, MagArr,6);
 80015bc:	f107 0308 	add.w	r3, r7, #8
 80015c0:	2206      	movs	r2, #6
 80015c2:	4619      	mov	r1, r3
 80015c4:	2049      	movs	r0, #73	; 0x49
 80015c6:	f7ff fe7b 	bl	80012c0 <I2C_Read>
	MagRW[0] =  ((MagArr[0]<<8) + MagArr[1]);
 80015ca:	7a3b      	ldrb	r3, [r7, #8]
 80015cc:	b29b      	uxth	r3, r3
 80015ce:	021b      	lsls	r3, r3, #8
 80015d0:	b29a      	uxth	r2, r3
 80015d2:	7a7b      	ldrb	r3, [r7, #9]
 80015d4:	b29b      	uxth	r3, r3
 80015d6:	4413      	add	r3, r2
 80015d8:	b29b      	uxth	r3, r3
 80015da:	b21a      	sxth	r2, r3
 80015dc:	4b15      	ldr	r3, [pc, #84]	; (8001634 <MPU6050_Get_Mag_RawData+0x80>)
 80015de:	801a      	strh	r2, [r3, #0]
	MagRW[1] =	((MagArr[2]<<8) + MagArr[3]);
 80015e0:	7abb      	ldrb	r3, [r7, #10]
 80015e2:	b29b      	uxth	r3, r3
 80015e4:	021b      	lsls	r3, r3, #8
 80015e6:	b29a      	uxth	r2, r3
 80015e8:	7afb      	ldrb	r3, [r7, #11]
 80015ea:	b29b      	uxth	r3, r3
 80015ec:	4413      	add	r3, r2
 80015ee:	b29b      	uxth	r3, r3
 80015f0:	b21a      	sxth	r2, r3
 80015f2:	4b10      	ldr	r3, [pc, #64]	; (8001634 <MPU6050_Get_Mag_RawData+0x80>)
 80015f4:	805a      	strh	r2, [r3, #2]
	MagRW[2] =	((MagArr[4]<<8) + MagArr[5]);
 80015f6:	7b3b      	ldrb	r3, [r7, #12]
 80015f8:	b29b      	uxth	r3, r3
 80015fa:	021b      	lsls	r3, r3, #8
 80015fc:	b29a      	uxth	r2, r3
 80015fe:	7b7b      	ldrb	r3, [r7, #13]
 8001600:	b29b      	uxth	r3, r3
 8001602:	4413      	add	r3, r2
 8001604:	b29b      	uxth	r3, r3
 8001606:	b21a      	sxth	r2, r3
 8001608:	4b0a      	ldr	r3, [pc, #40]	; (8001634 <MPU6050_Get_Mag_RawData+0x80>)
 800160a:	809a      	strh	r2, [r3, #4]
	//Accel Raw Data
	rawDef->x = MagRW[0];
 800160c:	4b09      	ldr	r3, [pc, #36]	; (8001634 <MPU6050_Get_Mag_RawData+0x80>)
 800160e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	801a      	strh	r2, [r3, #0]
	rawDef->y = MagRW[1];
 8001616:	4b07      	ldr	r3, [pc, #28]	; (8001634 <MPU6050_Get_Mag_RawData+0x80>)
 8001618:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	805a      	strh	r2, [r3, #2]
	rawDef->z = MagRW[2];
 8001620:	4b04      	ldr	r3, [pc, #16]	; (8001634 <MPU6050_Get_Mag_RawData+0x80>)
 8001622:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	809a      	strh	r2, [r3, #4]

}
 800162a:	bf00      	nop
 800162c:	3710      	adds	r7, #16
 800162e:	46bd      	mov	sp, r7
 8001630:	bd80      	pop	{r7, pc}
 8001632:	bf00      	nop
 8001634:	20000270 	.word	0x20000270

08001638 <updateQuaternion>:
//   for (int i = 0; i < 6; i++) {
//	 destination[i] = 100.0 + 100.0*((float)selfTest[i] - factoryTrim[i])/factoryTrim[i]; // Report percent differences
//   }
//}
// A.
void updateQuaternion(RawData_Def myAccelRaw, RawData_Def myGyroRaw, RawData_Def myMagRaw, Offset offset, updateQuater *upQua){
 8001638:	b590      	push	{r4, r7, lr}
 800163a:	b085      	sub	sp, #20
 800163c:	af00      	add	r7, sp, #0
 800163e:	f107 0408 	add.w	r4, r7, #8
 8001642:	e884 0003 	stmia.w	r4, {r0, r1}
 8001646:	4639      	mov	r1, r7
 8001648:	e881 000c 	stmia.w	r1, {r2, r3}
//	  upQua->gxrs = (float)((float)(myGyroRaw.x - (-953)) / 16.384 * 0.01745329); //degree to radians - offset.GX
//	  upQua->gyrs = (float)((float)(myGyroRaw.y - (-64)) / 16.384 * 0.01745329); //degree to radians - offset.GY
//	  upQua->gzrs = (float)((float)(myGyroRaw.z - 6) / 16.384 * 0.01745329); //degree to radians - offset.GZ

	// update: 11/3/2023
	  upQua->axg = (float)(myAccelRaw.x - offset.AX) / 4096.0; // offset.AX //35
 800164c:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8001650:	461a      	mov	r2, r3
 8001652:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001654:	1ad3      	subs	r3, r2, r3
 8001656:	4618      	mov	r0, r3
 8001658:	f7ff fb20 	bl	8000c9c <__aeabi_i2f>
 800165c:	4603      	mov	r3, r0
 800165e:	f04f 418b 	mov.w	r1, #1166016512	; 0x45800000
 8001662:	4618      	mov	r0, r3
 8001664:	f7ff fc22 	bl	8000eac <__aeabi_fdiv>
 8001668:	4603      	mov	r3, r0
 800166a:	461a      	mov	r2, r3
 800166c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800166e:	601a      	str	r2, [r3, #0]
	  upQua->ayg = (float)(myAccelRaw.y - offset.AY) / 4096.0; // offset.AY
 8001670:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001674:	461a      	mov	r2, r3
 8001676:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001678:	1ad3      	subs	r3, r2, r3
 800167a:	4618      	mov	r0, r3
 800167c:	f7ff fb0e 	bl	8000c9c <__aeabi_i2f>
 8001680:	4603      	mov	r3, r0
 8001682:	f04f 418b 	mov.w	r1, #1166016512	; 0x45800000
 8001686:	4618      	mov	r0, r3
 8001688:	f7ff fc10 	bl	8000eac <__aeabi_fdiv>
 800168c:	4603      	mov	r3, r0
 800168e:	461a      	mov	r2, r3
 8001690:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001692:	605a      	str	r2, [r3, #4]
	  upQua->azg = (float)(myAccelRaw.z - offset.AZ) / 4096.0; // offset.AZ
 8001694:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001698:	461a      	mov	r2, r3
 800169a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800169c:	1ad3      	subs	r3, r2, r3
 800169e:	4618      	mov	r0, r3
 80016a0:	f7ff fafc 	bl	8000c9c <__aeabi_i2f>
 80016a4:	4603      	mov	r3, r0
 80016a6:	f04f 418b 	mov.w	r1, #1166016512	; 0x45800000
 80016aa:	4618      	mov	r0, r3
 80016ac:	f7ff fbfe 	bl	8000eac <__aeabi_fdiv>
 80016b0:	4603      	mov	r3, r0
 80016b2:	461a      	mov	r2, r3
 80016b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80016b6:	609a      	str	r2, [r3, #8]
	  upQua->gxrs = (float)((float)(myGyroRaw.x - offset.GX) / 16.384 * 0.01745329); //degree to radians - offset.GX
 80016b8:	f9b7 3000 	ldrsh.w	r3, [r7]
 80016bc:	461a      	mov	r2, r3
 80016be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80016c0:	1ad3      	subs	r3, r2, r3
 80016c2:	4618      	mov	r0, r3
 80016c4:	f7ff faea 	bl	8000c9c <__aeabi_i2f>
 80016c8:	4603      	mov	r3, r0
 80016ca:	4618      	mov	r0, r3
 80016cc:	f7fe feac 	bl	8000428 <__aeabi_f2d>
 80016d0:	a349      	add	r3, pc, #292	; (adr r3, 80017f8 <updateQuaternion+0x1c0>)
 80016d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016d6:	f7ff f829 	bl	800072c <__aeabi_ddiv>
 80016da:	4602      	mov	r2, r0
 80016dc:	460b      	mov	r3, r1
 80016de:	4610      	mov	r0, r2
 80016e0:	4619      	mov	r1, r3
 80016e2:	a347      	add	r3, pc, #284	; (adr r3, 8001800 <updateQuaternion+0x1c8>)
 80016e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016e8:	f7fe fef6 	bl	80004d8 <__aeabi_dmul>
 80016ec:	4602      	mov	r2, r0
 80016ee:	460b      	mov	r3, r1
 80016f0:	4610      	mov	r0, r2
 80016f2:	4619      	mov	r1, r3
 80016f4:	f7ff f9c8 	bl	8000a88 <__aeabi_d2f>
 80016f8:	4602      	mov	r2, r0
 80016fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80016fc:	60da      	str	r2, [r3, #12]
	  upQua->gyrs = (float)((float)(myGyroRaw.y - offset.GY) / 16.384 * 0.01745329); //degree to radians - offset.GY
 80016fe:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001702:	461a      	mov	r2, r3
 8001704:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001706:	1ad3      	subs	r3, r2, r3
 8001708:	4618      	mov	r0, r3
 800170a:	f7ff fac7 	bl	8000c9c <__aeabi_i2f>
 800170e:	4603      	mov	r3, r0
 8001710:	4618      	mov	r0, r3
 8001712:	f7fe fe89 	bl	8000428 <__aeabi_f2d>
 8001716:	a338      	add	r3, pc, #224	; (adr r3, 80017f8 <updateQuaternion+0x1c0>)
 8001718:	e9d3 2300 	ldrd	r2, r3, [r3]
 800171c:	f7ff f806 	bl	800072c <__aeabi_ddiv>
 8001720:	4602      	mov	r2, r0
 8001722:	460b      	mov	r3, r1
 8001724:	4610      	mov	r0, r2
 8001726:	4619      	mov	r1, r3
 8001728:	a335      	add	r3, pc, #212	; (adr r3, 8001800 <updateQuaternion+0x1c8>)
 800172a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800172e:	f7fe fed3 	bl	80004d8 <__aeabi_dmul>
 8001732:	4602      	mov	r2, r0
 8001734:	460b      	mov	r3, r1
 8001736:	4610      	mov	r0, r2
 8001738:	4619      	mov	r1, r3
 800173a:	f7ff f9a5 	bl	8000a88 <__aeabi_d2f>
 800173e:	4602      	mov	r2, r0
 8001740:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001742:	611a      	str	r2, [r3, #16]
	  upQua->gzrs = (float)((float)(myGyroRaw.z - offset.GZ) / 16.384 * 0.01745329); //degree to radians - offset.GZ
 8001744:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001748:	461a      	mov	r2, r3
 800174a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800174c:	1ad3      	subs	r3, r2, r3
 800174e:	4618      	mov	r0, r3
 8001750:	f7ff faa4 	bl	8000c9c <__aeabi_i2f>
 8001754:	4603      	mov	r3, r0
 8001756:	4618      	mov	r0, r3
 8001758:	f7fe fe66 	bl	8000428 <__aeabi_f2d>
 800175c:	a326      	add	r3, pc, #152	; (adr r3, 80017f8 <updateQuaternion+0x1c0>)
 800175e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001762:	f7fe ffe3 	bl	800072c <__aeabi_ddiv>
 8001766:	4602      	mov	r2, r0
 8001768:	460b      	mov	r3, r1
 800176a:	4610      	mov	r0, r2
 800176c:	4619      	mov	r1, r3
 800176e:	a324      	add	r3, pc, #144	; (adr r3, 8001800 <updateQuaternion+0x1c8>)
 8001770:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001774:	f7fe feb0 	bl	80004d8 <__aeabi_dmul>
 8001778:	4602      	mov	r2, r0
 800177a:	460b      	mov	r3, r1
 800177c:	4610      	mov	r0, r2
 800177e:	4619      	mov	r1, r3
 8001780:	f7ff f982 	bl	8000a88 <__aeabi_d2f>
 8001784:	4602      	mov	r2, r0
 8001786:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001788:	615a      	str	r2, [r3, #20]
	  upQua->mx = (float)(myMagRaw.x - offset.MX) / 660.0; // offset.AX
 800178a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800178e:	461a      	mov	r2, r3
 8001790:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001792:	1ad3      	subs	r3, r2, r3
 8001794:	4618      	mov	r0, r3
 8001796:	f7ff fa81 	bl	8000c9c <__aeabi_i2f>
 800179a:	4603      	mov	r3, r0
 800179c:	491a      	ldr	r1, [pc, #104]	; (8001808 <updateQuaternion+0x1d0>)
 800179e:	4618      	mov	r0, r3
 80017a0:	f7ff fb84 	bl	8000eac <__aeabi_fdiv>
 80017a4:	4603      	mov	r3, r0
 80017a6:	461a      	mov	r2, r3
 80017a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80017aa:	619a      	str	r2, [r3, #24]
	  upQua->my = (float)(myMagRaw.y - offset.MY) / 660.0; // offset.AY
 80017ac:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80017b0:	461a      	mov	r2, r3
 80017b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80017b4:	1ad3      	subs	r3, r2, r3
 80017b6:	4618      	mov	r0, r3
 80017b8:	f7ff fa70 	bl	8000c9c <__aeabi_i2f>
 80017bc:	4603      	mov	r3, r0
 80017be:	4912      	ldr	r1, [pc, #72]	; (8001808 <updateQuaternion+0x1d0>)
 80017c0:	4618      	mov	r0, r3
 80017c2:	f7ff fb73 	bl	8000eac <__aeabi_fdiv>
 80017c6:	4603      	mov	r3, r0
 80017c8:	461a      	mov	r2, r3
 80017ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80017cc:	61da      	str	r2, [r3, #28]
	  upQua->mz = (float)(myMagRaw.z - offset.MZ) / 660.0; // offset.AZ
 80017ce:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 80017d2:	461a      	mov	r2, r3
 80017d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80017d6:	1ad3      	subs	r3, r2, r3
 80017d8:	4618      	mov	r0, r3
 80017da:	f7ff fa5f 	bl	8000c9c <__aeabi_i2f>
 80017de:	4603      	mov	r3, r0
 80017e0:	4909      	ldr	r1, [pc, #36]	; (8001808 <updateQuaternion+0x1d0>)
 80017e2:	4618      	mov	r0, r3
 80017e4:	f7ff fb62 	bl	8000eac <__aeabi_fdiv>
 80017e8:	4603      	mov	r3, r0
 80017ea:	461a      	mov	r2, r3
 80017ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80017ee:	621a      	str	r2, [r3, #32]
//	  HAL_Delay(2000);
//	  upQua->gxrs = 20; //(myGyroRaw.x - offset.GX);


	  // Degree to Radians Pi / 180 = 0.01745329 0.01745329251994329576923690768489
}
 80017f0:	bf00      	nop
 80017f2:	3714      	adds	r7, #20
 80017f4:	46bd      	mov	sp, r7
 80017f6:	bd90      	pop	{r4, r7, pc}
 80017f8:	d2f1a9fc 	.word	0xd2f1a9fc
 80017fc:	4030624d 	.word	0x4030624d
 8001800:	7707c94d 	.word	0x7707c94d
 8001804:	3f91df46 	.word	0x3f91df46
 8001808:	44250000 	.word	0x44250000

0800180c <MahonyAHRSupdateIMU>:
// B. -------------------------------> ham nay can check -> vĂ  .
void MahonyAHRSupdateIMU(updateQuater upQua, float sampleFreq, q_volatile *qVol){
 800180c:	b084      	sub	sp, #16
 800180e:	b5b0      	push	{r4, r5, r7, lr}
 8001810:	b08a      	sub	sp, #40	; 0x28
 8001812:	af00      	add	r7, sp, #0
 8001814:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8001818:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	  float halfvx, halfvy, halfvz;
	  float halfex, halfey, halfez;
	  float qa, qb, qc;

	  // Compute feedback only if accelerometer measurement valid (avoids NaN in accelerometer normalisation)
	  if(!((upQua.axg == 0.0f) && (upQua.ayg == 0.0f) && (upQua.azg == 0.0f))) {
 800181c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800181e:	f04f 0100 	mov.w	r1, #0
 8001822:	4618      	mov	r0, r3
 8001824:	f7ff fc22 	bl	800106c <__aeabi_fcmpeq>
 8001828:	4603      	mov	r3, r0
 800182a:	2b00      	cmp	r3, #0
 800182c:	d012      	beq.n	8001854 <MahonyAHRSupdateIMU+0x48>
 800182e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001830:	f04f 0100 	mov.w	r1, #0
 8001834:	4618      	mov	r0, r3
 8001836:	f7ff fc19 	bl	800106c <__aeabi_fcmpeq>
 800183a:	4603      	mov	r3, r0
 800183c:	2b00      	cmp	r3, #0
 800183e:	d009      	beq.n	8001854 <MahonyAHRSupdateIMU+0x48>
 8001840:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001842:	f04f 0100 	mov.w	r1, #0
 8001846:	4618      	mov	r0, r3
 8001848:	f7ff fc10 	bl	800106c <__aeabi_fcmpeq>
 800184c:	4603      	mov	r3, r0
 800184e:	2b00      	cmp	r3, #0
 8001850:	f040 819a 	bne.w	8001b88 <MahonyAHRSupdateIMU+0x37c>

	    // Normalise accelerometer measurement
	    norm = sqrt(upQua.axg * upQua.axg + upQua.ayg * upQua.ayg + upQua.azg * upQua.azg);
 8001854:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001856:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001858:	4611      	mov	r1, r2
 800185a:	4618      	mov	r0, r3
 800185c:	f7ff fa72 	bl	8000d44 <__aeabi_fmul>
 8001860:	4603      	mov	r3, r0
 8001862:	461c      	mov	r4, r3
 8001864:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001866:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001868:	4611      	mov	r1, r2
 800186a:	4618      	mov	r0, r3
 800186c:	f7ff fa6a 	bl	8000d44 <__aeabi_fmul>
 8001870:	4603      	mov	r3, r0
 8001872:	4619      	mov	r1, r3
 8001874:	4620      	mov	r0, r4
 8001876:	f7ff f95d 	bl	8000b34 <__addsf3>
 800187a:	4603      	mov	r3, r0
 800187c:	461c      	mov	r4, r3
 800187e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001880:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001882:	4611      	mov	r1, r2
 8001884:	4618      	mov	r0, r3
 8001886:	f7ff fa5d 	bl	8000d44 <__aeabi_fmul>
 800188a:	4603      	mov	r3, r0
 800188c:	4619      	mov	r1, r3
 800188e:	4620      	mov	r0, r4
 8001890:	f7ff f950 	bl	8000b34 <__addsf3>
 8001894:	4603      	mov	r3, r0
 8001896:	4618      	mov	r0, r3
 8001898:	f7fe fdc6 	bl	8000428 <__aeabi_f2d>
 800189c:	4602      	mov	r2, r0
 800189e:	460b      	mov	r3, r1
 80018a0:	4610      	mov	r0, r2
 80018a2:	4619      	mov	r1, r3
 80018a4:	f00a ff36 	bl	800c714 <sqrt>
 80018a8:	4602      	mov	r2, r0
 80018aa:	460b      	mov	r3, r1
 80018ac:	4610      	mov	r0, r2
 80018ae:	4619      	mov	r1, r3
 80018b0:	f7ff f8ea 	bl	8000a88 <__aeabi_d2f>
 80018b4:	4603      	mov	r3, r0
 80018b6:	627b      	str	r3, [r7, #36]	; 0x24
	    upQua.axg /= norm;
 80018b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80018ba:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80018bc:	4618      	mov	r0, r3
 80018be:	f7ff faf5 	bl	8000eac <__aeabi_fdiv>
 80018c2:	4603      	mov	r3, r0
 80018c4:	63bb      	str	r3, [r7, #56]	; 0x38
	    upQua.ayg /= norm;
 80018c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80018c8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80018ca:	4618      	mov	r0, r3
 80018cc:	f7ff faee 	bl	8000eac <__aeabi_fdiv>
 80018d0:	4603      	mov	r3, r0
 80018d2:	63fb      	str	r3, [r7, #60]	; 0x3c
	    upQua.azg /= norm;
 80018d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80018d6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80018d8:	4618      	mov	r0, r3
 80018da:	f7ff fae7 	bl	8000eac <__aeabi_fdiv>
 80018de:	4603      	mov	r3, r0
 80018e0:	643b      	str	r3, [r7, #64]	; 0x40

	    // Estimated direction of gravity and vector perpendicular to magnetic flux
	    halfvx = qVol->q1 * qVol->q3 - qVol->q0 * qVol->q2;
 80018e2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80018e4:	685a      	ldr	r2, [r3, #4]
 80018e6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80018e8:	68db      	ldr	r3, [r3, #12]
 80018ea:	4619      	mov	r1, r3
 80018ec:	4610      	mov	r0, r2
 80018ee:	f7ff fa29 	bl	8000d44 <__aeabi_fmul>
 80018f2:	4603      	mov	r3, r0
 80018f4:	461c      	mov	r4, r3
 80018f6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80018f8:	681a      	ldr	r2, [r3, #0]
 80018fa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80018fc:	689b      	ldr	r3, [r3, #8]
 80018fe:	4619      	mov	r1, r3
 8001900:	4610      	mov	r0, r2
 8001902:	f7ff fa1f 	bl	8000d44 <__aeabi_fmul>
 8001906:	4603      	mov	r3, r0
 8001908:	4619      	mov	r1, r3
 800190a:	4620      	mov	r0, r4
 800190c:	f7ff f910 	bl	8000b30 <__aeabi_fsub>
 8001910:	4603      	mov	r3, r0
 8001912:	623b      	str	r3, [r7, #32]
	    halfvy = qVol->q0 * qVol->q1 + qVol->q2 * qVol->q3;
 8001914:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001916:	681a      	ldr	r2, [r3, #0]
 8001918:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800191a:	685b      	ldr	r3, [r3, #4]
 800191c:	4619      	mov	r1, r3
 800191e:	4610      	mov	r0, r2
 8001920:	f7ff fa10 	bl	8000d44 <__aeabi_fmul>
 8001924:	4603      	mov	r3, r0
 8001926:	461c      	mov	r4, r3
 8001928:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800192a:	689a      	ldr	r2, [r3, #8]
 800192c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800192e:	68db      	ldr	r3, [r3, #12]
 8001930:	4619      	mov	r1, r3
 8001932:	4610      	mov	r0, r2
 8001934:	f7ff fa06 	bl	8000d44 <__aeabi_fmul>
 8001938:	4603      	mov	r3, r0
 800193a:	4619      	mov	r1, r3
 800193c:	4620      	mov	r0, r4
 800193e:	f7ff f8f9 	bl	8000b34 <__addsf3>
 8001942:	4603      	mov	r3, r0
 8001944:	61fb      	str	r3, [r7, #28]
	    halfvz = qVol->q0 * qVol->q0 - 0.5f + qVol->q3 * qVol->q3;
 8001946:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001948:	681a      	ldr	r2, [r3, #0]
 800194a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	4619      	mov	r1, r3
 8001950:	4610      	mov	r0, r2
 8001952:	f7ff f9f7 	bl	8000d44 <__aeabi_fmul>
 8001956:	4603      	mov	r3, r0
 8001958:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800195c:	4618      	mov	r0, r3
 800195e:	f7ff f8e7 	bl	8000b30 <__aeabi_fsub>
 8001962:	4603      	mov	r3, r0
 8001964:	461c      	mov	r4, r3
 8001966:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001968:	68da      	ldr	r2, [r3, #12]
 800196a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800196c:	68db      	ldr	r3, [r3, #12]
 800196e:	4619      	mov	r1, r3
 8001970:	4610      	mov	r0, r2
 8001972:	f7ff f9e7 	bl	8000d44 <__aeabi_fmul>
 8001976:	4603      	mov	r3, r0
 8001978:	4619      	mov	r1, r3
 800197a:	4620      	mov	r0, r4
 800197c:	f7ff f8da 	bl	8000b34 <__addsf3>
 8001980:	4603      	mov	r3, r0
 8001982:	61bb      	str	r3, [r7, #24]

	    // Error is sum of cross product between estimated and measured direction of gravity
	    halfex = (upQua.ayg * halfvz - upQua.azg * halfvy);
 8001984:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001986:	69b9      	ldr	r1, [r7, #24]
 8001988:	4618      	mov	r0, r3
 800198a:	f7ff f9db 	bl	8000d44 <__aeabi_fmul>
 800198e:	4603      	mov	r3, r0
 8001990:	461c      	mov	r4, r3
 8001992:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001994:	69f9      	ldr	r1, [r7, #28]
 8001996:	4618      	mov	r0, r3
 8001998:	f7ff f9d4 	bl	8000d44 <__aeabi_fmul>
 800199c:	4603      	mov	r3, r0
 800199e:	4619      	mov	r1, r3
 80019a0:	4620      	mov	r0, r4
 80019a2:	f7ff f8c5 	bl	8000b30 <__aeabi_fsub>
 80019a6:	4603      	mov	r3, r0
 80019a8:	617b      	str	r3, [r7, #20]
	    halfey = (upQua.azg * halfvx - upQua.axg * halfvz);
 80019aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80019ac:	6a39      	ldr	r1, [r7, #32]
 80019ae:	4618      	mov	r0, r3
 80019b0:	f7ff f9c8 	bl	8000d44 <__aeabi_fmul>
 80019b4:	4603      	mov	r3, r0
 80019b6:	461c      	mov	r4, r3
 80019b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80019ba:	69b9      	ldr	r1, [r7, #24]
 80019bc:	4618      	mov	r0, r3
 80019be:	f7ff f9c1 	bl	8000d44 <__aeabi_fmul>
 80019c2:	4603      	mov	r3, r0
 80019c4:	4619      	mov	r1, r3
 80019c6:	4620      	mov	r0, r4
 80019c8:	f7ff f8b2 	bl	8000b30 <__aeabi_fsub>
 80019cc:	4603      	mov	r3, r0
 80019ce:	613b      	str	r3, [r7, #16]
	    halfez = (upQua.axg * halfvy - upQua.ayg * halfvx);
 80019d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80019d2:	69f9      	ldr	r1, [r7, #28]
 80019d4:	4618      	mov	r0, r3
 80019d6:	f7ff f9b5 	bl	8000d44 <__aeabi_fmul>
 80019da:	4603      	mov	r3, r0
 80019dc:	461c      	mov	r4, r3
 80019de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80019e0:	6a39      	ldr	r1, [r7, #32]
 80019e2:	4618      	mov	r0, r3
 80019e4:	f7ff f9ae 	bl	8000d44 <__aeabi_fmul>
 80019e8:	4603      	mov	r3, r0
 80019ea:	4619      	mov	r1, r3
 80019ec:	4620      	mov	r0, r4
 80019ee:	f7ff f89f 	bl	8000b30 <__aeabi_fsub>
 80019f2:	4603      	mov	r3, r0
 80019f4:	60fb      	str	r3, [r7, #12]

	    // Compute and apply integral feedback if enabled
	    if(twoKi > 0.0f) {
 80019f6:	4b40      	ldr	r3, [pc, #256]	; (8001af8 <MahonyAHRSupdateIMU+0x2ec>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f04f 0100 	mov.w	r1, #0
 80019fe:	4618      	mov	r0, r3
 8001a00:	f7ff fb5c 	bl	80010bc <__aeabi_fcmpgt>
 8001a04:	4603      	mov	r3, r0
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d07e      	beq.n	8001b08 <MahonyAHRSupdateIMU+0x2fc>
	      integralFBx += twoKi * halfex * (1.0f / sampleFreq);  // integral error scaled by Ki
 8001a0a:	4b3b      	ldr	r3, [pc, #236]	; (8001af8 <MahonyAHRSupdateIMU+0x2ec>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	6979      	ldr	r1, [r7, #20]
 8001a10:	4618      	mov	r0, r3
 8001a12:	f7ff f997 	bl	8000d44 <__aeabi_fmul>
 8001a16:	4603      	mov	r3, r0
 8001a18:	461c      	mov	r4, r3
 8001a1a:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8001a1c:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8001a20:	f7ff fa44 	bl	8000eac <__aeabi_fdiv>
 8001a24:	4603      	mov	r3, r0
 8001a26:	4619      	mov	r1, r3
 8001a28:	4620      	mov	r0, r4
 8001a2a:	f7ff f98b 	bl	8000d44 <__aeabi_fmul>
 8001a2e:	4603      	mov	r3, r0
 8001a30:	461a      	mov	r2, r3
 8001a32:	4b32      	ldr	r3, [pc, #200]	; (8001afc <MahonyAHRSupdateIMU+0x2f0>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	4619      	mov	r1, r3
 8001a38:	4610      	mov	r0, r2
 8001a3a:	f7ff f87b 	bl	8000b34 <__addsf3>
 8001a3e:	4603      	mov	r3, r0
 8001a40:	461a      	mov	r2, r3
 8001a42:	4b2e      	ldr	r3, [pc, #184]	; (8001afc <MahonyAHRSupdateIMU+0x2f0>)
 8001a44:	601a      	str	r2, [r3, #0]
	      integralFBy += twoKi * halfey * (1.0f / sampleFreq);
 8001a46:	4b2c      	ldr	r3, [pc, #176]	; (8001af8 <MahonyAHRSupdateIMU+0x2ec>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	6939      	ldr	r1, [r7, #16]
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	f7ff f979 	bl	8000d44 <__aeabi_fmul>
 8001a52:	4603      	mov	r3, r0
 8001a54:	461c      	mov	r4, r3
 8001a56:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8001a58:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8001a5c:	f7ff fa26 	bl	8000eac <__aeabi_fdiv>
 8001a60:	4603      	mov	r3, r0
 8001a62:	4619      	mov	r1, r3
 8001a64:	4620      	mov	r0, r4
 8001a66:	f7ff f96d 	bl	8000d44 <__aeabi_fmul>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	461a      	mov	r2, r3
 8001a6e:	4b24      	ldr	r3, [pc, #144]	; (8001b00 <MahonyAHRSupdateIMU+0x2f4>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	4619      	mov	r1, r3
 8001a74:	4610      	mov	r0, r2
 8001a76:	f7ff f85d 	bl	8000b34 <__addsf3>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	461a      	mov	r2, r3
 8001a7e:	4b20      	ldr	r3, [pc, #128]	; (8001b00 <MahonyAHRSupdateIMU+0x2f4>)
 8001a80:	601a      	str	r2, [r3, #0]
	      integralFBz += twoKi * halfez * (1.0f / sampleFreq);
 8001a82:	4b1d      	ldr	r3, [pc, #116]	; (8001af8 <MahonyAHRSupdateIMU+0x2ec>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	68f9      	ldr	r1, [r7, #12]
 8001a88:	4618      	mov	r0, r3
 8001a8a:	f7ff f95b 	bl	8000d44 <__aeabi_fmul>
 8001a8e:	4603      	mov	r3, r0
 8001a90:	461c      	mov	r4, r3
 8001a92:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8001a94:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8001a98:	f7ff fa08 	bl	8000eac <__aeabi_fdiv>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	4619      	mov	r1, r3
 8001aa0:	4620      	mov	r0, r4
 8001aa2:	f7ff f94f 	bl	8000d44 <__aeabi_fmul>
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	461a      	mov	r2, r3
 8001aaa:	4b16      	ldr	r3, [pc, #88]	; (8001b04 <MahonyAHRSupdateIMU+0x2f8>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	4619      	mov	r1, r3
 8001ab0:	4610      	mov	r0, r2
 8001ab2:	f7ff f83f 	bl	8000b34 <__addsf3>
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	461a      	mov	r2, r3
 8001aba:	4b12      	ldr	r3, [pc, #72]	; (8001b04 <MahonyAHRSupdateIMU+0x2f8>)
 8001abc:	601a      	str	r2, [r3, #0]
	      upQua.gxrs += integralFBx;  // apply integral feedback
 8001abe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001ac0:	4a0e      	ldr	r2, [pc, #56]	; (8001afc <MahonyAHRSupdateIMU+0x2f0>)
 8001ac2:	6812      	ldr	r2, [r2, #0]
 8001ac4:	4611      	mov	r1, r2
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	f7ff f834 	bl	8000b34 <__addsf3>
 8001acc:	4603      	mov	r3, r0
 8001ace:	647b      	str	r3, [r7, #68]	; 0x44
	      upQua.gyrs += integralFBy;
 8001ad0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001ad2:	4a0b      	ldr	r2, [pc, #44]	; (8001b00 <MahonyAHRSupdateIMU+0x2f4>)
 8001ad4:	6812      	ldr	r2, [r2, #0]
 8001ad6:	4611      	mov	r1, r2
 8001ad8:	4618      	mov	r0, r3
 8001ada:	f7ff f82b 	bl	8000b34 <__addsf3>
 8001ade:	4603      	mov	r3, r0
 8001ae0:	64bb      	str	r3, [r7, #72]	; 0x48
	      upQua.gzrs += integralFBz;
 8001ae2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001ae4:	4a07      	ldr	r2, [pc, #28]	; (8001b04 <MahonyAHRSupdateIMU+0x2f8>)
 8001ae6:	6812      	ldr	r2, [r2, #0]
 8001ae8:	4611      	mov	r1, r2
 8001aea:	4618      	mov	r0, r3
 8001aec:	f7ff f822 	bl	8000b34 <__addsf3>
 8001af0:	4603      	mov	r3, r0
 8001af2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001af4:	e014      	b.n	8001b20 <MahonyAHRSupdateIMU+0x314>
 8001af6:	bf00      	nop
 8001af8:	20000004 	.word	0x20000004
 8001afc:	20000278 	.word	0x20000278
 8001b00:	2000027c 	.word	0x2000027c
 8001b04:	20000280 	.word	0x20000280
	    }
	    else {
	      integralFBx = 0.0f; // prevent integral windup
 8001b08:	4b1b      	ldr	r3, [pc, #108]	; (8001b78 <MahonyAHRSupdateIMU+0x36c>)
 8001b0a:	f04f 0200 	mov.w	r2, #0
 8001b0e:	601a      	str	r2, [r3, #0]
	      integralFBy = 0.0f;
 8001b10:	4b1a      	ldr	r3, [pc, #104]	; (8001b7c <MahonyAHRSupdateIMU+0x370>)
 8001b12:	f04f 0200 	mov.w	r2, #0
 8001b16:	601a      	str	r2, [r3, #0]
	      integralFBz = 0.0f;
 8001b18:	4b19      	ldr	r3, [pc, #100]	; (8001b80 <MahonyAHRSupdateIMU+0x374>)
 8001b1a:	f04f 0200 	mov.w	r2, #0
 8001b1e:	601a      	str	r2, [r3, #0]
	    }

	    // Apply proportional feedback
	    upQua.gxrs += twoKp * halfex;
 8001b20:	6c7c      	ldr	r4, [r7, #68]	; 0x44
 8001b22:	4b18      	ldr	r3, [pc, #96]	; (8001b84 <MahonyAHRSupdateIMU+0x378>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	6979      	ldr	r1, [r7, #20]
 8001b28:	4618      	mov	r0, r3
 8001b2a:	f7ff f90b 	bl	8000d44 <__aeabi_fmul>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	4619      	mov	r1, r3
 8001b32:	4620      	mov	r0, r4
 8001b34:	f7fe fffe 	bl	8000b34 <__addsf3>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	647b      	str	r3, [r7, #68]	; 0x44
	    upQua.gyrs += twoKp * halfey;
 8001b3c:	6cbc      	ldr	r4, [r7, #72]	; 0x48
 8001b3e:	4b11      	ldr	r3, [pc, #68]	; (8001b84 <MahonyAHRSupdateIMU+0x378>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	6939      	ldr	r1, [r7, #16]
 8001b44:	4618      	mov	r0, r3
 8001b46:	f7ff f8fd 	bl	8000d44 <__aeabi_fmul>
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	4619      	mov	r1, r3
 8001b4e:	4620      	mov	r0, r4
 8001b50:	f7fe fff0 	bl	8000b34 <__addsf3>
 8001b54:	4603      	mov	r3, r0
 8001b56:	64bb      	str	r3, [r7, #72]	; 0x48
	    upQua.gzrs += twoKp * halfez;
 8001b58:	6cfc      	ldr	r4, [r7, #76]	; 0x4c
 8001b5a:	4b0a      	ldr	r3, [pc, #40]	; (8001b84 <MahonyAHRSupdateIMU+0x378>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	68f9      	ldr	r1, [r7, #12]
 8001b60:	4618      	mov	r0, r3
 8001b62:	f7ff f8ef 	bl	8000d44 <__aeabi_fmul>
 8001b66:	4603      	mov	r3, r0
 8001b68:	4619      	mov	r1, r3
 8001b6a:	4620      	mov	r0, r4
 8001b6c:	f7fe ffe2 	bl	8000b34 <__addsf3>
 8001b70:	4603      	mov	r3, r0
 8001b72:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001b74:	e008      	b.n	8001b88 <MahonyAHRSupdateIMU+0x37c>
 8001b76:	bf00      	nop
 8001b78:	20000278 	.word	0x20000278
 8001b7c:	2000027c 	.word	0x2000027c
 8001b80:	20000280 	.word	0x20000280
 8001b84:	20000000 	.word	0x20000000
	  }

	  // Integrate rate of change of quaternion
	  upQua.gxrs *= (0.5f * (1.0f / sampleFreq));   // pre-multiply common factors
 8001b88:	6c7c      	ldr	r4, [r7, #68]	; 0x44
 8001b8a:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8001b8c:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8001b90:	f7ff f98c 	bl	8000eac <__aeabi_fdiv>
 8001b94:	4603      	mov	r3, r0
 8001b96:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	f7ff f8d2 	bl	8000d44 <__aeabi_fmul>
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	4619      	mov	r1, r3
 8001ba4:	4620      	mov	r0, r4
 8001ba6:	f7ff f8cd 	bl	8000d44 <__aeabi_fmul>
 8001baa:	4603      	mov	r3, r0
 8001bac:	647b      	str	r3, [r7, #68]	; 0x44
	  upQua.gyrs *= (0.5f * (1.0f / sampleFreq));
 8001bae:	6cbc      	ldr	r4, [r7, #72]	; 0x48
 8001bb0:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8001bb2:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8001bb6:	f7ff f979 	bl	8000eac <__aeabi_fdiv>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	f7ff f8bf 	bl	8000d44 <__aeabi_fmul>
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	4619      	mov	r1, r3
 8001bca:	4620      	mov	r0, r4
 8001bcc:	f7ff f8ba 	bl	8000d44 <__aeabi_fmul>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	64bb      	str	r3, [r7, #72]	; 0x48
	  upQua.gzrs *= (0.5f * (1.0f / sampleFreq));
 8001bd4:	6cfc      	ldr	r4, [r7, #76]	; 0x4c
 8001bd6:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8001bd8:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8001bdc:	f7ff f966 	bl	8000eac <__aeabi_fdiv>
 8001be0:	4603      	mov	r3, r0
 8001be2:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8001be6:	4618      	mov	r0, r3
 8001be8:	f7ff f8ac 	bl	8000d44 <__aeabi_fmul>
 8001bec:	4603      	mov	r3, r0
 8001bee:	4619      	mov	r1, r3
 8001bf0:	4620      	mov	r0, r4
 8001bf2:	f7ff f8a7 	bl	8000d44 <__aeabi_fmul>
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	64fb      	str	r3, [r7, #76]	; 0x4c
	  qa = qVol->q0;
 8001bfa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	60bb      	str	r3, [r7, #8]
	  qb = qVol->q1;
 8001c00:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001c02:	685b      	ldr	r3, [r3, #4]
 8001c04:	607b      	str	r3, [r7, #4]
	  qc = qVol->q2;
 8001c06:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001c08:	689b      	ldr	r3, [r3, #8]
 8001c0a:	603b      	str	r3, [r7, #0]
	  qVol->q0 += (-qb * upQua.gxrs - qc * upQua.gyrs - qVol->q3 * upQua.gzrs);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001c12:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001c14:	4611      	mov	r1, r2
 8001c16:	4618      	mov	r0, r3
 8001c18:	f7ff f894 	bl	8000d44 <__aeabi_fmul>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	461c      	mov	r4, r3
 8001c20:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001c22:	6839      	ldr	r1, [r7, #0]
 8001c24:	4618      	mov	r0, r3
 8001c26:	f7ff f88d 	bl	8000d44 <__aeabi_fmul>
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	4619      	mov	r1, r3
 8001c2e:	4620      	mov	r0, r4
 8001c30:	f7fe ff7e 	bl	8000b30 <__aeabi_fsub>
 8001c34:	4603      	mov	r3, r0
 8001c36:	461c      	mov	r4, r3
 8001c38:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001c3a:	68db      	ldr	r3, [r3, #12]
 8001c3c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001c3e:	4611      	mov	r1, r2
 8001c40:	4618      	mov	r0, r3
 8001c42:	f7ff f87f 	bl	8000d44 <__aeabi_fmul>
 8001c46:	4603      	mov	r3, r0
 8001c48:	4619      	mov	r1, r3
 8001c4a:	4620      	mov	r0, r4
 8001c4c:	f7fe ff70 	bl	8000b30 <__aeabi_fsub>
 8001c50:	4603      	mov	r3, r0
 8001c52:	461a      	mov	r2, r3
 8001c54:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	4619      	mov	r1, r3
 8001c5a:	4610      	mov	r0, r2
 8001c5c:	f7fe ff6a 	bl	8000b34 <__addsf3>
 8001c60:	4603      	mov	r3, r0
 8001c62:	461a      	mov	r2, r3
 8001c64:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001c66:	601a      	str	r2, [r3, #0]
	  qVol->q1 += (qa * upQua.gxrs + qc * upQua.gzrs - qVol->q3 * upQua.gyrs);
 8001c68:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001c6a:	68b9      	ldr	r1, [r7, #8]
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	f7ff f869 	bl	8000d44 <__aeabi_fmul>
 8001c72:	4603      	mov	r3, r0
 8001c74:	461c      	mov	r4, r3
 8001c76:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001c78:	6839      	ldr	r1, [r7, #0]
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	f7ff f862 	bl	8000d44 <__aeabi_fmul>
 8001c80:	4603      	mov	r3, r0
 8001c82:	4619      	mov	r1, r3
 8001c84:	4620      	mov	r0, r4
 8001c86:	f7fe ff55 	bl	8000b34 <__addsf3>
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	461c      	mov	r4, r3
 8001c8e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001c90:	68db      	ldr	r3, [r3, #12]
 8001c92:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001c94:	4611      	mov	r1, r2
 8001c96:	4618      	mov	r0, r3
 8001c98:	f7ff f854 	bl	8000d44 <__aeabi_fmul>
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	4619      	mov	r1, r3
 8001ca0:	4620      	mov	r0, r4
 8001ca2:	f7fe ff45 	bl	8000b30 <__aeabi_fsub>
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	461a      	mov	r2, r3
 8001caa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001cac:	685b      	ldr	r3, [r3, #4]
 8001cae:	4619      	mov	r1, r3
 8001cb0:	4610      	mov	r0, r2
 8001cb2:	f7fe ff3f 	bl	8000b34 <__addsf3>
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	461a      	mov	r2, r3
 8001cba:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001cbc:	605a      	str	r2, [r3, #4]
	  qVol->q2 += (qa * upQua.gyrs - qb * upQua.gzrs + qVol->q3 * upQua.gxrs);
 8001cbe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001cc0:	68b9      	ldr	r1, [r7, #8]
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	f7ff f83e 	bl	8000d44 <__aeabi_fmul>
 8001cc8:	4603      	mov	r3, r0
 8001cca:	461c      	mov	r4, r3
 8001ccc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001cce:	6879      	ldr	r1, [r7, #4]
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	f7ff f837 	bl	8000d44 <__aeabi_fmul>
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	4619      	mov	r1, r3
 8001cda:	4620      	mov	r0, r4
 8001cdc:	f7fe ff28 	bl	8000b30 <__aeabi_fsub>
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	461c      	mov	r4, r3
 8001ce4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001ce6:	68db      	ldr	r3, [r3, #12]
 8001ce8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001cea:	4611      	mov	r1, r2
 8001cec:	4618      	mov	r0, r3
 8001cee:	f7ff f829 	bl	8000d44 <__aeabi_fmul>
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	4619      	mov	r1, r3
 8001cf6:	4620      	mov	r0, r4
 8001cf8:	f7fe ff1c 	bl	8000b34 <__addsf3>
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	461a      	mov	r2, r3
 8001d00:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001d02:	689b      	ldr	r3, [r3, #8]
 8001d04:	4619      	mov	r1, r3
 8001d06:	4610      	mov	r0, r2
 8001d08:	f7fe ff14 	bl	8000b34 <__addsf3>
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	461a      	mov	r2, r3
 8001d10:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001d12:	609a      	str	r2, [r3, #8]
	  qVol->q3 += (qa * upQua.gzrs + qb * upQua.gyrs - qc * upQua.gxrs);
 8001d14:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001d16:	68dc      	ldr	r4, [r3, #12]
 8001d18:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001d1a:	68b9      	ldr	r1, [r7, #8]
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	f7ff f811 	bl	8000d44 <__aeabi_fmul>
 8001d22:	4603      	mov	r3, r0
 8001d24:	461d      	mov	r5, r3
 8001d26:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001d28:	6879      	ldr	r1, [r7, #4]
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	f7ff f80a 	bl	8000d44 <__aeabi_fmul>
 8001d30:	4603      	mov	r3, r0
 8001d32:	4619      	mov	r1, r3
 8001d34:	4628      	mov	r0, r5
 8001d36:	f7fe fefd 	bl	8000b34 <__addsf3>
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	461d      	mov	r5, r3
 8001d3e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001d40:	6839      	ldr	r1, [r7, #0]
 8001d42:	4618      	mov	r0, r3
 8001d44:	f7fe fffe 	bl	8000d44 <__aeabi_fmul>
 8001d48:	4603      	mov	r3, r0
 8001d4a:	4619      	mov	r1, r3
 8001d4c:	4628      	mov	r0, r5
 8001d4e:	f7fe feef 	bl	8000b30 <__aeabi_fsub>
 8001d52:	4603      	mov	r3, r0
 8001d54:	4619      	mov	r1, r3
 8001d56:	4620      	mov	r0, r4
 8001d58:	f7fe feec 	bl	8000b34 <__addsf3>
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	461a      	mov	r2, r3
 8001d60:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001d62:	60da      	str	r2, [r3, #12]

	  // Normalise quaternion
	  norm = sqrt(qVol->q0 * qVol->q0 + qVol->q1 * qVol->q1 + qVol->q2 * qVol->q2 + qVol->q3 * qVol->q3);
 8001d64:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001d66:	681a      	ldr	r2, [r3, #0]
 8001d68:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	4619      	mov	r1, r3
 8001d6e:	4610      	mov	r0, r2
 8001d70:	f7fe ffe8 	bl	8000d44 <__aeabi_fmul>
 8001d74:	4603      	mov	r3, r0
 8001d76:	461c      	mov	r4, r3
 8001d78:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001d7a:	685a      	ldr	r2, [r3, #4]
 8001d7c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001d7e:	685b      	ldr	r3, [r3, #4]
 8001d80:	4619      	mov	r1, r3
 8001d82:	4610      	mov	r0, r2
 8001d84:	f7fe ffde 	bl	8000d44 <__aeabi_fmul>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	4619      	mov	r1, r3
 8001d8c:	4620      	mov	r0, r4
 8001d8e:	f7fe fed1 	bl	8000b34 <__addsf3>
 8001d92:	4603      	mov	r3, r0
 8001d94:	461c      	mov	r4, r3
 8001d96:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001d98:	689a      	ldr	r2, [r3, #8]
 8001d9a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001d9c:	689b      	ldr	r3, [r3, #8]
 8001d9e:	4619      	mov	r1, r3
 8001da0:	4610      	mov	r0, r2
 8001da2:	f7fe ffcf 	bl	8000d44 <__aeabi_fmul>
 8001da6:	4603      	mov	r3, r0
 8001da8:	4619      	mov	r1, r3
 8001daa:	4620      	mov	r0, r4
 8001dac:	f7fe fec2 	bl	8000b34 <__addsf3>
 8001db0:	4603      	mov	r3, r0
 8001db2:	461c      	mov	r4, r3
 8001db4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001db6:	68da      	ldr	r2, [r3, #12]
 8001db8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001dba:	68db      	ldr	r3, [r3, #12]
 8001dbc:	4619      	mov	r1, r3
 8001dbe:	4610      	mov	r0, r2
 8001dc0:	f7fe ffc0 	bl	8000d44 <__aeabi_fmul>
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	4619      	mov	r1, r3
 8001dc8:	4620      	mov	r0, r4
 8001dca:	f7fe feb3 	bl	8000b34 <__addsf3>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	f7fe fb29 	bl	8000428 <__aeabi_f2d>
 8001dd6:	4602      	mov	r2, r0
 8001dd8:	460b      	mov	r3, r1
 8001dda:	4610      	mov	r0, r2
 8001ddc:	4619      	mov	r1, r3
 8001dde:	f00a fc99 	bl	800c714 <sqrt>
 8001de2:	4602      	mov	r2, r0
 8001de4:	460b      	mov	r3, r1
 8001de6:	4610      	mov	r0, r2
 8001de8:	4619      	mov	r1, r3
 8001dea:	f7fe fe4d 	bl	8000a88 <__aeabi_d2f>
 8001dee:	4603      	mov	r3, r0
 8001df0:	627b      	str	r3, [r7, #36]	; 0x24
	  qVol->q0 /= norm;
 8001df2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001df8:	4618      	mov	r0, r3
 8001dfa:	f7ff f857 	bl	8000eac <__aeabi_fdiv>
 8001dfe:	4603      	mov	r3, r0
 8001e00:	461a      	mov	r2, r3
 8001e02:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001e04:	601a      	str	r2, [r3, #0]
	  qVol->q1 /= norm;
 8001e06:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001e08:	685b      	ldr	r3, [r3, #4]
 8001e0a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	f7ff f84d 	bl	8000eac <__aeabi_fdiv>
 8001e12:	4603      	mov	r3, r0
 8001e14:	461a      	mov	r2, r3
 8001e16:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001e18:	605a      	str	r2, [r3, #4]
	  qVol->q2 /= norm;
 8001e1a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001e1c:	689b      	ldr	r3, [r3, #8]
 8001e1e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001e20:	4618      	mov	r0, r3
 8001e22:	f7ff f843 	bl	8000eac <__aeabi_fdiv>
 8001e26:	4603      	mov	r3, r0
 8001e28:	461a      	mov	r2, r3
 8001e2a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001e2c:	609a      	str	r2, [r3, #8]
	  qVol->q3 /= norm;
 8001e2e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001e30:	68db      	ldr	r3, [r3, #12]
 8001e32:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001e34:	4618      	mov	r0, r3
 8001e36:	f7ff f839 	bl	8000eac <__aeabi_fdiv>
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	461a      	mov	r2, r3
 8001e3e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001e40:	60da      	str	r2, [r3, #12]
}
 8001e42:	bf00      	nop
 8001e44:	3728      	adds	r7, #40	; 0x28
 8001e46:	46bd      	mov	sp, r7
 8001e48:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8001e4c:	b004      	add	sp, #16
 8001e4e:	4770      	bx	lr

08001e50 <mpu6050_getRollPitchYaw>:
/// c.
void mpu6050_getRollPitchYaw(q_volatile qVol, rawpitchyaw *rpy){	//57.29577951 = 180/pi
 8001e50:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001e54:	b085      	sub	sp, #20
 8001e56:	af00      	add	r7, sp, #0
 8001e58:	463e      	mov	r6, r7
 8001e5a:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
	  rpy->yaw   = -atan2(2.0f * (qVol.q1 * qVol.q2 + qVol.q0 * qVol.q3), qVol.q0 * qVol.q0 + qVol.q1 * qVol.q1 - qVol.q2 * qVol.q2 - qVol.q3 * qVol.q3) * 57.29577951;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	68ba      	ldr	r2, [r7, #8]
 8001e62:	4611      	mov	r1, r2
 8001e64:	4618      	mov	r0, r3
 8001e66:	f7fe ff6d 	bl	8000d44 <__aeabi_fmul>
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	461e      	mov	r6, r3
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	68fa      	ldr	r2, [r7, #12]
 8001e72:	4611      	mov	r1, r2
 8001e74:	4618      	mov	r0, r3
 8001e76:	f7fe ff65 	bl	8000d44 <__aeabi_fmul>
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	4619      	mov	r1, r3
 8001e7e:	4630      	mov	r0, r6
 8001e80:	f7fe fe58 	bl	8000b34 <__addsf3>
 8001e84:	4603      	mov	r3, r0
 8001e86:	4619      	mov	r1, r3
 8001e88:	4618      	mov	r0, r3
 8001e8a:	f7fe fe53 	bl	8000b34 <__addsf3>
 8001e8e:	4603      	mov	r3, r0
 8001e90:	4618      	mov	r0, r3
 8001e92:	f7fe fac9 	bl	8000428 <__aeabi_f2d>
 8001e96:	4680      	mov	r8, r0
 8001e98:	4689      	mov	r9, r1
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	683a      	ldr	r2, [r7, #0]
 8001e9e:	4611      	mov	r1, r2
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	f7fe ff4f 	bl	8000d44 <__aeabi_fmul>
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	461e      	mov	r6, r3
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	687a      	ldr	r2, [r7, #4]
 8001eae:	4611      	mov	r1, r2
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	f7fe ff47 	bl	8000d44 <__aeabi_fmul>
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	4619      	mov	r1, r3
 8001eba:	4630      	mov	r0, r6
 8001ebc:	f7fe fe3a 	bl	8000b34 <__addsf3>
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	461e      	mov	r6, r3
 8001ec4:	68bb      	ldr	r3, [r7, #8]
 8001ec6:	68ba      	ldr	r2, [r7, #8]
 8001ec8:	4611      	mov	r1, r2
 8001eca:	4618      	mov	r0, r3
 8001ecc:	f7fe ff3a 	bl	8000d44 <__aeabi_fmul>
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	4619      	mov	r1, r3
 8001ed4:	4630      	mov	r0, r6
 8001ed6:	f7fe fe2b 	bl	8000b30 <__aeabi_fsub>
 8001eda:	4603      	mov	r3, r0
 8001edc:	461e      	mov	r6, r3
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	68fa      	ldr	r2, [r7, #12]
 8001ee2:	4611      	mov	r1, r2
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	f7fe ff2d 	bl	8000d44 <__aeabi_fmul>
 8001eea:	4603      	mov	r3, r0
 8001eec:	4619      	mov	r1, r3
 8001eee:	4630      	mov	r0, r6
 8001ef0:	f7fe fe1e 	bl	8000b30 <__aeabi_fsub>
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	f7fe fa96 	bl	8000428 <__aeabi_f2d>
 8001efc:	4602      	mov	r2, r0
 8001efe:	460b      	mov	r3, r1
 8001f00:	4640      	mov	r0, r8
 8001f02:	4649      	mov	r1, r9
 8001f04:	f00a fc04 	bl	800c710 <atan2>
 8001f08:	4602      	mov	r2, r0
 8001f0a:	460b      	mov	r3, r1
 8001f0c:	4614      	mov	r4, r2
 8001f0e:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8001f12:	a355      	add	r3, pc, #340	; (adr r3, 8002068 <mpu6050_getRollPitchYaw+0x218>)
 8001f14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f18:	4620      	mov	r0, r4
 8001f1a:	4629      	mov	r1, r5
 8001f1c:	f7fe fadc 	bl	80004d8 <__aeabi_dmul>
 8001f20:	4602      	mov	r2, r0
 8001f22:	460b      	mov	r3, r1
 8001f24:	4610      	mov	r0, r2
 8001f26:	4619      	mov	r1, r3
 8001f28:	f7fe fdae 	bl	8000a88 <__aeabi_d2f>
 8001f2c:	4602      	mov	r2, r0
 8001f2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f30:	609a      	str	r2, [r3, #8]
	  rpy->pitch = asin(2.0f * (qVol.q1 * qVol.q3 - qVol.q0 * qVol.q2)) * 57.29577951;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	68fa      	ldr	r2, [r7, #12]
 8001f36:	4611      	mov	r1, r2
 8001f38:	4618      	mov	r0, r3
 8001f3a:	f7fe ff03 	bl	8000d44 <__aeabi_fmul>
 8001f3e:	4603      	mov	r3, r0
 8001f40:	461c      	mov	r4, r3
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	68ba      	ldr	r2, [r7, #8]
 8001f46:	4611      	mov	r1, r2
 8001f48:	4618      	mov	r0, r3
 8001f4a:	f7fe fefb 	bl	8000d44 <__aeabi_fmul>
 8001f4e:	4603      	mov	r3, r0
 8001f50:	4619      	mov	r1, r3
 8001f52:	4620      	mov	r0, r4
 8001f54:	f7fe fdec 	bl	8000b30 <__aeabi_fsub>
 8001f58:	4603      	mov	r3, r0
 8001f5a:	4619      	mov	r1, r3
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	f7fe fde9 	bl	8000b34 <__addsf3>
 8001f62:	4603      	mov	r3, r0
 8001f64:	4618      	mov	r0, r3
 8001f66:	f7fe fa5f 	bl	8000428 <__aeabi_f2d>
 8001f6a:	4602      	mov	r2, r0
 8001f6c:	460b      	mov	r3, r1
 8001f6e:	4610      	mov	r0, r2
 8001f70:	4619      	mov	r1, r3
 8001f72:	f00a fba5 	bl	800c6c0 <asin>
 8001f76:	a33c      	add	r3, pc, #240	; (adr r3, 8002068 <mpu6050_getRollPitchYaw+0x218>)
 8001f78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f7c:	f7fe faac 	bl	80004d8 <__aeabi_dmul>
 8001f80:	4602      	mov	r2, r0
 8001f82:	460b      	mov	r3, r1
 8001f84:	4610      	mov	r0, r2
 8001f86:	4619      	mov	r1, r3
 8001f88:	f7fe fd7e 	bl	8000a88 <__aeabi_d2f>
 8001f8c:	4602      	mov	r2, r0
 8001f8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f90:	605a      	str	r2, [r3, #4]
	  rpy->roll  = atan2(2.0f * (qVol.q0 * qVol.q1 + qVol.q2 * qVol.q3), qVol.q0 * qVol.q0 - qVol.q1 * qVol.q1 - qVol.q2 * qVol.q2 + qVol.q3 * qVol.q3) * 57.29577951;
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	687a      	ldr	r2, [r7, #4]
 8001f96:	4611      	mov	r1, r2
 8001f98:	4618      	mov	r0, r3
 8001f9a:	f7fe fed3 	bl	8000d44 <__aeabi_fmul>
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	461c      	mov	r4, r3
 8001fa2:	68bb      	ldr	r3, [r7, #8]
 8001fa4:	68fa      	ldr	r2, [r7, #12]
 8001fa6:	4611      	mov	r1, r2
 8001fa8:	4618      	mov	r0, r3
 8001faa:	f7fe fecb 	bl	8000d44 <__aeabi_fmul>
 8001fae:	4603      	mov	r3, r0
 8001fb0:	4619      	mov	r1, r3
 8001fb2:	4620      	mov	r0, r4
 8001fb4:	f7fe fdbe 	bl	8000b34 <__addsf3>
 8001fb8:	4603      	mov	r3, r0
 8001fba:	4619      	mov	r1, r3
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	f7fe fdb9 	bl	8000b34 <__addsf3>
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	f7fe fa2f 	bl	8000428 <__aeabi_f2d>
 8001fca:	4604      	mov	r4, r0
 8001fcc:	460d      	mov	r5, r1
 8001fce:	683b      	ldr	r3, [r7, #0]
 8001fd0:	683a      	ldr	r2, [r7, #0]
 8001fd2:	4611      	mov	r1, r2
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	f7fe feb5 	bl	8000d44 <__aeabi_fmul>
 8001fda:	4603      	mov	r3, r0
 8001fdc:	461e      	mov	r6, r3
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	687a      	ldr	r2, [r7, #4]
 8001fe2:	4611      	mov	r1, r2
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	f7fe fead 	bl	8000d44 <__aeabi_fmul>
 8001fea:	4603      	mov	r3, r0
 8001fec:	4619      	mov	r1, r3
 8001fee:	4630      	mov	r0, r6
 8001ff0:	f7fe fd9e 	bl	8000b30 <__aeabi_fsub>
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	461e      	mov	r6, r3
 8001ff8:	68bb      	ldr	r3, [r7, #8]
 8001ffa:	68ba      	ldr	r2, [r7, #8]
 8001ffc:	4611      	mov	r1, r2
 8001ffe:	4618      	mov	r0, r3
 8002000:	f7fe fea0 	bl	8000d44 <__aeabi_fmul>
 8002004:	4603      	mov	r3, r0
 8002006:	4619      	mov	r1, r3
 8002008:	4630      	mov	r0, r6
 800200a:	f7fe fd91 	bl	8000b30 <__aeabi_fsub>
 800200e:	4603      	mov	r3, r0
 8002010:	461e      	mov	r6, r3
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	68fa      	ldr	r2, [r7, #12]
 8002016:	4611      	mov	r1, r2
 8002018:	4618      	mov	r0, r3
 800201a:	f7fe fe93 	bl	8000d44 <__aeabi_fmul>
 800201e:	4603      	mov	r3, r0
 8002020:	4619      	mov	r1, r3
 8002022:	4630      	mov	r0, r6
 8002024:	f7fe fd86 	bl	8000b34 <__addsf3>
 8002028:	4603      	mov	r3, r0
 800202a:	4618      	mov	r0, r3
 800202c:	f7fe f9fc 	bl	8000428 <__aeabi_f2d>
 8002030:	4602      	mov	r2, r0
 8002032:	460b      	mov	r3, r1
 8002034:	4620      	mov	r0, r4
 8002036:	4629      	mov	r1, r5
 8002038:	f00a fb6a 	bl	800c710 <atan2>
 800203c:	a30a      	add	r3, pc, #40	; (adr r3, 8002068 <mpu6050_getRollPitchYaw+0x218>)
 800203e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002042:	f7fe fa49 	bl	80004d8 <__aeabi_dmul>
 8002046:	4602      	mov	r2, r0
 8002048:	460b      	mov	r3, r1
 800204a:	4610      	mov	r0, r2
 800204c:	4619      	mov	r1, r3
 800204e:	f7fe fd1b 	bl	8000a88 <__aeabi_d2f>
 8002052:	4602      	mov	r2, r0
 8002054:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002056:	601a      	str	r2, [r3, #0]
}
 8002058:	bf00      	nop
 800205a:	3714      	adds	r7, #20
 800205c:	46bd      	mov	sp, r7
 800205e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002062:	bf00      	nop
 8002064:	f3af 8000 	nop.w
 8002068:	1a5d2372 	.word	0x1a5d2372
 800206c:	404ca5dc 	.word	0x404ca5dc

08002070 <MPU6050_Get_Accel_RawData_to_CaliBration>:

///////
void MPU6050_Get_Accel_RawData_to_CaliBration(RawData_Def *rawDef)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b088      	sub	sp, #32
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
	uint8_t i2cBuf[2];
	uint8_t AcceArr[6], GyroArr[6];

	I2C_Read(INT_STATUS_REG, &i2cBuf[1],1);
 8002078:	f107 031c 	add.w	r3, r7, #28
 800207c:	3301      	adds	r3, #1
 800207e:	2201      	movs	r2, #1
 8002080:	4619      	mov	r1, r3
 8002082:	203a      	movs	r0, #58	; 0x3a
 8002084:	f7ff f91c 	bl	80012c0 <I2C_Read>
	if((i2cBuf[1]&&0x01))
 8002088:	7f7b      	ldrb	r3, [r7, #29]
 800208a:	2b00      	cmp	r3, #0
 800208c:	d052      	beq.n	8002134 <MPU6050_Get_Accel_RawData_to_CaliBration+0xc4>
	{
		I2C_Read(ACCEL_XOUT_H_REG, AcceArr,6);
 800208e:	f107 0314 	add.w	r3, r7, #20
 8002092:	2206      	movs	r2, #6
 8002094:	4619      	mov	r1, r3
 8002096:	203b      	movs	r0, #59	; 0x3b
 8002098:	f7ff f912 	bl	80012c0 <I2C_Read>

		//Accel Raw Data
		rawDef->x = ((AcceArr[0]<<8) + AcceArr[1]); // x-Axis
 800209c:	7d3b      	ldrb	r3, [r7, #20]
 800209e:	b29b      	uxth	r3, r3
 80020a0:	021b      	lsls	r3, r3, #8
 80020a2:	b29a      	uxth	r2, r3
 80020a4:	7d7b      	ldrb	r3, [r7, #21]
 80020a6:	b29b      	uxth	r3, r3
 80020a8:	4413      	add	r3, r2
 80020aa:	b29b      	uxth	r3, r3
 80020ac:	b21a      	sxth	r2, r3
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	801a      	strh	r2, [r3, #0]
		rawDef->y = ((AcceArr[2]<<8) + AcceArr[3]); // y-Axis
 80020b2:	7dbb      	ldrb	r3, [r7, #22]
 80020b4:	b29b      	uxth	r3, r3
 80020b6:	021b      	lsls	r3, r3, #8
 80020b8:	b29a      	uxth	r2, r3
 80020ba:	7dfb      	ldrb	r3, [r7, #23]
 80020bc:	b29b      	uxth	r3, r3
 80020be:	4413      	add	r3, r2
 80020c0:	b29b      	uxth	r3, r3
 80020c2:	b21a      	sxth	r2, r3
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	805a      	strh	r2, [r3, #2]
		rawDef->z = ((AcceArr[4]<<8) + AcceArr[5]) - 4096; // z-Axis
 80020c8:	7e3b      	ldrb	r3, [r7, #24]
 80020ca:	b29b      	uxth	r3, r3
 80020cc:	021b      	lsls	r3, r3, #8
 80020ce:	b29a      	uxth	r2, r3
 80020d0:	7e7b      	ldrb	r3, [r7, #25]
 80020d2:	b29b      	uxth	r3, r3
 80020d4:	4413      	add	r3, r2
 80020d6:	b29b      	uxth	r3, r3
 80020d8:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
 80020dc:	b29b      	uxth	r3, r3
 80020de:	b21a      	sxth	r2, r3
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	809a      	strh	r2, [r3, #4]
		//Gyro Raw Data
		I2C_Read(GYRO_XOUT_H_REG, GyroArr,6);
 80020e4:	f107 030c 	add.w	r3, r7, #12
 80020e8:	2206      	movs	r2, #6
 80020ea:	4619      	mov	r1, r3
 80020ec:	2043      	movs	r0, #67	; 0x43
 80020ee:	f7ff f8e7 	bl	80012c0 <I2C_Read>
		GyroRW[0] = ((GyroArr[0]<<8) + GyroArr[1]);
 80020f2:	7b3b      	ldrb	r3, [r7, #12]
 80020f4:	b29b      	uxth	r3, r3
 80020f6:	021b      	lsls	r3, r3, #8
 80020f8:	b29a      	uxth	r2, r3
 80020fa:	7b7b      	ldrb	r3, [r7, #13]
 80020fc:	b29b      	uxth	r3, r3
 80020fe:	4413      	add	r3, r2
 8002100:	b29b      	uxth	r3, r3
 8002102:	b21a      	sxth	r2, r3
 8002104:	4b0d      	ldr	r3, [pc, #52]	; (800213c <MPU6050_Get_Accel_RawData_to_CaliBration+0xcc>)
 8002106:	801a      	strh	r2, [r3, #0]
		GyroRW[1] = (GyroArr[2]<<8) + GyroArr[3];
 8002108:	7bbb      	ldrb	r3, [r7, #14]
 800210a:	b29b      	uxth	r3, r3
 800210c:	021b      	lsls	r3, r3, #8
 800210e:	b29a      	uxth	r2, r3
 8002110:	7bfb      	ldrb	r3, [r7, #15]
 8002112:	b29b      	uxth	r3, r3
 8002114:	4413      	add	r3, r2
 8002116:	b29b      	uxth	r3, r3
 8002118:	b21a      	sxth	r2, r3
 800211a:	4b08      	ldr	r3, [pc, #32]	; (800213c <MPU6050_Get_Accel_RawData_to_CaliBration+0xcc>)
 800211c:	805a      	strh	r2, [r3, #2]
		GyroRW[2] = ((GyroArr[4]<<8) + GyroArr[5]);
 800211e:	7c3b      	ldrb	r3, [r7, #16]
 8002120:	b29b      	uxth	r3, r3
 8002122:	021b      	lsls	r3, r3, #8
 8002124:	b29a      	uxth	r2, r3
 8002126:	7c7b      	ldrb	r3, [r7, #17]
 8002128:	b29b      	uxth	r3, r3
 800212a:	4413      	add	r3, r2
 800212c:	b29b      	uxth	r3, r3
 800212e:	b21a      	sxth	r2, r3
 8002130:	4b02      	ldr	r3, [pc, #8]	; (800213c <MPU6050_Get_Accel_RawData_to_CaliBration+0xcc>)
 8002132:	809a      	strh	r2, [r3, #4]
	}
}
 8002134:	bf00      	nop
 8002136:	3720      	adds	r7, #32
 8002138:	46bd      	mov	sp, r7
 800213a:	bd80      	pop	{r7, pc}
 800213c:	20000268 	.word	0x20000268

08002140 <MPU6050_Get_Gyro_RawData_to_CaliBration>:
void MPU6050_Get_Gyro_RawData_to_CaliBration(RawData_Def *rawDef)
{
 8002140:	b480      	push	{r7}
 8002142:	b083      	sub	sp, #12
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
	//Accel Raw Data
	rawDef->x = GyroRW[0];
 8002148:	4b09      	ldr	r3, [pc, #36]	; (8002170 <MPU6050_Get_Gyro_RawData_to_CaliBration+0x30>)
 800214a:	f9b3 2000 	ldrsh.w	r2, [r3]
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	801a      	strh	r2, [r3, #0]
	rawDef->y = GyroRW[1];
 8002152:	4b07      	ldr	r3, [pc, #28]	; (8002170 <MPU6050_Get_Gyro_RawData_to_CaliBration+0x30>)
 8002154:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	805a      	strh	r2, [r3, #2]
	rawDef->z = GyroRW[2];
 800215c:	4b04      	ldr	r3, [pc, #16]	; (8002170 <MPU6050_Get_Gyro_RawData_to_CaliBration+0x30>)
 800215e:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	809a      	strh	r2, [r3, #4]

}
 8002166:	bf00      	nop
 8002168:	370c      	adds	r7, #12
 800216a:	46bd      	mov	sp, r7
 800216c:	bc80      	pop	{r7}
 800216e:	4770      	bx	lr
 8002170:	20000268 	.word	0x20000268
 8002174:	00000000 	.word	0x00000000

08002178 <PID>:

// pid
void PID(rawpitchyaw *angle, PID_param *pid, int rop, int Init_CCR, float desired_roll_angle, float desired_pitch_angle, float desired_yaw_angle)
{
 8002178:	b5b0      	push	{r4, r5, r7, lr}
 800217a:	b084      	sub	sp, #16
 800217c:	af00      	add	r7, sp, #0
 800217e:	60f8      	str	r0, [r7, #12]
 8002180:	60b9      	str	r1, [r7, #8]
 8002182:	607a      	str	r2, [r7, #4]
 8002184:	603b      	str	r3, [r7, #0]
////	}
//    pid->elapsedTime = (pid->time - pid->timePrev) / 1000.0;
//    pid->timePrev = pid->time;

    //pid->elapsedTime = 0.001;
	pid->elapsedTime = 0.0005;
 8002186:	68b9      	ldr	r1, [r7, #8]
 8002188:	a35b      	add	r3, pc, #364	; (adr r3, 80022f8 <PID+0x180>)
 800218a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800218e:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58

    // into PID
	pid->roll_error = angle->roll - desired_roll_angle;//0.0f; // desired_angle = 0
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	6a39      	ldr	r1, [r7, #32]
 8002198:	4618      	mov	r0, r3
 800219a:	f7fe fcc9 	bl	8000b30 <__aeabi_fsub>
 800219e:	4603      	mov	r3, r0
 80021a0:	461a      	mov	r2, r3
 80021a2:	68bb      	ldr	r3, [r7, #8]
 80021a4:	635a      	str	r2, [r3, #52]	; 0x34
	pid->pitch_error = angle->pitch - desired_pitch_angle;//0.0f; // desired_angle = 0
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	685b      	ldr	r3, [r3, #4]
 80021aa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80021ac:	4618      	mov	r0, r3
 80021ae:	f7fe fcbf 	bl	8000b30 <__aeabi_fsub>
 80021b2:	4603      	mov	r3, r0
 80021b4:	461a      	mov	r2, r3
 80021b6:	68bb      	ldr	r3, [r7, #8]
 80021b8:	639a      	str	r2, [r3, #56]	; 0x38
	pid->yaw_error = angle->yaw - desired_yaw_angle;//0.0f; // desired_angle = 0
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	689b      	ldr	r3, [r3, #8]
 80021be:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80021c0:	4618      	mov	r0, r3
 80021c2:	f7fe fcb5 	bl	8000b30 <__aeabi_fsub>
 80021c6:	4603      	mov	r3, r0
 80021c8:	461a      	mov	r2, r3
 80021ca:	68bb      	ldr	r3, [r7, #8]
 80021cc:	63da      	str	r2, [r3, #60]	; 0x3c

    pid->pid_p_roll = pid->Kp_roll*pid->roll_error;
 80021ce:	68bb      	ldr	r3, [r7, #8]
 80021d0:	68da      	ldr	r2, [r3, #12]
 80021d2:	68bb      	ldr	r3, [r7, #8]
 80021d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021d6:	4619      	mov	r1, r3
 80021d8:	4610      	mov	r0, r2
 80021da:	f7fe fdb3 	bl	8000d44 <__aeabi_fmul>
 80021de:	4603      	mov	r3, r0
 80021e0:	461a      	mov	r2, r3
 80021e2:	68bb      	ldr	r3, [r7, #8]
 80021e4:	661a      	str	r2, [r3, #96]	; 0x60
    pid->pid_p_pitch = pid->Kp_pitch*pid->pitch_error; // tach Kp roll & pitch
 80021e6:	68bb      	ldr	r3, [r7, #8]
 80021e8:	699a      	ldr	r2, [r3, #24]
 80021ea:	68bb      	ldr	r3, [r7, #8]
 80021ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021ee:	4619      	mov	r1, r3
 80021f0:	4610      	mov	r0, r2
 80021f2:	f7fe fda7 	bl	8000d44 <__aeabi_fmul>
 80021f6:	4603      	mov	r3, r0
 80021f8:	461a      	mov	r2, r3
 80021fa:	68bb      	ldr	r3, [r7, #8]
 80021fc:	66da      	str	r2, [r3, #108]	; 0x6c
    pid->pid_p_yaw = pid->Kp_yaw*pid->yaw_error; // tach Kp roll & pitch
 80021fe:	68bb      	ldr	r3, [r7, #8]
 8002200:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002202:	68bb      	ldr	r3, [r7, #8]
 8002204:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002206:	4619      	mov	r1, r3
 8002208:	4610      	mov	r0, r2
 800220a:	f7fe fd9b 	bl	8000d44 <__aeabi_fmul>
 800220e:	4603      	mov	r3, r0
 8002210:	461a      	mov	r2, r3
 8002212:	68bb      	ldr	r3, [r7, #8]
 8002214:	679a      	str	r2, [r3, #120]	; 0x78

    if (-3 < pid->roll_error && pid->roll_error < 3)
 8002216:	68bb      	ldr	r3, [r7, #8]
 8002218:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800221a:	4939      	ldr	r1, [pc, #228]	; (8002300 <PID+0x188>)
 800221c:	4618      	mov	r0, r3
 800221e:	f7fe ff4d 	bl	80010bc <__aeabi_fcmpgt>
 8002222:	4603      	mov	r3, r0
 8002224:	2b00      	cmp	r3, #0
 8002226:	d01b      	beq.n	8002260 <PID+0xe8>
 8002228:	68bb      	ldr	r3, [r7, #8]
 800222a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800222c:	4935      	ldr	r1, [pc, #212]	; (8002304 <PID+0x18c>)
 800222e:	4618      	mov	r0, r3
 8002230:	f7fe ff26 	bl	8001080 <__aeabi_fcmplt>
 8002234:	4603      	mov	r3, r0
 8002236:	2b00      	cmp	r3, #0
 8002238:	d012      	beq.n	8002260 <PID+0xe8>
    {
      pid->pid_i_roll = pid->pid_i_roll+(pid->Ki_roll*pid->roll_error);
 800223a:	68bb      	ldr	r3, [r7, #8]
 800223c:	6e5c      	ldr	r4, [r3, #100]	; 0x64
 800223e:	68bb      	ldr	r3, [r7, #8]
 8002240:	691a      	ldr	r2, [r3, #16]
 8002242:	68bb      	ldr	r3, [r7, #8]
 8002244:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002246:	4619      	mov	r1, r3
 8002248:	4610      	mov	r0, r2
 800224a:	f7fe fd7b 	bl	8000d44 <__aeabi_fmul>
 800224e:	4603      	mov	r3, r0
 8002250:	4619      	mov	r1, r3
 8002252:	4620      	mov	r0, r4
 8002254:	f7fe fc6e 	bl	8000b34 <__addsf3>
 8002258:	4603      	mov	r3, r0
 800225a:	461a      	mov	r2, r3
 800225c:	68bb      	ldr	r3, [r7, #8]
 800225e:	665a      	str	r2, [r3, #100]	; 0x64
    }
    if (-3 < pid->pitch_error && pid->pitch_error < 3)
 8002260:	68bb      	ldr	r3, [r7, #8]
 8002262:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002264:	4926      	ldr	r1, [pc, #152]	; (8002300 <PID+0x188>)
 8002266:	4618      	mov	r0, r3
 8002268:	f7fe ff28 	bl	80010bc <__aeabi_fcmpgt>
 800226c:	4603      	mov	r3, r0
 800226e:	2b00      	cmp	r3, #0
 8002270:	d01b      	beq.n	80022aa <PID+0x132>
 8002272:	68bb      	ldr	r3, [r7, #8]
 8002274:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002276:	4923      	ldr	r1, [pc, #140]	; (8002304 <PID+0x18c>)
 8002278:	4618      	mov	r0, r3
 800227a:	f7fe ff01 	bl	8001080 <__aeabi_fcmplt>
 800227e:	4603      	mov	r3, r0
 8002280:	2b00      	cmp	r3, #0
 8002282:	d012      	beq.n	80022aa <PID+0x132>
    {
      pid->pid_i_pitch = pid->pid_i_pitch+(pid->Ki_pitch*pid->pitch_error);
 8002284:	68bb      	ldr	r3, [r7, #8]
 8002286:	6f1c      	ldr	r4, [r3, #112]	; 0x70
 8002288:	68bb      	ldr	r3, [r7, #8]
 800228a:	69da      	ldr	r2, [r3, #28]
 800228c:	68bb      	ldr	r3, [r7, #8]
 800228e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002290:	4619      	mov	r1, r3
 8002292:	4610      	mov	r0, r2
 8002294:	f7fe fd56 	bl	8000d44 <__aeabi_fmul>
 8002298:	4603      	mov	r3, r0
 800229a:	4619      	mov	r1, r3
 800229c:	4620      	mov	r0, r4
 800229e:	f7fe fc49 	bl	8000b34 <__addsf3>
 80022a2:	4603      	mov	r3, r0
 80022a4:	461a      	mov	r2, r3
 80022a6:	68bb      	ldr	r3, [r7, #8]
 80022a8:	671a      	str	r2, [r3, #112]	; 0x70
    }
    if (-3 < pid->yaw_error && pid->yaw_error < 3)
 80022aa:	68bb      	ldr	r3, [r7, #8]
 80022ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022ae:	4914      	ldr	r1, [pc, #80]	; (8002300 <PID+0x188>)
 80022b0:	4618      	mov	r0, r3
 80022b2:	f7fe ff03 	bl	80010bc <__aeabi_fcmpgt>
 80022b6:	4603      	mov	r3, r0
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d025      	beq.n	8002308 <PID+0x190>
 80022bc:	68bb      	ldr	r3, [r7, #8]
 80022be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022c0:	4910      	ldr	r1, [pc, #64]	; (8002304 <PID+0x18c>)
 80022c2:	4618      	mov	r0, r3
 80022c4:	f7fe fedc 	bl	8001080 <__aeabi_fcmplt>
 80022c8:	4603      	mov	r3, r0
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d01c      	beq.n	8002308 <PID+0x190>
    {
      pid->pid_i_yaw = pid->pid_i_yaw+(pid->Ki_yaw*pid->yaw_error);
 80022ce:	68bb      	ldr	r3, [r7, #8]
 80022d0:	6fdc      	ldr	r4, [r3, #124]	; 0x7c
 80022d2:	68bb      	ldr	r3, [r7, #8]
 80022d4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80022d6:	68bb      	ldr	r3, [r7, #8]
 80022d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022da:	4619      	mov	r1, r3
 80022dc:	4610      	mov	r0, r2
 80022de:	f7fe fd31 	bl	8000d44 <__aeabi_fmul>
 80022e2:	4603      	mov	r3, r0
 80022e4:	4619      	mov	r1, r3
 80022e6:	4620      	mov	r0, r4
 80022e8:	f7fe fc24 	bl	8000b34 <__addsf3>
 80022ec:	4603      	mov	r3, r0
 80022ee:	461a      	mov	r2, r3
 80022f0:	68bb      	ldr	r3, [r7, #8]
 80022f2:	67da      	str	r2, [r3, #124]	; 0x7c
 80022f4:	e008      	b.n	8002308 <PID+0x190>
 80022f6:	bf00      	nop
 80022f8:	d2f1a9fc 	.word	0xd2f1a9fc
 80022fc:	3f40624d 	.word	0x3f40624d
 8002300:	c0400000 	.word	0xc0400000
 8002304:	40400000 	.word	0x40400000
    }



    pid->pid_d_roll = pid->Kd_roll*((pid->roll_error - pid->previous_error_roll)/pid->elapsedTime);
 8002308:	68bb      	ldr	r3, [r7, #8]
 800230a:	695b      	ldr	r3, [r3, #20]
 800230c:	4618      	mov	r0, r3
 800230e:	f7fe f88b 	bl	8000428 <__aeabi_f2d>
 8002312:	4604      	mov	r4, r0
 8002314:	460d      	mov	r5, r1
 8002316:	68bb      	ldr	r3, [r7, #8]
 8002318:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800231a:	68bb      	ldr	r3, [r7, #8]
 800231c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800231e:	4619      	mov	r1, r3
 8002320:	4610      	mov	r0, r2
 8002322:	f7fe fc05 	bl	8000b30 <__aeabi_fsub>
 8002326:	4603      	mov	r3, r0
 8002328:	4618      	mov	r0, r3
 800232a:	f7fe f87d 	bl	8000428 <__aeabi_f2d>
 800232e:	68bb      	ldr	r3, [r7, #8]
 8002330:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 8002334:	f7fe f9fa 	bl	800072c <__aeabi_ddiv>
 8002338:	4602      	mov	r2, r0
 800233a:	460b      	mov	r3, r1
 800233c:	4620      	mov	r0, r4
 800233e:	4629      	mov	r1, r5
 8002340:	f7fe f8ca 	bl	80004d8 <__aeabi_dmul>
 8002344:	4602      	mov	r2, r0
 8002346:	460b      	mov	r3, r1
 8002348:	4610      	mov	r0, r2
 800234a:	4619      	mov	r1, r3
 800234c:	f7fe fb9c 	bl	8000a88 <__aeabi_d2f>
 8002350:	4602      	mov	r2, r0
 8002352:	68bb      	ldr	r3, [r7, #8]
 8002354:	669a      	str	r2, [r3, #104]	; 0x68
    pid->pid_d_pitch = pid->Kd_pitch*((pid->pitch_error - pid->previous_error_pitch)/pid->elapsedTime);
 8002356:	68bb      	ldr	r3, [r7, #8]
 8002358:	6a1b      	ldr	r3, [r3, #32]
 800235a:	4618      	mov	r0, r3
 800235c:	f7fe f864 	bl	8000428 <__aeabi_f2d>
 8002360:	4604      	mov	r4, r0
 8002362:	460d      	mov	r5, r1
 8002364:	68bb      	ldr	r3, [r7, #8]
 8002366:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002368:	68bb      	ldr	r3, [r7, #8]
 800236a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800236c:	4619      	mov	r1, r3
 800236e:	4610      	mov	r0, r2
 8002370:	f7fe fbde 	bl	8000b30 <__aeabi_fsub>
 8002374:	4603      	mov	r3, r0
 8002376:	4618      	mov	r0, r3
 8002378:	f7fe f856 	bl	8000428 <__aeabi_f2d>
 800237c:	68bb      	ldr	r3, [r7, #8]
 800237e:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 8002382:	f7fe f9d3 	bl	800072c <__aeabi_ddiv>
 8002386:	4602      	mov	r2, r0
 8002388:	460b      	mov	r3, r1
 800238a:	4620      	mov	r0, r4
 800238c:	4629      	mov	r1, r5
 800238e:	f7fe f8a3 	bl	80004d8 <__aeabi_dmul>
 8002392:	4602      	mov	r2, r0
 8002394:	460b      	mov	r3, r1
 8002396:	4610      	mov	r0, r2
 8002398:	4619      	mov	r1, r3
 800239a:	f7fe fb75 	bl	8000a88 <__aeabi_d2f>
 800239e:	4602      	mov	r2, r0
 80023a0:	68bb      	ldr	r3, [r7, #8]
 80023a2:	675a      	str	r2, [r3, #116]	; 0x74
    pid->pid_d_yaw = pid->Kd_yaw*((pid->yaw_error - pid->previous_error_yaw)/pid->elapsedTime);
 80023a4:	68bb      	ldr	r3, [r7, #8]
 80023a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023a8:	4618      	mov	r0, r3
 80023aa:	f7fe f83d 	bl	8000428 <__aeabi_f2d>
 80023ae:	4604      	mov	r4, r0
 80023b0:	460d      	mov	r5, r1
 80023b2:	68bb      	ldr	r3, [r7, #8]
 80023b4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80023b6:	68bb      	ldr	r3, [r7, #8]
 80023b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023ba:	4619      	mov	r1, r3
 80023bc:	4610      	mov	r0, r2
 80023be:	f7fe fbb7 	bl	8000b30 <__aeabi_fsub>
 80023c2:	4603      	mov	r3, r0
 80023c4:	4618      	mov	r0, r3
 80023c6:	f7fe f82f 	bl	8000428 <__aeabi_f2d>
 80023ca:	68bb      	ldr	r3, [r7, #8]
 80023cc:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 80023d0:	f7fe f9ac 	bl	800072c <__aeabi_ddiv>
 80023d4:	4602      	mov	r2, r0
 80023d6:	460b      	mov	r3, r1
 80023d8:	4620      	mov	r0, r4
 80023da:	4629      	mov	r1, r5
 80023dc:	f7fe f87c 	bl	80004d8 <__aeabi_dmul>
 80023e0:	4602      	mov	r2, r0
 80023e2:	460b      	mov	r3, r1
 80023e4:	4610      	mov	r0, r2
 80023e6:	4619      	mov	r1, r3
 80023e8:	f7fe fb4e 	bl	8000a88 <__aeabi_d2f>
 80023ec:	4602      	mov	r2, r0
 80023ee:	68bb      	ldr	r3, [r7, #8]
 80023f0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80


    /*The final PID values is the sum of each of this 3 parts*/
    pid->PID_total_roll = pid->pid_p_roll + pid->pid_i_roll + pid->pid_d_roll;
 80023f4:	68bb      	ldr	r3, [r7, #8]
 80023f6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80023f8:	68bb      	ldr	r3, [r7, #8]
 80023fa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80023fc:	4619      	mov	r1, r3
 80023fe:	4610      	mov	r0, r2
 8002400:	f7fe fb98 	bl	8000b34 <__addsf3>
 8002404:	4603      	mov	r3, r0
 8002406:	461a      	mov	r2, r3
 8002408:	68bb      	ldr	r3, [r7, #8]
 800240a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800240c:	4619      	mov	r1, r3
 800240e:	4610      	mov	r0, r2
 8002410:	f7fe fb90 	bl	8000b34 <__addsf3>
 8002414:	4603      	mov	r3, r0
 8002416:	461a      	mov	r2, r3
 8002418:	68bb      	ldr	r3, [r7, #8]
 800241a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    pid->PID_total_pitch = pid->pid_p_pitch + pid->pid_i_pitch + pid->pid_d_pitch;
 800241e:	68bb      	ldr	r3, [r7, #8]
 8002420:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002422:	68bb      	ldr	r3, [r7, #8]
 8002424:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002426:	4619      	mov	r1, r3
 8002428:	4610      	mov	r0, r2
 800242a:	f7fe fb83 	bl	8000b34 <__addsf3>
 800242e:	4603      	mov	r3, r0
 8002430:	461a      	mov	r2, r3
 8002432:	68bb      	ldr	r3, [r7, #8]
 8002434:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002436:	4619      	mov	r1, r3
 8002438:	4610      	mov	r0, r2
 800243a:	f7fe fb7b 	bl	8000b34 <__addsf3>
 800243e:	4603      	mov	r3, r0
 8002440:	461a      	mov	r2, r3
 8002442:	68bb      	ldr	r3, [r7, #8]
 8002444:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
    pid->PID_total_yaw = pid->pid_p_yaw + pid->pid_i_yaw + pid->pid_d_yaw;
 8002448:	68bb      	ldr	r3, [r7, #8]
 800244a:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 800244c:	68bb      	ldr	r3, [r7, #8]
 800244e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002450:	4619      	mov	r1, r3
 8002452:	4610      	mov	r0, r2
 8002454:	f7fe fb6e 	bl	8000b34 <__addsf3>
 8002458:	4603      	mov	r3, r0
 800245a:	461a      	mov	r2, r3
 800245c:	68bb      	ldr	r3, [r7, #8]
 800245e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002462:	4619      	mov	r1, r3
 8002464:	4610      	mov	r0, r2
 8002466:	f7fe fb65 	bl	8000b34 <__addsf3>
 800246a:	4603      	mov	r3, r0
 800246c:	461a      	mov	r2, r3
 800246e:	68bb      	ldr	r3, [r7, #8]
 8002470:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    if(pid->PID_total_roll < -1000)    {pid->PID_total_roll = 0;}
 8002474:	68bb      	ldr	r3, [r7, #8]
 8002476:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800247a:	49a8      	ldr	r1, [pc, #672]	; (800271c <PID+0x5a4>)
 800247c:	4618      	mov	r0, r3
 800247e:	f7fe fdff 	bl	8001080 <__aeabi_fcmplt>
 8002482:	4603      	mov	r3, r0
 8002484:	2b00      	cmp	r3, #0
 8002486:	d004      	beq.n	8002492 <PID+0x31a>
 8002488:	68bb      	ldr	r3, [r7, #8]
 800248a:	f04f 0200 	mov.w	r2, #0
 800248e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    if(pid->PID_total_roll > 1000)    {pid->PID_total_roll = 0;}
 8002492:	68bb      	ldr	r3, [r7, #8]
 8002494:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002498:	49a1      	ldr	r1, [pc, #644]	; (8002720 <PID+0x5a8>)
 800249a:	4618      	mov	r0, r3
 800249c:	f7fe fe0e 	bl	80010bc <__aeabi_fcmpgt>
 80024a0:	4603      	mov	r3, r0
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d004      	beq.n	80024b0 <PID+0x338>
 80024a6:	68bb      	ldr	r3, [r7, #8]
 80024a8:	f04f 0200 	mov.w	r2, #0
 80024ac:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    if(pid->PID_total_pitch < -1000)    {pid->PID_total_pitch = 0;}
 80024b0:	68bb      	ldr	r3, [r7, #8]
 80024b2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80024b6:	4999      	ldr	r1, [pc, #612]	; (800271c <PID+0x5a4>)
 80024b8:	4618      	mov	r0, r3
 80024ba:	f7fe fde1 	bl	8001080 <__aeabi_fcmplt>
 80024be:	4603      	mov	r3, r0
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d004      	beq.n	80024ce <PID+0x356>
 80024c4:	68bb      	ldr	r3, [r7, #8]
 80024c6:	f04f 0200 	mov.w	r2, #0
 80024ca:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
    if(pid->PID_total_pitch > 1000)    {pid->PID_total_pitch = 0;}
 80024ce:	68bb      	ldr	r3, [r7, #8]
 80024d0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80024d4:	4992      	ldr	r1, [pc, #584]	; (8002720 <PID+0x5a8>)
 80024d6:	4618      	mov	r0, r3
 80024d8:	f7fe fdf0 	bl	80010bc <__aeabi_fcmpgt>
 80024dc:	4603      	mov	r3, r0
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d004      	beq.n	80024ec <PID+0x374>
 80024e2:	68bb      	ldr	r3, [r7, #8]
 80024e4:	f04f 0200 	mov.w	r2, #0
 80024e8:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
    if(pid->PID_total_yaw < -1000)    {pid->PID_total_yaw = 0;}
 80024ec:	68bb      	ldr	r3, [r7, #8]
 80024ee:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80024f2:	498a      	ldr	r1, [pc, #552]	; (800271c <PID+0x5a4>)
 80024f4:	4618      	mov	r0, r3
 80024f6:	f7fe fdc3 	bl	8001080 <__aeabi_fcmplt>
 80024fa:	4603      	mov	r3, r0
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d004      	beq.n	800250a <PID+0x392>
 8002500:	68bb      	ldr	r3, [r7, #8]
 8002502:	f04f 0200 	mov.w	r2, #0
 8002506:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
    if(pid->PID_total_yaw > 1000)    {pid->PID_total_yaw = 0;}
 800250a:	68bb      	ldr	r3, [r7, #8]
 800250c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002510:	4983      	ldr	r1, [pc, #524]	; (8002720 <PID+0x5a8>)
 8002512:	4618      	mov	r0, r3
 8002514:	f7fe fdd2 	bl	80010bc <__aeabi_fcmpgt>
 8002518:	4603      	mov	r3, r0
 800251a:	2b00      	cmp	r3, #0
 800251c:	d004      	beq.n	8002528 <PID+0x3b0>
 800251e:	68bb      	ldr	r3, [r7, #8]
 8002520:	f04f 0200 	mov.w	r2, #0
 8002524:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4


//  1 | 2
//  --o--
//	4 | 3
    pid->pwm_LF_1 = Init_CCR - pid->PID_total_roll - pid->PID_total_pitch + pid->PID_total_yaw; // throttle = 1300
 8002528:	6838      	ldr	r0, [r7, #0]
 800252a:	f7fe fbb7 	bl	8000c9c <__aeabi_i2f>
 800252e:	4602      	mov	r2, r0
 8002530:	68bb      	ldr	r3, [r7, #8]
 8002532:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002536:	4619      	mov	r1, r3
 8002538:	4610      	mov	r0, r2
 800253a:	f7fe faf9 	bl	8000b30 <__aeabi_fsub>
 800253e:	4603      	mov	r3, r0
 8002540:	461a      	mov	r2, r3
 8002542:	68bb      	ldr	r3, [r7, #8]
 8002544:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8002548:	4619      	mov	r1, r3
 800254a:	4610      	mov	r0, r2
 800254c:	f7fe faf0 	bl	8000b30 <__aeabi_fsub>
 8002550:	4603      	mov	r3, r0
 8002552:	461a      	mov	r2, r3
 8002554:	68bb      	ldr	r3, [r7, #8]
 8002556:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800255a:	4619      	mov	r1, r3
 800255c:	4610      	mov	r0, r2
 800255e:	f7fe fae9 	bl	8000b34 <__addsf3>
 8002562:	4603      	mov	r3, r0
 8002564:	461a      	mov	r2, r3
 8002566:	68bb      	ldr	r3, [r7, #8]
 8002568:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
    pid->pwm_RF_2 = Init_CCR + pid->PID_total_roll - pid->PID_total_pitch - pid->PID_total_yaw;
 800256c:	6838      	ldr	r0, [r7, #0]
 800256e:	f7fe fb95 	bl	8000c9c <__aeabi_i2f>
 8002572:	4602      	mov	r2, r0
 8002574:	68bb      	ldr	r3, [r7, #8]
 8002576:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800257a:	4619      	mov	r1, r3
 800257c:	4610      	mov	r0, r2
 800257e:	f7fe fad9 	bl	8000b34 <__addsf3>
 8002582:	4603      	mov	r3, r0
 8002584:	461a      	mov	r2, r3
 8002586:	68bb      	ldr	r3, [r7, #8]
 8002588:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800258c:	4619      	mov	r1, r3
 800258e:	4610      	mov	r0, r2
 8002590:	f7fe face 	bl	8000b30 <__aeabi_fsub>
 8002594:	4603      	mov	r3, r0
 8002596:	461a      	mov	r2, r3
 8002598:	68bb      	ldr	r3, [r7, #8]
 800259a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800259e:	4619      	mov	r1, r3
 80025a0:	4610      	mov	r0, r2
 80025a2:	f7fe fac5 	bl	8000b30 <__aeabi_fsub>
 80025a6:	4603      	mov	r3, r0
 80025a8:	461a      	mov	r2, r3
 80025aa:	68bb      	ldr	r3, [r7, #8]
 80025ac:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
    pid->pwm_RB_3 = Init_CCR + pid->PID_total_roll + pid->PID_total_pitch + pid->PID_total_yaw; // throttle = 1300
 80025b0:	6838      	ldr	r0, [r7, #0]
 80025b2:	f7fe fb73 	bl	8000c9c <__aeabi_i2f>
 80025b6:	4602      	mov	r2, r0
 80025b8:	68bb      	ldr	r3, [r7, #8]
 80025ba:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80025be:	4619      	mov	r1, r3
 80025c0:	4610      	mov	r0, r2
 80025c2:	f7fe fab7 	bl	8000b34 <__addsf3>
 80025c6:	4603      	mov	r3, r0
 80025c8:	461a      	mov	r2, r3
 80025ca:	68bb      	ldr	r3, [r7, #8]
 80025cc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80025d0:	4619      	mov	r1, r3
 80025d2:	4610      	mov	r0, r2
 80025d4:	f7fe faae 	bl	8000b34 <__addsf3>
 80025d8:	4603      	mov	r3, r0
 80025da:	461a      	mov	r2, r3
 80025dc:	68bb      	ldr	r3, [r7, #8]
 80025de:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80025e2:	4619      	mov	r1, r3
 80025e4:	4610      	mov	r0, r2
 80025e6:	f7fe faa5 	bl	8000b34 <__addsf3>
 80025ea:	4603      	mov	r3, r0
 80025ec:	461a      	mov	r2, r3
 80025ee:	68bb      	ldr	r3, [r7, #8]
 80025f0:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
    pid->pwm_LB_4 = Init_CCR - pid->PID_total_roll + pid->PID_total_pitch - pid->PID_total_yaw;
 80025f4:	6838      	ldr	r0, [r7, #0]
 80025f6:	f7fe fb51 	bl	8000c9c <__aeabi_i2f>
 80025fa:	4602      	mov	r2, r0
 80025fc:	68bb      	ldr	r3, [r7, #8]
 80025fe:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002602:	4619      	mov	r1, r3
 8002604:	4610      	mov	r0, r2
 8002606:	f7fe fa93 	bl	8000b30 <__aeabi_fsub>
 800260a:	4603      	mov	r3, r0
 800260c:	461a      	mov	r2, r3
 800260e:	68bb      	ldr	r3, [r7, #8]
 8002610:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8002614:	4619      	mov	r1, r3
 8002616:	4610      	mov	r0, r2
 8002618:	f7fe fa8c 	bl	8000b34 <__addsf3>
 800261c:	4603      	mov	r3, r0
 800261e:	461a      	mov	r2, r3
 8002620:	68bb      	ldr	r3, [r7, #8]
 8002622:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002626:	4619      	mov	r1, r3
 8002628:	4610      	mov	r0, r2
 800262a:	f7fe fa81 	bl	8000b30 <__aeabi_fsub>
 800262e:	4603      	mov	r3, r0
 8002630:	461a      	mov	r2, r3
 8002632:	68bb      	ldr	r3, [r7, #8]
 8002634:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
    /*Once again we map the PWM values to be sure that we won't pass the min
    and max values. Yes, we've already maped the PID values. But for example, for
    throttle value of 1300, if we sum the max PID value we would have 2300us and
    that will mess up the ESC.*/
    //Right
    if(pid->pwm_RF_2 < 1000)    {        pid->pwm_RF_2 = 1000;    }
 8002638:	68bb      	ldr	r3, [r7, #8]
 800263a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800263e:	4938      	ldr	r1, [pc, #224]	; (8002720 <PID+0x5a8>)
 8002640:	4618      	mov	r0, r3
 8002642:	f7fe fd1d 	bl	8001080 <__aeabi_fcmplt>
 8002646:	4603      	mov	r3, r0
 8002648:	2b00      	cmp	r3, #0
 800264a:	d003      	beq.n	8002654 <PID+0x4dc>
 800264c:	68bb      	ldr	r3, [r7, #8]
 800264e:	4a34      	ldr	r2, [pc, #208]	; (8002720 <PID+0x5a8>)
 8002650:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
    if(pid->pwm_RF_2 > 2000)    {        pid->pwm_RF_2 = 2000;    }
 8002654:	68bb      	ldr	r3, [r7, #8]
 8002656:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800265a:	4932      	ldr	r1, [pc, #200]	; (8002724 <PID+0x5ac>)
 800265c:	4618      	mov	r0, r3
 800265e:	f7fe fd2d 	bl	80010bc <__aeabi_fcmpgt>
 8002662:	4603      	mov	r3, r0
 8002664:	2b00      	cmp	r3, #0
 8002666:	d003      	beq.n	8002670 <PID+0x4f8>
 8002668:	68bb      	ldr	r3, [r7, #8]
 800266a:	4a2e      	ldr	r2, [pc, #184]	; (8002724 <PID+0x5ac>)
 800266c:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
    //Left
    if(pid->pwm_LB_4 < 1000)    {    	pid->pwm_LB_4 = 1000;    }
 8002670:	68bb      	ldr	r3, [r7, #8]
 8002672:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8002676:	492a      	ldr	r1, [pc, #168]	; (8002720 <PID+0x5a8>)
 8002678:	4618      	mov	r0, r3
 800267a:	f7fe fd01 	bl	8001080 <__aeabi_fcmplt>
 800267e:	4603      	mov	r3, r0
 8002680:	2b00      	cmp	r3, #0
 8002682:	d003      	beq.n	800268c <PID+0x514>
 8002684:	68bb      	ldr	r3, [r7, #8]
 8002686:	4a26      	ldr	r2, [pc, #152]	; (8002720 <PID+0x5a8>)
 8002688:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
    if(pid->pwm_LB_4 > 2000)    {    	pid->pwm_LB_4 = 2000;    }
 800268c:	68bb      	ldr	r3, [r7, #8]
 800268e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8002692:	4924      	ldr	r1, [pc, #144]	; (8002724 <PID+0x5ac>)
 8002694:	4618      	mov	r0, r3
 8002696:	f7fe fd11 	bl	80010bc <__aeabi_fcmpgt>
 800269a:	4603      	mov	r3, r0
 800269c:	2b00      	cmp	r3, #0
 800269e:	d003      	beq.n	80026a8 <PID+0x530>
 80026a0:	68bb      	ldr	r3, [r7, #8]
 80026a2:	4a20      	ldr	r2, [pc, #128]	; (8002724 <PID+0x5ac>)
 80026a4:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
    //Right
    if(pid->pwm_RB_3 < 1000)    {        pid->pwm_RB_3 = 1000;    }
 80026a8:	68bb      	ldr	r3, [r7, #8]
 80026aa:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80026ae:	491c      	ldr	r1, [pc, #112]	; (8002720 <PID+0x5a8>)
 80026b0:	4618      	mov	r0, r3
 80026b2:	f7fe fce5 	bl	8001080 <__aeabi_fcmplt>
 80026b6:	4603      	mov	r3, r0
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d003      	beq.n	80026c4 <PID+0x54c>
 80026bc:	68bb      	ldr	r3, [r7, #8]
 80026be:	4a18      	ldr	r2, [pc, #96]	; (8002720 <PID+0x5a8>)
 80026c0:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
    if(pid->pwm_RB_3 > 2000)    {        pid->pwm_RB_3 = 2000;    }
 80026c4:	68bb      	ldr	r3, [r7, #8]
 80026c6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80026ca:	4916      	ldr	r1, [pc, #88]	; (8002724 <PID+0x5ac>)
 80026cc:	4618      	mov	r0, r3
 80026ce:	f7fe fcf5 	bl	80010bc <__aeabi_fcmpgt>
 80026d2:	4603      	mov	r3, r0
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d003      	beq.n	80026e0 <PID+0x568>
 80026d8:	68bb      	ldr	r3, [r7, #8]
 80026da:	4a12      	ldr	r2, [pc, #72]	; (8002724 <PID+0x5ac>)
 80026dc:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
    //Left
    if(pid->pwm_LF_1 < 1000)    {    	pid->pwm_LF_1 = 1000;    }
 80026e0:	68bb      	ldr	r3, [r7, #8]
 80026e2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80026e6:	490e      	ldr	r1, [pc, #56]	; (8002720 <PID+0x5a8>)
 80026e8:	4618      	mov	r0, r3
 80026ea:	f7fe fcc9 	bl	8001080 <__aeabi_fcmplt>
 80026ee:	4603      	mov	r3, r0
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d003      	beq.n	80026fc <PID+0x584>
 80026f4:	68bb      	ldr	r3, [r7, #8]
 80026f6:	4a0a      	ldr	r2, [pc, #40]	; (8002720 <PID+0x5a8>)
 80026f8:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
    if(pid->pwm_LF_1 > 2000)    {    	pid->pwm_LF_1 = 2000;    }
 80026fc:	68bb      	ldr	r3, [r7, #8]
 80026fe:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8002702:	4908      	ldr	r1, [pc, #32]	; (8002724 <PID+0x5ac>)
 8002704:	4618      	mov	r0, r3
 8002706:	f7fe fcd9 	bl	80010bc <__aeabi_fcmpgt>
 800270a:	4603      	mov	r3, r0
 800270c:	2b00      	cmp	r3, #0
 800270e:	d00b      	beq.n	8002728 <PID+0x5b0>
 8002710:	68bb      	ldr	r3, [r7, #8]
 8002712:	4a04      	ldr	r2, [pc, #16]	; (8002724 <PID+0x5ac>)
 8002714:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
 8002718:	e006      	b.n	8002728 <PID+0x5b0>
 800271a:	bf00      	nop
 800271c:	c47a0000 	.word	0xc47a0000
 8002720:	447a0000 	.word	0x447a0000
 8002724:	44fa0000 	.word	0x44fa0000

    /*Finnaly using the servo function we create the PWM pulses with the calculated
    width for each pulse*/
//    htim2.Instance->CCR1 = pid->pwmLeft;
//    htim2.Instance->CCR2 = pid->pwmRight;
    pid->previous_error_roll = pid->roll_error; //Remember to store the previous error.
 8002728:	68bb      	ldr	r3, [r7, #8]
 800272a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800272c:	68bb      	ldr	r3, [r7, #8]
 800272e:	645a      	str	r2, [r3, #68]	; 0x44
    pid->previous_error_pitch = pid->pitch_error; //Remember to store the previous error.
 8002730:	68bb      	ldr	r3, [r7, #8]
 8002732:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002734:	68bb      	ldr	r3, [r7, #8]
 8002736:	649a      	str	r2, [r3, #72]	; 0x48
    pid->previous_error_yaw = pid->yaw_error; //Remember to store the previous error.
 8002738:	68bb      	ldr	r3, [r7, #8]
 800273a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800273c:	68bb      	ldr	r3, [r7, #8]
 800273e:	64da      	str	r2, [r3, #76]	; 0x4c
}
 8002740:	bf00      	nop
 8002742:	3710      	adds	r7, #16
 8002744:	46bd      	mov	sp, r7
 8002746:	bdb0      	pop	{r4, r5, r7, pc}

08002748 <MahonyAHRSupdate>:



/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void MahonyAHRSupdate(updateQuater upQua, float sampleFreq, q_volatile *qVol) {
 8002748:	b084      	sub	sp, #16
 800274a:	b5b0      	push	{r4, r5, r7, lr}
 800274c:	b0a4      	sub	sp, #144	; 0x90
 800274e:	af08      	add	r7, sp, #32
 8002750:	f107 0480 	add.w	r4, r7, #128	; 0x80
 8002754:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	float halfvx, halfvy, halfvz, halfwx, halfwy, halfwz;
	float halfex, halfey, halfez;
	float qa, qb, qc;

	// Use IMU algorithm if magnetometer measurement invalid (avoids NaN in magnetometer normalisation)
	if((upQua.mx == 0.0f) && (upQua.my == 0.0f) && (upQua.mz == 0.0f)) {
 8002758:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800275c:	f04f 0100 	mov.w	r1, #0
 8002760:	4618      	mov	r0, r3
 8002762:	f7fe fc83 	bl	800106c <__aeabi_fcmpeq>
 8002766:	4603      	mov	r3, r0
 8002768:	2b00      	cmp	r3, #0
 800276a:	d027      	beq.n	80027bc <MahonyAHRSupdate+0x74>
 800276c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002770:	f04f 0100 	mov.w	r1, #0
 8002774:	4618      	mov	r0, r3
 8002776:	f7fe fc79 	bl	800106c <__aeabi_fcmpeq>
 800277a:	4603      	mov	r3, r0
 800277c:	2b00      	cmp	r3, #0
 800277e:	d01d      	beq.n	80027bc <MahonyAHRSupdate+0x74>
 8002780:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002784:	f04f 0100 	mov.w	r1, #0
 8002788:	4618      	mov	r0, r3
 800278a:	f7fe fc6f 	bl	800106c <__aeabi_fcmpeq>
 800278e:	4603      	mov	r3, r0
 8002790:	2b00      	cmp	r3, #0
 8002792:	d013      	beq.n	80027bc <MahonyAHRSupdate+0x74>
		MahonyAHRSupdateIMU(upQua, sampleFreq, qVol);
 8002794:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002798:	9306      	str	r3, [sp, #24]
 800279a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800279e:	9305      	str	r3, [sp, #20]
 80027a0:	466d      	mov	r5, sp
 80027a2:	f107 0490 	add.w	r4, r7, #144	; 0x90
 80027a6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80027a8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80027aa:	6823      	ldr	r3, [r4, #0]
 80027ac:	602b      	str	r3, [r5, #0]
 80027ae:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80027b2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80027b4:	f7ff f82a 	bl	800180c <MahonyAHRSupdateIMU>
		return;
 80027b8:	f000 bd7c 	b.w	80032b4 <MahonyAHRSupdate+0xb6c>
	}

	// Compute feedback only if accelerometer measurement valid (avoids NaN in accelerometer normalisation)
	if(!((upQua.axg == 0.0f) && (upQua.ayg == 0.0f) && (upQua.azg == 0.0f))) {
 80027bc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80027c0:	f04f 0100 	mov.w	r1, #0
 80027c4:	4618      	mov	r0, r3
 80027c6:	f7fe fc51 	bl	800106c <__aeabi_fcmpeq>
 80027ca:	4603      	mov	r3, r0
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d014      	beq.n	80027fa <MahonyAHRSupdate+0xb2>
 80027d0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80027d4:	f04f 0100 	mov.w	r1, #0
 80027d8:	4618      	mov	r0, r3
 80027da:	f7fe fc47 	bl	800106c <__aeabi_fcmpeq>
 80027de:	4603      	mov	r3, r0
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d00a      	beq.n	80027fa <MahonyAHRSupdate+0xb2>
 80027e4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80027e8:	f04f 0100 	mov.w	r1, #0
 80027ec:	4618      	mov	r0, r3
 80027ee:	f7fe fc3d 	bl	800106c <__aeabi_fcmpeq>
 80027f2:	4603      	mov	r3, r0
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	f040 83cd 	bne.w	8002f94 <MahonyAHRSupdate+0x84c>

		// Normalise accelerometer measurement
		Norm = sqrt(upQua.axg * upQua.axg + upQua.ayg * upQua.ayg + upQua.azg * upQua.azg);
 80027fa:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80027fe:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002802:	4611      	mov	r1, r2
 8002804:	4618      	mov	r0, r3
 8002806:	f7fe fa9d 	bl	8000d44 <__aeabi_fmul>
 800280a:	4603      	mov	r3, r0
 800280c:	461c      	mov	r4, r3
 800280e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002812:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8002816:	4611      	mov	r1, r2
 8002818:	4618      	mov	r0, r3
 800281a:	f7fe fa93 	bl	8000d44 <__aeabi_fmul>
 800281e:	4603      	mov	r3, r0
 8002820:	4619      	mov	r1, r3
 8002822:	4620      	mov	r0, r4
 8002824:	f7fe f986 	bl	8000b34 <__addsf3>
 8002828:	4603      	mov	r3, r0
 800282a:	461c      	mov	r4, r3
 800282c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002830:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8002834:	4611      	mov	r1, r2
 8002836:	4618      	mov	r0, r3
 8002838:	f7fe fa84 	bl	8000d44 <__aeabi_fmul>
 800283c:	4603      	mov	r3, r0
 800283e:	4619      	mov	r1, r3
 8002840:	4620      	mov	r0, r4
 8002842:	f7fe f977 	bl	8000b34 <__addsf3>
 8002846:	4603      	mov	r3, r0
 8002848:	4618      	mov	r0, r3
 800284a:	f7fd fded 	bl	8000428 <__aeabi_f2d>
 800284e:	4602      	mov	r2, r0
 8002850:	460b      	mov	r3, r1
 8002852:	4610      	mov	r0, r2
 8002854:	4619      	mov	r1, r3
 8002856:	f009 ff5d 	bl	800c714 <sqrt>
 800285a:	4602      	mov	r2, r0
 800285c:	460b      	mov	r3, r1
 800285e:	4610      	mov	r0, r2
 8002860:	4619      	mov	r1, r3
 8002862:	f7fe f911 	bl	8000a88 <__aeabi_d2f>
 8002866:	4603      	mov	r3, r0
 8002868:	66fb      	str	r3, [r7, #108]	; 0x6c
	    upQua.axg /= Norm;
 800286a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800286e:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8002870:	4618      	mov	r0, r3
 8002872:	f7fe fb1b 	bl	8000eac <__aeabi_fdiv>
 8002876:	4603      	mov	r3, r0
 8002878:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	    upQua.ayg /= Norm;
 800287c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002880:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8002882:	4618      	mov	r0, r3
 8002884:	f7fe fb12 	bl	8000eac <__aeabi_fdiv>
 8002888:	4603      	mov	r3, r0
 800288a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	    upQua.azg /= Norm;
 800288e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002892:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8002894:	4618      	mov	r0, r3
 8002896:	f7fe fb09 	bl	8000eac <__aeabi_fdiv>
 800289a:	4603      	mov	r3, r0
 800289c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

		// Normalise magnetometer measurement
		Norm = sqrt(upQua.mx * upQua.mx + upQua.my * upQua.my + upQua.mz * upQua.mz);
 80028a0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80028a4:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80028a8:	4611      	mov	r1, r2
 80028aa:	4618      	mov	r0, r3
 80028ac:	f7fe fa4a 	bl	8000d44 <__aeabi_fmul>
 80028b0:	4603      	mov	r3, r0
 80028b2:	461c      	mov	r4, r3
 80028b4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80028b8:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 80028bc:	4611      	mov	r1, r2
 80028be:	4618      	mov	r0, r3
 80028c0:	f7fe fa40 	bl	8000d44 <__aeabi_fmul>
 80028c4:	4603      	mov	r3, r0
 80028c6:	4619      	mov	r1, r3
 80028c8:	4620      	mov	r0, r4
 80028ca:	f7fe f933 	bl	8000b34 <__addsf3>
 80028ce:	4603      	mov	r3, r0
 80028d0:	461c      	mov	r4, r3
 80028d2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80028d6:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 80028da:	4611      	mov	r1, r2
 80028dc:	4618      	mov	r0, r3
 80028de:	f7fe fa31 	bl	8000d44 <__aeabi_fmul>
 80028e2:	4603      	mov	r3, r0
 80028e4:	4619      	mov	r1, r3
 80028e6:	4620      	mov	r0, r4
 80028e8:	f7fe f924 	bl	8000b34 <__addsf3>
 80028ec:	4603      	mov	r3, r0
 80028ee:	4618      	mov	r0, r3
 80028f0:	f7fd fd9a 	bl	8000428 <__aeabi_f2d>
 80028f4:	4602      	mov	r2, r0
 80028f6:	460b      	mov	r3, r1
 80028f8:	4610      	mov	r0, r2
 80028fa:	4619      	mov	r1, r3
 80028fc:	f009 ff0a 	bl	800c714 <sqrt>
 8002900:	4602      	mov	r2, r0
 8002902:	460b      	mov	r3, r1
 8002904:	4610      	mov	r0, r2
 8002906:	4619      	mov	r1, r3
 8002908:	f7fe f8be 	bl	8000a88 <__aeabi_d2f>
 800290c:	4603      	mov	r3, r0
 800290e:	66fb      	str	r3, [r7, #108]	; 0x6c
		upQua.mx /= Norm;
 8002910:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002914:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8002916:	4618      	mov	r0, r3
 8002918:	f7fe fac8 	bl	8000eac <__aeabi_fdiv>
 800291c:	4603      	mov	r3, r0
 800291e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
		upQua.my /= Norm;
 8002922:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002926:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8002928:	4618      	mov	r0, r3
 800292a:	f7fe fabf 	bl	8000eac <__aeabi_fdiv>
 800292e:	4603      	mov	r3, r0
 8002930:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
		upQua.mz /= Norm;
 8002934:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002938:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800293a:	4618      	mov	r0, r3
 800293c:	f7fe fab6 	bl	8000eac <__aeabi_fdiv>
 8002940:	4603      	mov	r3, r0
 8002942:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

        // Auxiliary variables to avoid repeated arithmetic
        q0q0 = qVol->q0 * qVol->q0;
 8002946:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800294a:	681a      	ldr	r2, [r3, #0]
 800294c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	4619      	mov	r1, r3
 8002954:	4610      	mov	r0, r2
 8002956:	f7fe f9f5 	bl	8000d44 <__aeabi_fmul>
 800295a:	4603      	mov	r3, r0
 800295c:	66bb      	str	r3, [r7, #104]	; 0x68
        q0q1 = qVol->q0 * qVol->q1;
 800295e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002962:	681a      	ldr	r2, [r3, #0]
 8002964:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002968:	685b      	ldr	r3, [r3, #4]
 800296a:	4619      	mov	r1, r3
 800296c:	4610      	mov	r0, r2
 800296e:	f7fe f9e9 	bl	8000d44 <__aeabi_fmul>
 8002972:	4603      	mov	r3, r0
 8002974:	667b      	str	r3, [r7, #100]	; 0x64
        q0q2 = qVol->q0 * qVol->q2;
 8002976:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800297a:	681a      	ldr	r2, [r3, #0]
 800297c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002980:	689b      	ldr	r3, [r3, #8]
 8002982:	4619      	mov	r1, r3
 8002984:	4610      	mov	r0, r2
 8002986:	f7fe f9dd 	bl	8000d44 <__aeabi_fmul>
 800298a:	4603      	mov	r3, r0
 800298c:	663b      	str	r3, [r7, #96]	; 0x60
        q0q3 = qVol->q0 * qVol->q3;
 800298e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002992:	681a      	ldr	r2, [r3, #0]
 8002994:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002998:	68db      	ldr	r3, [r3, #12]
 800299a:	4619      	mov	r1, r3
 800299c:	4610      	mov	r0, r2
 800299e:	f7fe f9d1 	bl	8000d44 <__aeabi_fmul>
 80029a2:	4603      	mov	r3, r0
 80029a4:	65fb      	str	r3, [r7, #92]	; 0x5c
        q1q1 = qVol->q1 * qVol->q1;
 80029a6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80029aa:	685a      	ldr	r2, [r3, #4]
 80029ac:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80029b0:	685b      	ldr	r3, [r3, #4]
 80029b2:	4619      	mov	r1, r3
 80029b4:	4610      	mov	r0, r2
 80029b6:	f7fe f9c5 	bl	8000d44 <__aeabi_fmul>
 80029ba:	4603      	mov	r3, r0
 80029bc:	65bb      	str	r3, [r7, #88]	; 0x58
        q1q2 = qVol->q1 * qVol->q2;
 80029be:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80029c2:	685a      	ldr	r2, [r3, #4]
 80029c4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80029c8:	689b      	ldr	r3, [r3, #8]
 80029ca:	4619      	mov	r1, r3
 80029cc:	4610      	mov	r0, r2
 80029ce:	f7fe f9b9 	bl	8000d44 <__aeabi_fmul>
 80029d2:	4603      	mov	r3, r0
 80029d4:	657b      	str	r3, [r7, #84]	; 0x54
        q1q3 = qVol->q1 * qVol->q3;
 80029d6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80029da:	685a      	ldr	r2, [r3, #4]
 80029dc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80029e0:	68db      	ldr	r3, [r3, #12]
 80029e2:	4619      	mov	r1, r3
 80029e4:	4610      	mov	r0, r2
 80029e6:	f7fe f9ad 	bl	8000d44 <__aeabi_fmul>
 80029ea:	4603      	mov	r3, r0
 80029ec:	653b      	str	r3, [r7, #80]	; 0x50
        q2q2 = qVol->q2 * qVol->q2;
 80029ee:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80029f2:	689a      	ldr	r2, [r3, #8]
 80029f4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80029f8:	689b      	ldr	r3, [r3, #8]
 80029fa:	4619      	mov	r1, r3
 80029fc:	4610      	mov	r0, r2
 80029fe:	f7fe f9a1 	bl	8000d44 <__aeabi_fmul>
 8002a02:	4603      	mov	r3, r0
 8002a04:	64fb      	str	r3, [r7, #76]	; 0x4c
        q2q3 = qVol->q2 * qVol->q3;
 8002a06:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002a0a:	689a      	ldr	r2, [r3, #8]
 8002a0c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002a10:	68db      	ldr	r3, [r3, #12]
 8002a12:	4619      	mov	r1, r3
 8002a14:	4610      	mov	r0, r2
 8002a16:	f7fe f995 	bl	8000d44 <__aeabi_fmul>
 8002a1a:	4603      	mov	r3, r0
 8002a1c:	64bb      	str	r3, [r7, #72]	; 0x48
        q3q3 = qVol->q3 * qVol->q3;
 8002a1e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002a22:	68da      	ldr	r2, [r3, #12]
 8002a24:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002a28:	68db      	ldr	r3, [r3, #12]
 8002a2a:	4619      	mov	r1, r3
 8002a2c:	4610      	mov	r0, r2
 8002a2e:	f7fe f989 	bl	8000d44 <__aeabi_fmul>
 8002a32:	4603      	mov	r3, r0
 8002a34:	647b      	str	r3, [r7, #68]	; 0x44

        // Reference direction of Earth's magnetic field
        hx = 2.0f * (upQua.mx * (0.5f - q2q2 - q3q3) + upQua.my * (q1q2 - q0q3) + upQua.mz * (q1q3 + q0q2));
 8002a36:	f8d7 4098 	ldr.w	r4, [r7, #152]	; 0x98
 8002a3a:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8002a3c:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 8002a40:	f7fe f876 	bl	8000b30 <__aeabi_fsub>
 8002a44:	4603      	mov	r3, r0
 8002a46:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8002a48:	4618      	mov	r0, r3
 8002a4a:	f7fe f871 	bl	8000b30 <__aeabi_fsub>
 8002a4e:	4603      	mov	r3, r0
 8002a50:	4619      	mov	r1, r3
 8002a52:	4620      	mov	r0, r4
 8002a54:	f7fe f976 	bl	8000d44 <__aeabi_fmul>
 8002a58:	4603      	mov	r3, r0
 8002a5a:	461d      	mov	r5, r3
 8002a5c:	f8d7 409c 	ldr.w	r4, [r7, #156]	; 0x9c
 8002a60:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8002a62:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8002a64:	f7fe f864 	bl	8000b30 <__aeabi_fsub>
 8002a68:	4603      	mov	r3, r0
 8002a6a:	4619      	mov	r1, r3
 8002a6c:	4620      	mov	r0, r4
 8002a6e:	f7fe f969 	bl	8000d44 <__aeabi_fmul>
 8002a72:	4603      	mov	r3, r0
 8002a74:	4619      	mov	r1, r3
 8002a76:	4628      	mov	r0, r5
 8002a78:	f7fe f85c 	bl	8000b34 <__addsf3>
 8002a7c:	4603      	mov	r3, r0
 8002a7e:	461d      	mov	r5, r3
 8002a80:	f8d7 40a0 	ldr.w	r4, [r7, #160]	; 0xa0
 8002a84:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8002a86:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8002a88:	f7fe f854 	bl	8000b34 <__addsf3>
 8002a8c:	4603      	mov	r3, r0
 8002a8e:	4619      	mov	r1, r3
 8002a90:	4620      	mov	r0, r4
 8002a92:	f7fe f957 	bl	8000d44 <__aeabi_fmul>
 8002a96:	4603      	mov	r3, r0
 8002a98:	4619      	mov	r1, r3
 8002a9a:	4628      	mov	r0, r5
 8002a9c:	f7fe f84a 	bl	8000b34 <__addsf3>
 8002aa0:	4603      	mov	r3, r0
 8002aa2:	4619      	mov	r1, r3
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	f7fe f845 	bl	8000b34 <__addsf3>
 8002aaa:	4603      	mov	r3, r0
 8002aac:	643b      	str	r3, [r7, #64]	; 0x40
        hy = 2.0f * (upQua.mx * (q1q2 + q0q3) + upQua.my * (0.5f - q1q1 - q3q3) + upQua.mz * (q2q3 - q0q1));
 8002aae:	f8d7 4098 	ldr.w	r4, [r7, #152]	; 0x98
 8002ab2:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8002ab4:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8002ab6:	f7fe f83d 	bl	8000b34 <__addsf3>
 8002aba:	4603      	mov	r3, r0
 8002abc:	4619      	mov	r1, r3
 8002abe:	4620      	mov	r0, r4
 8002ac0:	f7fe f940 	bl	8000d44 <__aeabi_fmul>
 8002ac4:	4603      	mov	r3, r0
 8002ac6:	461d      	mov	r5, r3
 8002ac8:	f8d7 409c 	ldr.w	r4, [r7, #156]	; 0x9c
 8002acc:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8002ace:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 8002ad2:	f7fe f82d 	bl	8000b30 <__aeabi_fsub>
 8002ad6:	4603      	mov	r3, r0
 8002ad8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8002ada:	4618      	mov	r0, r3
 8002adc:	f7fe f828 	bl	8000b30 <__aeabi_fsub>
 8002ae0:	4603      	mov	r3, r0
 8002ae2:	4619      	mov	r1, r3
 8002ae4:	4620      	mov	r0, r4
 8002ae6:	f7fe f92d 	bl	8000d44 <__aeabi_fmul>
 8002aea:	4603      	mov	r3, r0
 8002aec:	4619      	mov	r1, r3
 8002aee:	4628      	mov	r0, r5
 8002af0:	f7fe f820 	bl	8000b34 <__addsf3>
 8002af4:	4603      	mov	r3, r0
 8002af6:	461d      	mov	r5, r3
 8002af8:	f8d7 40a0 	ldr.w	r4, [r7, #160]	; 0xa0
 8002afc:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8002afe:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8002b00:	f7fe f816 	bl	8000b30 <__aeabi_fsub>
 8002b04:	4603      	mov	r3, r0
 8002b06:	4619      	mov	r1, r3
 8002b08:	4620      	mov	r0, r4
 8002b0a:	f7fe f91b 	bl	8000d44 <__aeabi_fmul>
 8002b0e:	4603      	mov	r3, r0
 8002b10:	4619      	mov	r1, r3
 8002b12:	4628      	mov	r0, r5
 8002b14:	f7fe f80e 	bl	8000b34 <__addsf3>
 8002b18:	4603      	mov	r3, r0
 8002b1a:	4619      	mov	r1, r3
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	f7fe f809 	bl	8000b34 <__addsf3>
 8002b22:	4603      	mov	r3, r0
 8002b24:	63fb      	str	r3, [r7, #60]	; 0x3c
        bx = sqrt(hx * hx + hy * hy);
 8002b26:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002b28:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8002b2a:	f7fe f90b 	bl	8000d44 <__aeabi_fmul>
 8002b2e:	4603      	mov	r3, r0
 8002b30:	461c      	mov	r4, r3
 8002b32:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002b34:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8002b36:	f7fe f905 	bl	8000d44 <__aeabi_fmul>
 8002b3a:	4603      	mov	r3, r0
 8002b3c:	4619      	mov	r1, r3
 8002b3e:	4620      	mov	r0, r4
 8002b40:	f7fd fff8 	bl	8000b34 <__addsf3>
 8002b44:	4603      	mov	r3, r0
 8002b46:	4618      	mov	r0, r3
 8002b48:	f7fd fc6e 	bl	8000428 <__aeabi_f2d>
 8002b4c:	4602      	mov	r2, r0
 8002b4e:	460b      	mov	r3, r1
 8002b50:	4610      	mov	r0, r2
 8002b52:	4619      	mov	r1, r3
 8002b54:	f009 fdde 	bl	800c714 <sqrt>
 8002b58:	4602      	mov	r2, r0
 8002b5a:	460b      	mov	r3, r1
 8002b5c:	4610      	mov	r0, r2
 8002b5e:	4619      	mov	r1, r3
 8002b60:	f7fd ff92 	bl	8000a88 <__aeabi_d2f>
 8002b64:	4603      	mov	r3, r0
 8002b66:	63bb      	str	r3, [r7, #56]	; 0x38
        bz = 2.0f * (upQua.mx * (q1q3 - q0q2) + upQua.my * (q2q3 + q0q1) + upQua.mz * (0.5f - q1q1 - q2q2));
 8002b68:	f8d7 4098 	ldr.w	r4, [r7, #152]	; 0x98
 8002b6c:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8002b6e:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8002b70:	f7fd ffde 	bl	8000b30 <__aeabi_fsub>
 8002b74:	4603      	mov	r3, r0
 8002b76:	4619      	mov	r1, r3
 8002b78:	4620      	mov	r0, r4
 8002b7a:	f7fe f8e3 	bl	8000d44 <__aeabi_fmul>
 8002b7e:	4603      	mov	r3, r0
 8002b80:	461d      	mov	r5, r3
 8002b82:	f8d7 409c 	ldr.w	r4, [r7, #156]	; 0x9c
 8002b86:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8002b88:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8002b8a:	f7fd ffd3 	bl	8000b34 <__addsf3>
 8002b8e:	4603      	mov	r3, r0
 8002b90:	4619      	mov	r1, r3
 8002b92:	4620      	mov	r0, r4
 8002b94:	f7fe f8d6 	bl	8000d44 <__aeabi_fmul>
 8002b98:	4603      	mov	r3, r0
 8002b9a:	4619      	mov	r1, r3
 8002b9c:	4628      	mov	r0, r5
 8002b9e:	f7fd ffc9 	bl	8000b34 <__addsf3>
 8002ba2:	4603      	mov	r3, r0
 8002ba4:	461d      	mov	r5, r3
 8002ba6:	f8d7 40a0 	ldr.w	r4, [r7, #160]	; 0xa0
 8002baa:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8002bac:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 8002bb0:	f7fd ffbe 	bl	8000b30 <__aeabi_fsub>
 8002bb4:	4603      	mov	r3, r0
 8002bb6:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8002bb8:	4618      	mov	r0, r3
 8002bba:	f7fd ffb9 	bl	8000b30 <__aeabi_fsub>
 8002bbe:	4603      	mov	r3, r0
 8002bc0:	4619      	mov	r1, r3
 8002bc2:	4620      	mov	r0, r4
 8002bc4:	f7fe f8be 	bl	8000d44 <__aeabi_fmul>
 8002bc8:	4603      	mov	r3, r0
 8002bca:	4619      	mov	r1, r3
 8002bcc:	4628      	mov	r0, r5
 8002bce:	f7fd ffb1 	bl	8000b34 <__addsf3>
 8002bd2:	4603      	mov	r3, r0
 8002bd4:	4619      	mov	r1, r3
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	f7fd ffac 	bl	8000b34 <__addsf3>
 8002bdc:	4603      	mov	r3, r0
 8002bde:	637b      	str	r3, [r7, #52]	; 0x34

		// Estimated direction of gravity and magnetic field
		halfvx = q1q3 - q0q2;
 8002be0:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8002be2:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8002be4:	f7fd ffa4 	bl	8000b30 <__aeabi_fsub>
 8002be8:	4603      	mov	r3, r0
 8002bea:	633b      	str	r3, [r7, #48]	; 0x30
		halfvy = q0q1 + q2q3;
 8002bec:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8002bee:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8002bf0:	f7fd ffa0 	bl	8000b34 <__addsf3>
 8002bf4:	4603      	mov	r3, r0
 8002bf6:	62fb      	str	r3, [r7, #44]	; 0x2c
		halfvz = q0q0 - 0.5f + q3q3;
 8002bf8:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8002bfc:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8002bfe:	f7fd ff97 	bl	8000b30 <__aeabi_fsub>
 8002c02:	4603      	mov	r3, r0
 8002c04:	4619      	mov	r1, r3
 8002c06:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8002c08:	f7fd ff94 	bl	8000b34 <__addsf3>
 8002c0c:	4603      	mov	r3, r0
 8002c0e:	62bb      	str	r3, [r7, #40]	; 0x28
        halfwx = bx * (0.5f - q2q2 - q3q3) + bz * (q1q3 - q0q2);
 8002c10:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8002c12:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 8002c16:	f7fd ff8b 	bl	8000b30 <__aeabi_fsub>
 8002c1a:	4603      	mov	r3, r0
 8002c1c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8002c1e:	4618      	mov	r0, r3
 8002c20:	f7fd ff86 	bl	8000b30 <__aeabi_fsub>
 8002c24:	4603      	mov	r3, r0
 8002c26:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002c28:	4618      	mov	r0, r3
 8002c2a:	f7fe f88b 	bl	8000d44 <__aeabi_fmul>
 8002c2e:	4603      	mov	r3, r0
 8002c30:	461c      	mov	r4, r3
 8002c32:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8002c34:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8002c36:	f7fd ff7b 	bl	8000b30 <__aeabi_fsub>
 8002c3a:	4603      	mov	r3, r0
 8002c3c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002c3e:	4618      	mov	r0, r3
 8002c40:	f7fe f880 	bl	8000d44 <__aeabi_fmul>
 8002c44:	4603      	mov	r3, r0
 8002c46:	4619      	mov	r1, r3
 8002c48:	4620      	mov	r0, r4
 8002c4a:	f7fd ff73 	bl	8000b34 <__addsf3>
 8002c4e:	4603      	mov	r3, r0
 8002c50:	627b      	str	r3, [r7, #36]	; 0x24
        halfwy = bx * (q1q2 - q0q3) + bz * (q0q1 + q2q3);
 8002c52:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8002c54:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8002c56:	f7fd ff6b 	bl	8000b30 <__aeabi_fsub>
 8002c5a:	4603      	mov	r3, r0
 8002c5c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002c5e:	4618      	mov	r0, r3
 8002c60:	f7fe f870 	bl	8000d44 <__aeabi_fmul>
 8002c64:	4603      	mov	r3, r0
 8002c66:	461c      	mov	r4, r3
 8002c68:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8002c6a:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8002c6c:	f7fd ff62 	bl	8000b34 <__addsf3>
 8002c70:	4603      	mov	r3, r0
 8002c72:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002c74:	4618      	mov	r0, r3
 8002c76:	f7fe f865 	bl	8000d44 <__aeabi_fmul>
 8002c7a:	4603      	mov	r3, r0
 8002c7c:	4619      	mov	r1, r3
 8002c7e:	4620      	mov	r0, r4
 8002c80:	f7fd ff58 	bl	8000b34 <__addsf3>
 8002c84:	4603      	mov	r3, r0
 8002c86:	623b      	str	r3, [r7, #32]
        halfwz = bx * (q0q2 + q1q3) + bz * (0.5f - q1q1 - q2q2);
 8002c88:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8002c8a:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8002c8c:	f7fd ff52 	bl	8000b34 <__addsf3>
 8002c90:	4603      	mov	r3, r0
 8002c92:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002c94:	4618      	mov	r0, r3
 8002c96:	f7fe f855 	bl	8000d44 <__aeabi_fmul>
 8002c9a:	4603      	mov	r3, r0
 8002c9c:	461c      	mov	r4, r3
 8002c9e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8002ca0:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 8002ca4:	f7fd ff44 	bl	8000b30 <__aeabi_fsub>
 8002ca8:	4603      	mov	r3, r0
 8002caa:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8002cac:	4618      	mov	r0, r3
 8002cae:	f7fd ff3f 	bl	8000b30 <__aeabi_fsub>
 8002cb2:	4603      	mov	r3, r0
 8002cb4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	f7fe f844 	bl	8000d44 <__aeabi_fmul>
 8002cbc:	4603      	mov	r3, r0
 8002cbe:	4619      	mov	r1, r3
 8002cc0:	4620      	mov	r0, r4
 8002cc2:	f7fd ff37 	bl	8000b34 <__addsf3>
 8002cc6:	4603      	mov	r3, r0
 8002cc8:	61fb      	str	r3, [r7, #28]

		// Error is sum of cross product between estimated direction and measured direction of field vectors
		halfex = (upQua.ayg * halfvz - upQua.azg * halfvy) + (upQua.my * halfwz - upQua.mz * halfwy);
 8002cca:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002cce:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	f7fe f837 	bl	8000d44 <__aeabi_fmul>
 8002cd6:	4603      	mov	r3, r0
 8002cd8:	461c      	mov	r4, r3
 8002cda:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002cde:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	f7fe f82f 	bl	8000d44 <__aeabi_fmul>
 8002ce6:	4603      	mov	r3, r0
 8002ce8:	4619      	mov	r1, r3
 8002cea:	4620      	mov	r0, r4
 8002cec:	f7fd ff20 	bl	8000b30 <__aeabi_fsub>
 8002cf0:	4603      	mov	r3, r0
 8002cf2:	461c      	mov	r4, r3
 8002cf4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002cf8:	69f9      	ldr	r1, [r7, #28]
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	f7fe f822 	bl	8000d44 <__aeabi_fmul>
 8002d00:	4603      	mov	r3, r0
 8002d02:	461d      	mov	r5, r3
 8002d04:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002d08:	6a39      	ldr	r1, [r7, #32]
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	f7fe f81a 	bl	8000d44 <__aeabi_fmul>
 8002d10:	4603      	mov	r3, r0
 8002d12:	4619      	mov	r1, r3
 8002d14:	4628      	mov	r0, r5
 8002d16:	f7fd ff0b 	bl	8000b30 <__aeabi_fsub>
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	4619      	mov	r1, r3
 8002d1e:	4620      	mov	r0, r4
 8002d20:	f7fd ff08 	bl	8000b34 <__addsf3>
 8002d24:	4603      	mov	r3, r0
 8002d26:	61bb      	str	r3, [r7, #24]
		halfey = (upQua.azg * halfvx - upQua.axg * halfvz) + (upQua.mz * halfwx - upQua.mx * halfwz);
 8002d28:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002d2c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002d2e:	4618      	mov	r0, r3
 8002d30:	f7fe f808 	bl	8000d44 <__aeabi_fmul>
 8002d34:	4603      	mov	r3, r0
 8002d36:	461c      	mov	r4, r3
 8002d38:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002d3c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002d3e:	4618      	mov	r0, r3
 8002d40:	f7fe f800 	bl	8000d44 <__aeabi_fmul>
 8002d44:	4603      	mov	r3, r0
 8002d46:	4619      	mov	r1, r3
 8002d48:	4620      	mov	r0, r4
 8002d4a:	f7fd fef1 	bl	8000b30 <__aeabi_fsub>
 8002d4e:	4603      	mov	r3, r0
 8002d50:	461c      	mov	r4, r3
 8002d52:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002d56:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002d58:	4618      	mov	r0, r3
 8002d5a:	f7fd fff3 	bl	8000d44 <__aeabi_fmul>
 8002d5e:	4603      	mov	r3, r0
 8002d60:	461d      	mov	r5, r3
 8002d62:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002d66:	69f9      	ldr	r1, [r7, #28]
 8002d68:	4618      	mov	r0, r3
 8002d6a:	f7fd ffeb 	bl	8000d44 <__aeabi_fmul>
 8002d6e:	4603      	mov	r3, r0
 8002d70:	4619      	mov	r1, r3
 8002d72:	4628      	mov	r0, r5
 8002d74:	f7fd fedc 	bl	8000b30 <__aeabi_fsub>
 8002d78:	4603      	mov	r3, r0
 8002d7a:	4619      	mov	r1, r3
 8002d7c:	4620      	mov	r0, r4
 8002d7e:	f7fd fed9 	bl	8000b34 <__addsf3>
 8002d82:	4603      	mov	r3, r0
 8002d84:	617b      	str	r3, [r7, #20]
		halfez = (upQua.axg * halfvy - upQua.ayg * halfvx) + (upQua.mx * halfwy - upQua.my * halfwx);
 8002d86:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002d8a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	f7fd ffd9 	bl	8000d44 <__aeabi_fmul>
 8002d92:	4603      	mov	r3, r0
 8002d94:	461c      	mov	r4, r3
 8002d96:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002d9a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	f7fd ffd1 	bl	8000d44 <__aeabi_fmul>
 8002da2:	4603      	mov	r3, r0
 8002da4:	4619      	mov	r1, r3
 8002da6:	4620      	mov	r0, r4
 8002da8:	f7fd fec2 	bl	8000b30 <__aeabi_fsub>
 8002dac:	4603      	mov	r3, r0
 8002dae:	461c      	mov	r4, r3
 8002db0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002db4:	6a39      	ldr	r1, [r7, #32]
 8002db6:	4618      	mov	r0, r3
 8002db8:	f7fd ffc4 	bl	8000d44 <__aeabi_fmul>
 8002dbc:	4603      	mov	r3, r0
 8002dbe:	461d      	mov	r5, r3
 8002dc0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002dc4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	f7fd ffbc 	bl	8000d44 <__aeabi_fmul>
 8002dcc:	4603      	mov	r3, r0
 8002dce:	4619      	mov	r1, r3
 8002dd0:	4628      	mov	r0, r5
 8002dd2:	f7fd fead 	bl	8000b30 <__aeabi_fsub>
 8002dd6:	4603      	mov	r3, r0
 8002dd8:	4619      	mov	r1, r3
 8002dda:	4620      	mov	r0, r4
 8002ddc:	f7fd feaa 	bl	8000b34 <__addsf3>
 8002de0:	4603      	mov	r3, r0
 8002de2:	613b      	str	r3, [r7, #16]

		// Compute and apply integral feedback if enabled
		if(twoKi > 0.0f) {
 8002de4:	4b44      	ldr	r3, [pc, #272]	; (8002ef8 <MahonyAHRSupdate+0x7b0>)
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f04f 0100 	mov.w	r1, #0
 8002dec:	4618      	mov	r0, r3
 8002dee:	f7fe f965 	bl	80010bc <__aeabi_fcmpgt>
 8002df2:	4603      	mov	r3, r0
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	f000 8087 	beq.w	8002f08 <MahonyAHRSupdate+0x7c0>
			integralFBx += twoKi * halfex * (1.0f / sampleFreq);	// integral error scaled by Ki
 8002dfa:	4b3f      	ldr	r3, [pc, #252]	; (8002ef8 <MahonyAHRSupdate+0x7b0>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	69b9      	ldr	r1, [r7, #24]
 8002e00:	4618      	mov	r0, r3
 8002e02:	f7fd ff9f 	bl	8000d44 <__aeabi_fmul>
 8002e06:	4603      	mov	r3, r0
 8002e08:	461c      	mov	r4, r3
 8002e0a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002e0e:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8002e12:	f7fe f84b 	bl	8000eac <__aeabi_fdiv>
 8002e16:	4603      	mov	r3, r0
 8002e18:	4619      	mov	r1, r3
 8002e1a:	4620      	mov	r0, r4
 8002e1c:	f7fd ff92 	bl	8000d44 <__aeabi_fmul>
 8002e20:	4603      	mov	r3, r0
 8002e22:	461a      	mov	r2, r3
 8002e24:	4b35      	ldr	r3, [pc, #212]	; (8002efc <MahonyAHRSupdate+0x7b4>)
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	4619      	mov	r1, r3
 8002e2a:	4610      	mov	r0, r2
 8002e2c:	f7fd fe82 	bl	8000b34 <__addsf3>
 8002e30:	4603      	mov	r3, r0
 8002e32:	461a      	mov	r2, r3
 8002e34:	4b31      	ldr	r3, [pc, #196]	; (8002efc <MahonyAHRSupdate+0x7b4>)
 8002e36:	601a      	str	r2, [r3, #0]
			integralFBy += twoKi * halfey * (1.0f / sampleFreq);
 8002e38:	4b2f      	ldr	r3, [pc, #188]	; (8002ef8 <MahonyAHRSupdate+0x7b0>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	6979      	ldr	r1, [r7, #20]
 8002e3e:	4618      	mov	r0, r3
 8002e40:	f7fd ff80 	bl	8000d44 <__aeabi_fmul>
 8002e44:	4603      	mov	r3, r0
 8002e46:	461c      	mov	r4, r3
 8002e48:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002e4c:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8002e50:	f7fe f82c 	bl	8000eac <__aeabi_fdiv>
 8002e54:	4603      	mov	r3, r0
 8002e56:	4619      	mov	r1, r3
 8002e58:	4620      	mov	r0, r4
 8002e5a:	f7fd ff73 	bl	8000d44 <__aeabi_fmul>
 8002e5e:	4603      	mov	r3, r0
 8002e60:	461a      	mov	r2, r3
 8002e62:	4b27      	ldr	r3, [pc, #156]	; (8002f00 <MahonyAHRSupdate+0x7b8>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	4619      	mov	r1, r3
 8002e68:	4610      	mov	r0, r2
 8002e6a:	f7fd fe63 	bl	8000b34 <__addsf3>
 8002e6e:	4603      	mov	r3, r0
 8002e70:	461a      	mov	r2, r3
 8002e72:	4b23      	ldr	r3, [pc, #140]	; (8002f00 <MahonyAHRSupdate+0x7b8>)
 8002e74:	601a      	str	r2, [r3, #0]
			integralFBz += twoKi * halfez * (1.0f / sampleFreq);
 8002e76:	4b20      	ldr	r3, [pc, #128]	; (8002ef8 <MahonyAHRSupdate+0x7b0>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	6939      	ldr	r1, [r7, #16]
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	f7fd ff61 	bl	8000d44 <__aeabi_fmul>
 8002e82:	4603      	mov	r3, r0
 8002e84:	461c      	mov	r4, r3
 8002e86:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002e8a:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8002e8e:	f7fe f80d 	bl	8000eac <__aeabi_fdiv>
 8002e92:	4603      	mov	r3, r0
 8002e94:	4619      	mov	r1, r3
 8002e96:	4620      	mov	r0, r4
 8002e98:	f7fd ff54 	bl	8000d44 <__aeabi_fmul>
 8002e9c:	4603      	mov	r3, r0
 8002e9e:	461a      	mov	r2, r3
 8002ea0:	4b18      	ldr	r3, [pc, #96]	; (8002f04 <MahonyAHRSupdate+0x7bc>)
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	4619      	mov	r1, r3
 8002ea6:	4610      	mov	r0, r2
 8002ea8:	f7fd fe44 	bl	8000b34 <__addsf3>
 8002eac:	4603      	mov	r3, r0
 8002eae:	461a      	mov	r2, r3
 8002eb0:	4b14      	ldr	r3, [pc, #80]	; (8002f04 <MahonyAHRSupdate+0x7bc>)
 8002eb2:	601a      	str	r2, [r3, #0]
			upQua.gxrs += integralFBx;	// apply integral feedback
 8002eb4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002eb8:	4a10      	ldr	r2, [pc, #64]	; (8002efc <MahonyAHRSupdate+0x7b4>)
 8002eba:	6812      	ldr	r2, [r2, #0]
 8002ebc:	4611      	mov	r1, r2
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	f7fd fe38 	bl	8000b34 <__addsf3>
 8002ec4:	4603      	mov	r3, r0
 8002ec6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
			upQua.gyrs += integralFBy;
 8002eca:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002ece:	4a0c      	ldr	r2, [pc, #48]	; (8002f00 <MahonyAHRSupdate+0x7b8>)
 8002ed0:	6812      	ldr	r2, [r2, #0]
 8002ed2:	4611      	mov	r1, r2
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	f7fd fe2d 	bl	8000b34 <__addsf3>
 8002eda:	4603      	mov	r3, r0
 8002edc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
			upQua.gzrs += integralFBz;
 8002ee0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002ee4:	4a07      	ldr	r2, [pc, #28]	; (8002f04 <MahonyAHRSupdate+0x7bc>)
 8002ee6:	6812      	ldr	r2, [r2, #0]
 8002ee8:	4611      	mov	r1, r2
 8002eea:	4618      	mov	r0, r3
 8002eec:	f7fd fe22 	bl	8000b34 <__addsf3>
 8002ef0:	4603      	mov	r3, r0
 8002ef2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002ef6:	e013      	b.n	8002f20 <MahonyAHRSupdate+0x7d8>
 8002ef8:	20000004 	.word	0x20000004
 8002efc:	20000278 	.word	0x20000278
 8002f00:	2000027c 	.word	0x2000027c
 8002f04:	20000280 	.word	0x20000280
		}
		else {
			integralFBx = 0.0f;	// prevent integral windup
 8002f08:	4b1e      	ldr	r3, [pc, #120]	; (8002f84 <MahonyAHRSupdate+0x83c>)
 8002f0a:	f04f 0200 	mov.w	r2, #0
 8002f0e:	601a      	str	r2, [r3, #0]
			integralFBy = 0.0f;
 8002f10:	4b1d      	ldr	r3, [pc, #116]	; (8002f88 <MahonyAHRSupdate+0x840>)
 8002f12:	f04f 0200 	mov.w	r2, #0
 8002f16:	601a      	str	r2, [r3, #0]
			integralFBz = 0.0f;
 8002f18:	4b1c      	ldr	r3, [pc, #112]	; (8002f8c <MahonyAHRSupdate+0x844>)
 8002f1a:	f04f 0200 	mov.w	r2, #0
 8002f1e:	601a      	str	r2, [r3, #0]
		}

		// Apply proportional feedback
	    upQua.gxrs += twoKp * halfex;
 8002f20:	f8d7 408c 	ldr.w	r4, [r7, #140]	; 0x8c
 8002f24:	4b1a      	ldr	r3, [pc, #104]	; (8002f90 <MahonyAHRSupdate+0x848>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	69b9      	ldr	r1, [r7, #24]
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	f7fd ff0a 	bl	8000d44 <__aeabi_fmul>
 8002f30:	4603      	mov	r3, r0
 8002f32:	4619      	mov	r1, r3
 8002f34:	4620      	mov	r0, r4
 8002f36:	f7fd fdfd 	bl	8000b34 <__addsf3>
 8002f3a:	4603      	mov	r3, r0
 8002f3c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	    upQua.gyrs += twoKp * halfey;
 8002f40:	f8d7 4090 	ldr.w	r4, [r7, #144]	; 0x90
 8002f44:	4b12      	ldr	r3, [pc, #72]	; (8002f90 <MahonyAHRSupdate+0x848>)
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	6979      	ldr	r1, [r7, #20]
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	f7fd fefa 	bl	8000d44 <__aeabi_fmul>
 8002f50:	4603      	mov	r3, r0
 8002f52:	4619      	mov	r1, r3
 8002f54:	4620      	mov	r0, r4
 8002f56:	f7fd fded 	bl	8000b34 <__addsf3>
 8002f5a:	4603      	mov	r3, r0
 8002f5c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	    upQua.gzrs += twoKp * halfez;
 8002f60:	f8d7 4094 	ldr.w	r4, [r7, #148]	; 0x94
 8002f64:	4b0a      	ldr	r3, [pc, #40]	; (8002f90 <MahonyAHRSupdate+0x848>)
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	6939      	ldr	r1, [r7, #16]
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	f7fd feea 	bl	8000d44 <__aeabi_fmul>
 8002f70:	4603      	mov	r3, r0
 8002f72:	4619      	mov	r1, r3
 8002f74:	4620      	mov	r0, r4
 8002f76:	f7fd fddd 	bl	8000b34 <__addsf3>
 8002f7a:	4603      	mov	r3, r0
 8002f7c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002f80:	e008      	b.n	8002f94 <MahonyAHRSupdate+0x84c>
 8002f82:	bf00      	nop
 8002f84:	20000278 	.word	0x20000278
 8002f88:	2000027c 	.word	0x2000027c
 8002f8c:	20000280 	.word	0x20000280
 8002f90:	20000000 	.word	0x20000000
	}

	// Integrate rate of change of quaternion
	upQua.gxrs *= (0.5f * (1.0f / sampleFreq));		// pre-multiply common factors
 8002f94:	f8d7 408c 	ldr.w	r4, [r7, #140]	; 0x8c
 8002f98:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002f9c:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8002fa0:	f7fd ff84 	bl	8000eac <__aeabi_fdiv>
 8002fa4:	4603      	mov	r3, r0
 8002fa6:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8002faa:	4618      	mov	r0, r3
 8002fac:	f7fd feca 	bl	8000d44 <__aeabi_fmul>
 8002fb0:	4603      	mov	r3, r0
 8002fb2:	4619      	mov	r1, r3
 8002fb4:	4620      	mov	r0, r4
 8002fb6:	f7fd fec5 	bl	8000d44 <__aeabi_fmul>
 8002fba:	4603      	mov	r3, r0
 8002fbc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	upQua.gyrs *= (0.5f * (1.0f / sampleFreq));
 8002fc0:	f8d7 4090 	ldr.w	r4, [r7, #144]	; 0x90
 8002fc4:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002fc8:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8002fcc:	f7fd ff6e 	bl	8000eac <__aeabi_fdiv>
 8002fd0:	4603      	mov	r3, r0
 8002fd2:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	f7fd feb4 	bl	8000d44 <__aeabi_fmul>
 8002fdc:	4603      	mov	r3, r0
 8002fde:	4619      	mov	r1, r3
 8002fe0:	4620      	mov	r0, r4
 8002fe2:	f7fd feaf 	bl	8000d44 <__aeabi_fmul>
 8002fe6:	4603      	mov	r3, r0
 8002fe8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	upQua.gzrs *= (0.5f * (1.0f / sampleFreq));
 8002fec:	f8d7 4094 	ldr.w	r4, [r7, #148]	; 0x94
 8002ff0:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002ff4:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8002ff8:	f7fd ff58 	bl	8000eac <__aeabi_fdiv>
 8002ffc:	4603      	mov	r3, r0
 8002ffe:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8003002:	4618      	mov	r0, r3
 8003004:	f7fd fe9e 	bl	8000d44 <__aeabi_fmul>
 8003008:	4603      	mov	r3, r0
 800300a:	4619      	mov	r1, r3
 800300c:	4620      	mov	r0, r4
 800300e:	f7fd fe99 	bl	8000d44 <__aeabi_fmul>
 8003012:	4603      	mov	r3, r0
 8003014:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	qa = qVol->q0;
 8003018:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	60fb      	str	r3, [r7, #12]
	qb = qVol->q1;
 8003020:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003024:	685b      	ldr	r3, [r3, #4]
 8003026:	60bb      	str	r3, [r7, #8]
	qc = qVol->q2;
 8003028:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800302c:	689b      	ldr	r3, [r3, #8]
 800302e:	607b      	str	r3, [r7, #4]
	qVol->q0 += (-qb * upQua.gxrs - qc * upQua.gyrs - qVol->q3 * upQua.gzrs);
 8003030:	68bb      	ldr	r3, [r7, #8]
 8003032:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8003036:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800303a:	4611      	mov	r1, r2
 800303c:	4618      	mov	r0, r3
 800303e:	f7fd fe81 	bl	8000d44 <__aeabi_fmul>
 8003042:	4603      	mov	r3, r0
 8003044:	461c      	mov	r4, r3
 8003046:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800304a:	6879      	ldr	r1, [r7, #4]
 800304c:	4618      	mov	r0, r3
 800304e:	f7fd fe79 	bl	8000d44 <__aeabi_fmul>
 8003052:	4603      	mov	r3, r0
 8003054:	4619      	mov	r1, r3
 8003056:	4620      	mov	r0, r4
 8003058:	f7fd fd6a 	bl	8000b30 <__aeabi_fsub>
 800305c:	4603      	mov	r3, r0
 800305e:	461c      	mov	r4, r3
 8003060:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003064:	68db      	ldr	r3, [r3, #12]
 8003066:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800306a:	4611      	mov	r1, r2
 800306c:	4618      	mov	r0, r3
 800306e:	f7fd fe69 	bl	8000d44 <__aeabi_fmul>
 8003072:	4603      	mov	r3, r0
 8003074:	4619      	mov	r1, r3
 8003076:	4620      	mov	r0, r4
 8003078:	f7fd fd5a 	bl	8000b30 <__aeabi_fsub>
 800307c:	4603      	mov	r3, r0
 800307e:	461a      	mov	r2, r3
 8003080:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	4619      	mov	r1, r3
 8003088:	4610      	mov	r0, r2
 800308a:	f7fd fd53 	bl	8000b34 <__addsf3>
 800308e:	4603      	mov	r3, r0
 8003090:	461a      	mov	r2, r3
 8003092:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003096:	601a      	str	r2, [r3, #0]
	qVol->q1 += (qa * upQua.gxrs + qc * upQua.gzrs - qVol->q3 * upQua.gyrs);
 8003098:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800309c:	68f9      	ldr	r1, [r7, #12]
 800309e:	4618      	mov	r0, r3
 80030a0:	f7fd fe50 	bl	8000d44 <__aeabi_fmul>
 80030a4:	4603      	mov	r3, r0
 80030a6:	461c      	mov	r4, r3
 80030a8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80030ac:	6879      	ldr	r1, [r7, #4]
 80030ae:	4618      	mov	r0, r3
 80030b0:	f7fd fe48 	bl	8000d44 <__aeabi_fmul>
 80030b4:	4603      	mov	r3, r0
 80030b6:	4619      	mov	r1, r3
 80030b8:	4620      	mov	r0, r4
 80030ba:	f7fd fd3b 	bl	8000b34 <__addsf3>
 80030be:	4603      	mov	r3, r0
 80030c0:	461c      	mov	r4, r3
 80030c2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80030c6:	68db      	ldr	r3, [r3, #12]
 80030c8:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 80030cc:	4611      	mov	r1, r2
 80030ce:	4618      	mov	r0, r3
 80030d0:	f7fd fe38 	bl	8000d44 <__aeabi_fmul>
 80030d4:	4603      	mov	r3, r0
 80030d6:	4619      	mov	r1, r3
 80030d8:	4620      	mov	r0, r4
 80030da:	f7fd fd29 	bl	8000b30 <__aeabi_fsub>
 80030de:	4603      	mov	r3, r0
 80030e0:	461a      	mov	r2, r3
 80030e2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80030e6:	685b      	ldr	r3, [r3, #4]
 80030e8:	4619      	mov	r1, r3
 80030ea:	4610      	mov	r0, r2
 80030ec:	f7fd fd22 	bl	8000b34 <__addsf3>
 80030f0:	4603      	mov	r3, r0
 80030f2:	461a      	mov	r2, r3
 80030f4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80030f8:	605a      	str	r2, [r3, #4]
	qVol->q2 += (qa * upQua.gyrs - qb * upQua.gzrs + qVol->q3 * upQua.gxrs);
 80030fa:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80030fe:	68f9      	ldr	r1, [r7, #12]
 8003100:	4618      	mov	r0, r3
 8003102:	f7fd fe1f 	bl	8000d44 <__aeabi_fmul>
 8003106:	4603      	mov	r3, r0
 8003108:	461c      	mov	r4, r3
 800310a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800310e:	68b9      	ldr	r1, [r7, #8]
 8003110:	4618      	mov	r0, r3
 8003112:	f7fd fe17 	bl	8000d44 <__aeabi_fmul>
 8003116:	4603      	mov	r3, r0
 8003118:	4619      	mov	r1, r3
 800311a:	4620      	mov	r0, r4
 800311c:	f7fd fd08 	bl	8000b30 <__aeabi_fsub>
 8003120:	4603      	mov	r3, r0
 8003122:	461c      	mov	r4, r3
 8003124:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003128:	68db      	ldr	r3, [r3, #12]
 800312a:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800312e:	4611      	mov	r1, r2
 8003130:	4618      	mov	r0, r3
 8003132:	f7fd fe07 	bl	8000d44 <__aeabi_fmul>
 8003136:	4603      	mov	r3, r0
 8003138:	4619      	mov	r1, r3
 800313a:	4620      	mov	r0, r4
 800313c:	f7fd fcfa 	bl	8000b34 <__addsf3>
 8003140:	4603      	mov	r3, r0
 8003142:	461a      	mov	r2, r3
 8003144:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003148:	689b      	ldr	r3, [r3, #8]
 800314a:	4619      	mov	r1, r3
 800314c:	4610      	mov	r0, r2
 800314e:	f7fd fcf1 	bl	8000b34 <__addsf3>
 8003152:	4603      	mov	r3, r0
 8003154:	461a      	mov	r2, r3
 8003156:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800315a:	609a      	str	r2, [r3, #8]
	qVol->q3 += (qa * upQua.gzrs + qb * upQua.gyrs - qc * upQua.gxrs);
 800315c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003160:	68dc      	ldr	r4, [r3, #12]
 8003162:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003166:	68f9      	ldr	r1, [r7, #12]
 8003168:	4618      	mov	r0, r3
 800316a:	f7fd fdeb 	bl	8000d44 <__aeabi_fmul>
 800316e:	4603      	mov	r3, r0
 8003170:	461d      	mov	r5, r3
 8003172:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003176:	68b9      	ldr	r1, [r7, #8]
 8003178:	4618      	mov	r0, r3
 800317a:	f7fd fde3 	bl	8000d44 <__aeabi_fmul>
 800317e:	4603      	mov	r3, r0
 8003180:	4619      	mov	r1, r3
 8003182:	4628      	mov	r0, r5
 8003184:	f7fd fcd6 	bl	8000b34 <__addsf3>
 8003188:	4603      	mov	r3, r0
 800318a:	461d      	mov	r5, r3
 800318c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003190:	6879      	ldr	r1, [r7, #4]
 8003192:	4618      	mov	r0, r3
 8003194:	f7fd fdd6 	bl	8000d44 <__aeabi_fmul>
 8003198:	4603      	mov	r3, r0
 800319a:	4619      	mov	r1, r3
 800319c:	4628      	mov	r0, r5
 800319e:	f7fd fcc7 	bl	8000b30 <__aeabi_fsub>
 80031a2:	4603      	mov	r3, r0
 80031a4:	4619      	mov	r1, r3
 80031a6:	4620      	mov	r0, r4
 80031a8:	f7fd fcc4 	bl	8000b34 <__addsf3>
 80031ac:	4603      	mov	r3, r0
 80031ae:	461a      	mov	r2, r3
 80031b0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80031b4:	60da      	str	r2, [r3, #12]

	// Normalise quaternion
	  Norm = sqrt(qVol->q0 * qVol->q0 + qVol->q1 * qVol->q1 + qVol->q2 * qVol->q2 + qVol->q3 * qVol->q3);
 80031b6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80031ba:	681a      	ldr	r2, [r3, #0]
 80031bc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	4619      	mov	r1, r3
 80031c4:	4610      	mov	r0, r2
 80031c6:	f7fd fdbd 	bl	8000d44 <__aeabi_fmul>
 80031ca:	4603      	mov	r3, r0
 80031cc:	461c      	mov	r4, r3
 80031ce:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80031d2:	685a      	ldr	r2, [r3, #4]
 80031d4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80031d8:	685b      	ldr	r3, [r3, #4]
 80031da:	4619      	mov	r1, r3
 80031dc:	4610      	mov	r0, r2
 80031de:	f7fd fdb1 	bl	8000d44 <__aeabi_fmul>
 80031e2:	4603      	mov	r3, r0
 80031e4:	4619      	mov	r1, r3
 80031e6:	4620      	mov	r0, r4
 80031e8:	f7fd fca4 	bl	8000b34 <__addsf3>
 80031ec:	4603      	mov	r3, r0
 80031ee:	461c      	mov	r4, r3
 80031f0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80031f4:	689a      	ldr	r2, [r3, #8]
 80031f6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80031fa:	689b      	ldr	r3, [r3, #8]
 80031fc:	4619      	mov	r1, r3
 80031fe:	4610      	mov	r0, r2
 8003200:	f7fd fda0 	bl	8000d44 <__aeabi_fmul>
 8003204:	4603      	mov	r3, r0
 8003206:	4619      	mov	r1, r3
 8003208:	4620      	mov	r0, r4
 800320a:	f7fd fc93 	bl	8000b34 <__addsf3>
 800320e:	4603      	mov	r3, r0
 8003210:	461c      	mov	r4, r3
 8003212:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003216:	68da      	ldr	r2, [r3, #12]
 8003218:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800321c:	68db      	ldr	r3, [r3, #12]
 800321e:	4619      	mov	r1, r3
 8003220:	4610      	mov	r0, r2
 8003222:	f7fd fd8f 	bl	8000d44 <__aeabi_fmul>
 8003226:	4603      	mov	r3, r0
 8003228:	4619      	mov	r1, r3
 800322a:	4620      	mov	r0, r4
 800322c:	f7fd fc82 	bl	8000b34 <__addsf3>
 8003230:	4603      	mov	r3, r0
 8003232:	4618      	mov	r0, r3
 8003234:	f7fd f8f8 	bl	8000428 <__aeabi_f2d>
 8003238:	4602      	mov	r2, r0
 800323a:	460b      	mov	r3, r1
 800323c:	4610      	mov	r0, r2
 800323e:	4619      	mov	r1, r3
 8003240:	f009 fa68 	bl	800c714 <sqrt>
 8003244:	4602      	mov	r2, r0
 8003246:	460b      	mov	r3, r1
 8003248:	4610      	mov	r0, r2
 800324a:	4619      	mov	r1, r3
 800324c:	f7fd fc1c 	bl	8000a88 <__aeabi_d2f>
 8003250:	4603      	mov	r3, r0
 8003252:	66fb      	str	r3, [r7, #108]	; 0x6c
	  qVol->q0 /= Norm;
 8003254:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800325c:	4618      	mov	r0, r3
 800325e:	f7fd fe25 	bl	8000eac <__aeabi_fdiv>
 8003262:	4603      	mov	r3, r0
 8003264:	461a      	mov	r2, r3
 8003266:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800326a:	601a      	str	r2, [r3, #0]
	  qVol->q1 /= Norm;
 800326c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003270:	685b      	ldr	r3, [r3, #4]
 8003272:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8003274:	4618      	mov	r0, r3
 8003276:	f7fd fe19 	bl	8000eac <__aeabi_fdiv>
 800327a:	4603      	mov	r3, r0
 800327c:	461a      	mov	r2, r3
 800327e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003282:	605a      	str	r2, [r3, #4]
	  qVol->q2 /= Norm;
 8003284:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003288:	689b      	ldr	r3, [r3, #8]
 800328a:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800328c:	4618      	mov	r0, r3
 800328e:	f7fd fe0d 	bl	8000eac <__aeabi_fdiv>
 8003292:	4603      	mov	r3, r0
 8003294:	461a      	mov	r2, r3
 8003296:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800329a:	609a      	str	r2, [r3, #8]
	  qVol->q3 /= Norm;
 800329c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80032a0:	68db      	ldr	r3, [r3, #12]
 80032a2:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 80032a4:	4618      	mov	r0, r3
 80032a6:	f7fd fe01 	bl	8000eac <__aeabi_fdiv>
 80032aa:	4603      	mov	r3, r0
 80032ac:	461a      	mov	r2, r3
 80032ae:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80032b2:	60da      	str	r2, [r3, #12]
}
 80032b4:	3770      	adds	r7, #112	; 0x70
 80032b6:	46bd      	mov	sp, r7
 80032b8:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 80032bc:	b004      	add	sp, #16
 80032be:	4770      	bx	lr

080032c0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80032c0:	b480      	push	{r7}
 80032c2:	b085      	sub	sp, #20
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	60f8      	str	r0, [r7, #12]
 80032c8:	60b9      	str	r1, [r7, #8]
 80032ca:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	4a06      	ldr	r2, [pc, #24]	; (80032e8 <vApplicationGetIdleTaskMemory+0x28>)
 80032d0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80032d2:	68bb      	ldr	r3, [r7, #8]
 80032d4:	4a05      	ldr	r2, [pc, #20]	; (80032ec <vApplicationGetIdleTaskMemory+0x2c>)
 80032d6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2280      	movs	r2, #128	; 0x80
 80032dc:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80032de:	bf00      	nop
 80032e0:	3714      	adds	r7, #20
 80032e2:	46bd      	mov	sp, r7
 80032e4:	bc80      	pop	{r7}
 80032e6:	4770      	bx	lr
 80032e8:	20000284 	.word	0x20000284
 80032ec:	200002d8 	.word	0x200002d8

080032f0 <DWT_Init>:
#define INC_MICROS_H_

#include "main.h"

__STATIC_INLINE void DWT_Init(void)
{
 80032f0:	b480      	push	{r7}
 80032f2:	af00      	add	r7, sp, #0
	CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk; // разрешаем использовать счётчик
 80032f4:	4b07      	ldr	r3, [pc, #28]	; (8003314 <DWT_Init+0x24>)
 80032f6:	68db      	ldr	r3, [r3, #12]
 80032f8:	4a06      	ldr	r2, [pc, #24]	; (8003314 <DWT_Init+0x24>)
 80032fa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80032fe:	60d3      	str	r3, [r2, #12]
	DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;   // запускаем счётчик
 8003300:	4b05      	ldr	r3, [pc, #20]	; (8003318 <DWT_Init+0x28>)
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	4a04      	ldr	r2, [pc, #16]	; (8003318 <DWT_Init+0x28>)
 8003306:	f043 0301 	orr.w	r3, r3, #1
 800330a:	6013      	str	r3, [r2, #0]
}
 800330c:	bf00      	nop
 800330e:	46bd      	mov	sp, r7
 8003310:	bc80      	pop	{r7}
 8003312:	4770      	bx	lr
 8003314:	e000edf0 	.word	0xe000edf0
 8003318:	e0001000 	.word	0xe0001000

0800331c <micros>:
	uint32_t us_count_tic =  us * (SystemCoreClock / 1000000U);
	DWT->CYCCNT = 0U;
	while(DWT->CYCCNT < us_count_tic);
}

__STATIC_INLINE uint32_t micros(void){
 800331c:	b480      	push	{r7}
 800331e:	af00      	add	r7, sp, #0
	return  DWT->CYCCNT / (SystemCoreClock / 1000000U);
 8003320:	4b06      	ldr	r3, [pc, #24]	; (800333c <micros+0x20>)
 8003322:	685a      	ldr	r2, [r3, #4]
 8003324:	4b06      	ldr	r3, [pc, #24]	; (8003340 <micros+0x24>)
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	4906      	ldr	r1, [pc, #24]	; (8003344 <micros+0x28>)
 800332a:	fba1 1303 	umull	r1, r3, r1, r3
 800332e:	0c9b      	lsrs	r3, r3, #18
 8003330:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8003334:	4618      	mov	r0, r3
 8003336:	46bd      	mov	sp, r7
 8003338:	bc80      	pop	{r7}
 800333a:	4770      	bx	lr
 800333c:	e0001000 	.word	0xe0001000
 8003340:	2000000c 	.word	0x2000000c
 8003344:	431bde83 	.word	0x431bde83

08003348 <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 8003348:	b580      	push	{r7, lr}
 800334a:	b082      	sub	sp, #8
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 200);
 8003350:	1d39      	adds	r1, r7, #4
 8003352:	23c8      	movs	r3, #200	; 0xc8
 8003354:	2201      	movs	r2, #1
 8003356:	4804      	ldr	r0, [pc, #16]	; (8003368 <__io_putchar+0x20>)
 8003358:	f004 fc13 	bl	8007b82 <HAL_UART_Transmit>
  return ch;
 800335c:	687b      	ldr	r3, [r7, #4]
}
 800335e:	4618      	mov	r0, r3
 8003360:	3708      	adds	r7, #8
 8003362:	46bd      	mov	sp, r7
 8003364:	bd80      	pop	{r7, pc}
 8003366:	bf00      	nop
 8003368:	200005b8 	.word	0x200005b8

0800336c <HAL_UART_RxCpltCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800336c:	b580      	push	{r7, lr}
 800336e:	b082      	sub	sp, #8
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
        if(huart->Instance == huart3.Instance)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681a      	ldr	r2, [r3, #0]
 8003378:	4b13      	ldr	r3, [pc, #76]	; (80033c8 <HAL_UART_RxCpltCallback+0x5c>)
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	429a      	cmp	r2, r3
 800337e:	d11f      	bne.n	80033c0 <HAL_UART_RxCpltCallback+0x54>
        {
			if(data_rx == 'Z')
 8003380:	4b12      	ldr	r3, [pc, #72]	; (80033cc <HAL_UART_RxCpltCallback+0x60>)
 8003382:	781b      	ldrb	r3, [r3, #0]
 8003384:	2b5a      	cmp	r3, #90	; 0x5a
 8003386:	d103      	bne.n	8003390 <HAL_UART_RxCpltCallback+0x24>
			{
					huart_data.flag = 1;
 8003388:	4b11      	ldr	r3, [pc, #68]	; (80033d0 <HAL_UART_RxCpltCallback+0x64>)
 800338a:	2201      	movs	r2, #1
 800338c:	701a      	strb	r2, [r3, #0]
 800338e:	e012      	b.n	80033b6 <HAL_UART_RxCpltCallback+0x4a>
			}
			else
			{
				huart_data.buff[huart_data.index++] = data_rx;
 8003390:	4b0f      	ldr	r3, [pc, #60]	; (80033d0 <HAL_UART_RxCpltCallback+0x64>)
 8003392:	7fdb      	ldrb	r3, [r3, #31]
 8003394:	1c5a      	adds	r2, r3, #1
 8003396:	b2d1      	uxtb	r1, r2
 8003398:	4a0d      	ldr	r2, [pc, #52]	; (80033d0 <HAL_UART_RxCpltCallback+0x64>)
 800339a:	77d1      	strb	r1, [r2, #31]
 800339c:	4619      	mov	r1, r3
 800339e:	4b0b      	ldr	r3, [pc, #44]	; (80033cc <HAL_UART_RxCpltCallback+0x60>)
 80033a0:	781a      	ldrb	r2, [r3, #0]
 80033a2:	4b0b      	ldr	r3, [pc, #44]	; (80033d0 <HAL_UART_RxCpltCallback+0x64>)
 80033a4:	440b      	add	r3, r1
 80033a6:	705a      	strb	r2, [r3, #1]
				if(huart_data.index > MAX_BUFFER_SIZE)
 80033a8:	4b09      	ldr	r3, [pc, #36]	; (80033d0 <HAL_UART_RxCpltCallback+0x64>)
 80033aa:	7fdb      	ldrb	r3, [r3, #31]
 80033ac:	2b1e      	cmp	r3, #30
 80033ae:	d902      	bls.n	80033b6 <HAL_UART_RxCpltCallback+0x4a>
				{
					huart_data.index = 0;
 80033b0:	4b07      	ldr	r3, [pc, #28]	; (80033d0 <HAL_UART_RxCpltCallback+0x64>)
 80033b2:	2200      	movs	r2, #0
 80033b4:	77da      	strb	r2, [r3, #31]
				}
			}
			HAL_UART_Receive_IT(&huart3, &data_rx, 1);
 80033b6:	2201      	movs	r2, #1
 80033b8:	4904      	ldr	r1, [pc, #16]	; (80033cc <HAL_UART_RxCpltCallback+0x60>)
 80033ba:	4803      	ldr	r0, [pc, #12]	; (80033c8 <HAL_UART_RxCpltCallback+0x5c>)
 80033bc:	f004 fc73 	bl	8007ca6 <HAL_UART_Receive_IT>
        }
}
 80033c0:	bf00      	nop
 80033c2:	3708      	adds	r7, #8
 80033c4:	46bd      	mov	sp, r7
 80033c6:	bd80      	pop	{r7, pc}
 80033c8:	200005fc 	.word	0x200005fc
 80033cc:	2000064c 	.word	0x2000064c
 80033d0:	20000650 	.word	0x20000650

080033d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80033d4:	b5b0      	push	{r4, r5, r7, lr}
 80033d6:	b098      	sub	sp, #96	; 0x60
 80033d8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80033da:	f001 fc73 	bl	8004cc4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80033de:	f000 f937 	bl	8003650 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80033e2:	f000 fabf 	bl	8003964 <MX_GPIO_Init>
  MX_I2C1_Init();
 80033e6:	f000 f979 	bl	80036dc <MX_I2C1_Init>
  MX_TIM3_Init();
 80033ea:	f000 f9a5 	bl	8003738 <MX_TIM3_Init>
  MX_USART2_UART_Init();
 80033ee:	f000 fa65 	bl	80038bc <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 80033f2:	f000 fa8d 	bl	8003910 <MX_USART3_UART_Init>
  MX_USART1_UART_Init();
 80033f6:	f000 fa37 	bl	8003868 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 80033fa:	2201      	movs	r2, #1
 80033fc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003400:	487a      	ldr	r0, [pc, #488]	; (80035ec <main+0x218>)
 8003402:	f001 ffc9 	bl	8005398 <HAL_GPIO_WritePin>
  HAL_UART_Receive_IT(&huart3, &data_rx, 1);
 8003406:	2201      	movs	r2, #1
 8003408:	4979      	ldr	r1, [pc, #484]	; (80035f0 <main+0x21c>)
 800340a:	487a      	ldr	r0, [pc, #488]	; (80035f4 <main+0x220>)
 800340c:	f004 fc4b 	bl	8007ca6 <HAL_UART_Receive_IT>

  DWT_Init();
 8003410:	f7ff ff6e 	bl	80032f0 <DWT_Init>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8003414:	2100      	movs	r1, #0
 8003416:	4878      	ldr	r0, [pc, #480]	; (80035f8 <main+0x224>)
 8003418:	f003 fd02 	bl	8006e20 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 800341c:	2104      	movs	r1, #4
 800341e:	4876      	ldr	r0, [pc, #472]	; (80035f8 <main+0x224>)
 8003420:	f003 fcfe 	bl	8006e20 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8003424:	2108      	movs	r1, #8
 8003426:	4874      	ldr	r0, [pc, #464]	; (80035f8 <main+0x224>)
 8003428:	f003 fcfa 	bl	8006e20 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 800342c:	210c      	movs	r1, #12
 800342e:	4872      	ldr	r0, [pc, #456]	; (80035f8 <main+0x224>)
 8003430:	f003 fcf6 	bl	8006e20 <HAL_TIM_PWM_Start>

  // mpu raw
  MPU6050_Init(&hi2c1);
 8003434:	4871      	ldr	r0, [pc, #452]	; (80035fc <main+0x228>)
 8003436:	f7fd ff33 	bl	80012a0 <MPU6050_Init>
  myMpuConfig.Accel_Full_Scale = AFS_SEL_8g;
 800343a:	2302      	movs	r3, #2
 800343c:	f887 305a 	strb.w	r3, [r7, #90]	; 0x5a
  myMpuConfig.ClockSource = Internal_8MHz;
 8003440:	2300      	movs	r3, #0
 8003442:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58
  myMpuConfig.CONFIG_DLPF = DLPF_260A_256G_Hz;
 8003446:	2300      	movs	r3, #0
 8003448:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
  myMpuConfig.Gyro_Full_Scale = FS_SEL_2000;
 800344c:	2303      	movs	r3, #3
 800344e:	f887 3059 	strb.w	r3, [r7, #89]	; 0x59
  myMpuConfig.Sleep_Mode_Bit = 0; // 1: sleep mode; 0: normal mode
 8003452:	2300      	movs	r3, #0
 8003454:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  MPU6050_Config(&myMpuConfig);
 8003458:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800345c:	4618      	mov	r0, r3
 800345e:	f7fd ff73 	bl	8001348 <MPU6050_Config>
  Calibration(&offset, &status); // 5000ms
 8003462:	4967      	ldr	r1, [pc, #412]	; (8003600 <main+0x22c>)
 8003464:	4867      	ldr	r0, [pc, #412]	; (8003604 <main+0x230>)
 8003466:	f7fd fe53 	bl	8001110 <Calibration>

  //Calibration done
  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 800346a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800346e:	485f      	ldr	r0, [pc, #380]	; (80035ec <main+0x218>)
 8003470:	f001 ffaa 	bl	80053c8 <HAL_GPIO_TogglePin>
  HAL_Delay(300);
 8003474:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8003478:	f001 fc56 	bl	8004d28 <HAL_Delay>
  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 800347c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003480:	485a      	ldr	r0, [pc, #360]	; (80035ec <main+0x218>)
 8003482:	f001 ffa1 	bl	80053c8 <HAL_GPIO_TogglePin>
  HAL_Delay(300);
 8003486:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800348a:	f001 fc4d 	bl	8004d28 <HAL_Delay>
  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 800348e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003492:	4856      	ldr	r0, [pc, #344]	; (80035ec <main+0x218>)
 8003494:	f001 ff98 	bl	80053c8 <HAL_GPIO_TogglePin>
  HAL_Delay(300);
 8003498:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800349c:	f001 fc44 	bl	8004d28 <HAL_Delay>
  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 80034a0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80034a4:	4851      	ldr	r0, [pc, #324]	; (80035ec <main+0x218>)
 80034a6:	f001 ff8f 	bl	80053c8 <HAL_GPIO_TogglePin>
  HAL_Delay(300);
 80034aa:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80034ae:	f001 fc3b 	bl	8004d28 <HAL_Delay>
  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 80034b2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80034b6:	484d      	ldr	r0, [pc, #308]	; (80035ec <main+0x218>)
 80034b8:	f001 ff86 	bl	80053c8 <HAL_GPIO_TogglePin>
  HAL_Delay(300);
 80034bc:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80034c0:	f001 fc32 	bl	8004d28 <HAL_Delay>
  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 80034c4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80034c8:	4848      	ldr	r0, [pc, #288]	; (80035ec <main+0x218>)
 80034ca:	f001 ff7d 	bl	80053c8 <HAL_GPIO_TogglePin>
  HAL_Delay(300);
 80034ce:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80034d2:	f001 fc29 	bl	8004d28 <HAL_Delay>

  //GPS_Init();

  // pid
  sampling_timer = micros();
 80034d6:	f7ff ff21 	bl	800331c <micros>
 80034da:	4603      	mov	r3, r0
 80034dc:	461a      	mov	r2, r3
 80034de:	4b4a      	ldr	r3, [pc, #296]	; (8003608 <main+0x234>)
 80034e0:	601a      	str	r2, [r3, #0]
  qVol.q0 =  1.0f;
 80034e2:	4b4a      	ldr	r3, [pc, #296]	; (800360c <main+0x238>)
 80034e4:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80034e8:	601a      	str	r2, [r3, #0]
  qVol.q1 =  0.0f;
 80034ea:	4b48      	ldr	r3, [pc, #288]	; (800360c <main+0x238>)
 80034ec:	f04f 0200 	mov.w	r2, #0
 80034f0:	605a      	str	r2, [r3, #4]
  qVol.q2 =  0.0f;
 80034f2:	4b46      	ldr	r3, [pc, #280]	; (800360c <main+0x238>)
 80034f4:	f04f 0200 	mov.w	r2, #0
 80034f8:	609a      	str	r2, [r3, #8]
  qVol.q3 =  0.0f;
 80034fa:	4b44      	ldr	r3, [pc, #272]	; (800360c <main+0x238>)
 80034fc:	f04f 0200 	mov.w	r2, #0
 8003500:	60da      	str	r2, [r3, #12]
  pid.pid_d = 0;
 8003502:	4b43      	ldr	r3, [pc, #268]	; (8003610 <main+0x23c>)
 8003504:	f04f 0200 	mov.w	r2, #0
 8003508:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  pid.pid_i = 0;
 800350c:	4b40      	ldr	r3, [pc, #256]	; (8003610 <main+0x23c>)
 800350e:	f04f 0200 	mov.w	r2, #0
 8003512:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  pid.pid_p = 0;
 8003516:	4b3e      	ldr	r3, [pc, #248]	; (8003610 <main+0x23c>)
 8003518:	f04f 0200 	mov.w	r2, #0
 800351c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
//  pid.Kp_pitch = 3.501;
//  pid.Ki_pitch = 0.001;
//  pid.Kd_pitch = 0.4;

// 25/04: PID01 Balance P only
  pid.Kp_roll = 2.55;
 8003520:	4b3b      	ldr	r3, [pc, #236]	; (8003610 <main+0x23c>)
 8003522:	4a3c      	ldr	r2, [pc, #240]	; (8003614 <main+0x240>)
 8003524:	60da      	str	r2, [r3, #12]
  pid.Ki_roll = 0.008;
 8003526:	4b3a      	ldr	r3, [pc, #232]	; (8003610 <main+0x23c>)
 8003528:	4a3b      	ldr	r2, [pc, #236]	; (8003618 <main+0x244>)
 800352a:	611a      	str	r2, [r3, #16]
  pid.Kd_roll = 0.045;
 800352c:	4b38      	ldr	r3, [pc, #224]	; (8003610 <main+0x23c>)
 800352e:	4a3b      	ldr	r2, [pc, #236]	; (800361c <main+0x248>)
 8003530:	615a      	str	r2, [r3, #20]
//  pid.Kd_roll = 0.15;

//  ROL P 00.901 I 00.001 D 00.201 Z -> pid 1 truc
//  ROL P 01.250 I 00.001 D 00.221 Z -> P manh hon nhung dao dong hon.
//  ROL P 01.950 I 00.001 D 00.271 Z -> PID 2 truc
  pid.Kp_pitch = 3.6;//pid.Kp_roll / 2.0;
 8003532:	4b37      	ldr	r3, [pc, #220]	; (8003610 <main+0x23c>)
 8003534:	4a3a      	ldr	r2, [pc, #232]	; (8003620 <main+0x24c>)
 8003536:	619a      	str	r2, [r3, #24]
  pid.Ki_pitch = 0.0005;//pid.Ki_roll / 2.0;
 8003538:	4b35      	ldr	r3, [pc, #212]	; (8003610 <main+0x23c>)
 800353a:	4a3a      	ldr	r2, [pc, #232]	; (8003624 <main+0x250>)
 800353c:	61da      	str	r2, [r3, #28]
  pid.Kd_pitch = 0.075;//pid.Kd_roll / 2.0;
 800353e:	4b34      	ldr	r3, [pc, #208]	; (8003610 <main+0x23c>)
 8003540:	4a39      	ldr	r2, [pc, #228]	; (8003628 <main+0x254>)
 8003542:	621a      	str	r2, [r3, #32]

  pid.Kp_yaw = 0.65;
 8003544:	4b32      	ldr	r3, [pc, #200]	; (8003610 <main+0x23c>)
 8003546:	4a39      	ldr	r2, [pc, #228]	; (800362c <main+0x258>)
 8003548:	625a      	str	r2, [r3, #36]	; 0x24
  pid.Ki_yaw = 0.000001;
 800354a:	4b31      	ldr	r3, [pc, #196]	; (8003610 <main+0x23c>)
 800354c:	4a38      	ldr	r2, [pc, #224]	; (8003630 <main+0x25c>)
 800354e:	629a      	str	r2, [r3, #40]	; 0x28
  pid.Kd_yaw = 0.002;
 8003550:	4b2f      	ldr	r3, [pc, #188]	; (8003610 <main+0x23c>)
 8003552:	4a38      	ldr	r2, [pc, #224]	; (8003634 <main+0x260>)
 8003554:	62da      	str	r2, [r3, #44]	; 0x2c

  pid.time = HAL_GetTick(); //   time = millis(); on arduino
 8003556:	f001 fbdd 	bl	8004d14 <HAL_GetTick>
 800355a:	4603      	mov	r3, r0
 800355c:	4618      	mov	r0, r3
 800355e:	f7fc ff41 	bl	80003e4 <__aeabi_ui2d>
 8003562:	4602      	mov	r2, r0
 8003564:	460b      	mov	r3, r1
 8003566:	492a      	ldr	r1, [pc, #168]	; (8003610 <main+0x23c>)
 8003568:	e9c1 2324 	strd	r2, r3, [r1, #144]	; 0x90

//  HAL_Delay(5000);
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 800356c:	2201      	movs	r2, #1
 800356e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003572:	481e      	ldr	r0, [pc, #120]	; (80035ec <main+0x218>)
 8003574:	f001 ff10 	bl	8005398 <HAL_GPIO_WritePin>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8003578:	4b2f      	ldr	r3, [pc, #188]	; (8003638 <main+0x264>)
 800357a:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 800357e:	461d      	mov	r5, r3
 8003580:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003582:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003584:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003588:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800358c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003590:	2100      	movs	r1, #0
 8003592:	4618      	mov	r0, r3
 8003594:	f004 fffe 	bl	8008594 <osThreadCreate>
 8003598:	4603      	mov	r3, r0
 800359a:	4a28      	ldr	r2, [pc, #160]	; (800363c <main+0x268>)
 800359c:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask02 */
  osThreadDef(myTask02, StartTask02, osPriorityNormal, 0, 128);
 800359e:	4b28      	ldr	r3, [pc, #160]	; (8003640 <main+0x26c>)
 80035a0:	f107 0420 	add.w	r4, r7, #32
 80035a4:	461d      	mov	r5, r3
 80035a6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80035a8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80035aa:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80035ae:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask02Handle = osThreadCreate(osThread(myTask02), NULL);
 80035b2:	f107 0320 	add.w	r3, r7, #32
 80035b6:	2100      	movs	r1, #0
 80035b8:	4618      	mov	r0, r3
 80035ba:	f004 ffeb 	bl	8008594 <osThreadCreate>
 80035be:	4603      	mov	r3, r0
 80035c0:	4a20      	ldr	r2, [pc, #128]	; (8003644 <main+0x270>)
 80035c2:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask03 */
  osThreadDef(myTask03, StartTask03, osPriorityNormal, 0, 128);
 80035c4:	4b20      	ldr	r3, [pc, #128]	; (8003648 <main+0x274>)
 80035c6:	1d3c      	adds	r4, r7, #4
 80035c8:	461d      	mov	r5, r3
 80035ca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80035cc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80035ce:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80035d2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask03Handle = osThreadCreate(osThread(myTask03), NULL);
 80035d6:	1d3b      	adds	r3, r7, #4
 80035d8:	2100      	movs	r1, #0
 80035da:	4618      	mov	r0, r3
 80035dc:	f004 ffda 	bl	8008594 <osThreadCreate>
 80035e0:	4603      	mov	r3, r0
 80035e2:	4a1a      	ldr	r2, [pc, #104]	; (800364c <main+0x278>)
 80035e4:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80035e6:	f004 ffce 	bl	8008586 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80035ea:	e7fe      	b.n	80035ea <main+0x216>
 80035ec:	40011000 	.word	0x40011000
 80035f0:	2000064c 	.word	0x2000064c
 80035f4:	200005fc 	.word	0x200005fc
 80035f8:	2000052c 	.word	0x2000052c
 80035fc:	200004d8 	.word	0x200004d8
 8003600:	200006ac 	.word	0x200006ac
 8003604:	20000688 	.word	0x20000688
 8003608:	200006b0 	.word	0x200006b0
 800360c:	200006e0 	.word	0x200006e0
 8003610:	20000700 	.word	0x20000700
 8003614:	40233333 	.word	0x40233333
 8003618:	3c03126f 	.word	0x3c03126f
 800361c:	3d3851ec 	.word	0x3d3851ec
 8003620:	40666666 	.word	0x40666666
 8003624:	3a03126f 	.word	0x3a03126f
 8003628:	3d99999a 	.word	0x3d99999a
 800362c:	3f266666 	.word	0x3f266666
 8003630:	358637bd 	.word	0x358637bd
 8003634:	3b03126f 	.word	0x3b03126f
 8003638:	0800d1c4 	.word	0x0800d1c4
 800363c:	20000640 	.word	0x20000640
 8003640:	0800d1e0 	.word	0x0800d1e0
 8003644:	20000644 	.word	0x20000644
 8003648:	0800d1fc 	.word	0x0800d1fc
 800364c:	20000648 	.word	0x20000648

08003650 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003650:	b580      	push	{r7, lr}
 8003652:	b090      	sub	sp, #64	; 0x40
 8003654:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003656:	f107 0318 	add.w	r3, r7, #24
 800365a:	2228      	movs	r2, #40	; 0x28
 800365c:	2100      	movs	r1, #0
 800365e:	4618      	mov	r0, r3
 8003660:	f006 f9b2 	bl	80099c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003664:	1d3b      	adds	r3, r7, #4
 8003666:	2200      	movs	r2, #0
 8003668:	601a      	str	r2, [r3, #0]
 800366a:	605a      	str	r2, [r3, #4]
 800366c:	609a      	str	r2, [r3, #8]
 800366e:	60da      	str	r2, [r3, #12]
 8003670:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003672:	2301      	movs	r3, #1
 8003674:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003676:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800367a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800367c:	2300      	movs	r3, #0
 800367e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003680:	2301      	movs	r3, #1
 8003682:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003684:	2302      	movs	r3, #2
 8003686:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003688:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800368c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800368e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8003692:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003694:	f107 0318 	add.w	r3, r7, #24
 8003698:	4618      	mov	r0, r3
 800369a:	f002 fe7d 	bl	8006398 <HAL_RCC_OscConfig>
 800369e:	4603      	mov	r3, r0
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d001      	beq.n	80036a8 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80036a4:	f000 ff9a 	bl	80045dc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80036a8:	230f      	movs	r3, #15
 80036aa:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80036ac:	2302      	movs	r3, #2
 80036ae:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80036b0:	2300      	movs	r3, #0
 80036b2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80036b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80036b8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80036ba:	2300      	movs	r3, #0
 80036bc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80036be:	1d3b      	adds	r3, r7, #4
 80036c0:	2102      	movs	r1, #2
 80036c2:	4618      	mov	r0, r3
 80036c4:	f003 f8ea 	bl	800689c <HAL_RCC_ClockConfig>
 80036c8:	4603      	mov	r3, r0
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d001      	beq.n	80036d2 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80036ce:	f000 ff85 	bl	80045dc <Error_Handler>
  }
}
 80036d2:	bf00      	nop
 80036d4:	3740      	adds	r7, #64	; 0x40
 80036d6:	46bd      	mov	sp, r7
 80036d8:	bd80      	pop	{r7, pc}
	...

080036dc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80036e0:	4b12      	ldr	r3, [pc, #72]	; (800372c <MX_I2C1_Init+0x50>)
 80036e2:	4a13      	ldr	r2, [pc, #76]	; (8003730 <MX_I2C1_Init+0x54>)
 80036e4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80036e6:	4b11      	ldr	r3, [pc, #68]	; (800372c <MX_I2C1_Init+0x50>)
 80036e8:	4a12      	ldr	r2, [pc, #72]	; (8003734 <MX_I2C1_Init+0x58>)
 80036ea:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80036ec:	4b0f      	ldr	r3, [pc, #60]	; (800372c <MX_I2C1_Init+0x50>)
 80036ee:	2200      	movs	r2, #0
 80036f0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80036f2:	4b0e      	ldr	r3, [pc, #56]	; (800372c <MX_I2C1_Init+0x50>)
 80036f4:	2200      	movs	r2, #0
 80036f6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80036f8:	4b0c      	ldr	r3, [pc, #48]	; (800372c <MX_I2C1_Init+0x50>)
 80036fa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80036fe:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003700:	4b0a      	ldr	r3, [pc, #40]	; (800372c <MX_I2C1_Init+0x50>)
 8003702:	2200      	movs	r2, #0
 8003704:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8003706:	4b09      	ldr	r3, [pc, #36]	; (800372c <MX_I2C1_Init+0x50>)
 8003708:	2200      	movs	r2, #0
 800370a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800370c:	4b07      	ldr	r3, [pc, #28]	; (800372c <MX_I2C1_Init+0x50>)
 800370e:	2200      	movs	r2, #0
 8003710:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003712:	4b06      	ldr	r3, [pc, #24]	; (800372c <MX_I2C1_Init+0x50>)
 8003714:	2200      	movs	r2, #0
 8003716:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003718:	4804      	ldr	r0, [pc, #16]	; (800372c <MX_I2C1_Init+0x50>)
 800371a:	f001 fe6f 	bl	80053fc <HAL_I2C_Init>
 800371e:	4603      	mov	r3, r0
 8003720:	2b00      	cmp	r3, #0
 8003722:	d001      	beq.n	8003728 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8003724:	f000 ff5a 	bl	80045dc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003728:	bf00      	nop
 800372a:	bd80      	pop	{r7, pc}
 800372c:	200004d8 	.word	0x200004d8
 8003730:	40005400 	.word	0x40005400
 8003734:	000186a0 	.word	0x000186a0

08003738 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8003738:	b580      	push	{r7, lr}
 800373a:	b08e      	sub	sp, #56	; 0x38
 800373c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800373e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003742:	2200      	movs	r2, #0
 8003744:	601a      	str	r2, [r3, #0]
 8003746:	605a      	str	r2, [r3, #4]
 8003748:	609a      	str	r2, [r3, #8]
 800374a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800374c:	f107 0320 	add.w	r3, r7, #32
 8003750:	2200      	movs	r2, #0
 8003752:	601a      	str	r2, [r3, #0]
 8003754:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003756:	1d3b      	adds	r3, r7, #4
 8003758:	2200      	movs	r2, #0
 800375a:	601a      	str	r2, [r3, #0]
 800375c:	605a      	str	r2, [r3, #4]
 800375e:	609a      	str	r2, [r3, #8]
 8003760:	60da      	str	r2, [r3, #12]
 8003762:	611a      	str	r2, [r3, #16]
 8003764:	615a      	str	r2, [r3, #20]
 8003766:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003768:	4b3d      	ldr	r3, [pc, #244]	; (8003860 <MX_TIM3_Init+0x128>)
 800376a:	4a3e      	ldr	r2, [pc, #248]	; (8003864 <MX_TIM3_Init+0x12c>)
 800376c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1439;
 800376e:	4b3c      	ldr	r3, [pc, #240]	; (8003860 <MX_TIM3_Init+0x128>)
 8003770:	f240 529f 	movw	r2, #1439	; 0x59f
 8003774:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003776:	4b3a      	ldr	r3, [pc, #232]	; (8003860 <MX_TIM3_Init+0x128>)
 8003778:	2200      	movs	r2, #0
 800377a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 800377c:	4b38      	ldr	r3, [pc, #224]	; (8003860 <MX_TIM3_Init+0x128>)
 800377e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003782:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003784:	4b36      	ldr	r3, [pc, #216]	; (8003860 <MX_TIM3_Init+0x128>)
 8003786:	2200      	movs	r2, #0
 8003788:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800378a:	4b35      	ldr	r3, [pc, #212]	; (8003860 <MX_TIM3_Init+0x128>)
 800378c:	2200      	movs	r2, #0
 800378e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003790:	4833      	ldr	r0, [pc, #204]	; (8003860 <MX_TIM3_Init+0x128>)
 8003792:	f003 fa4b 	bl	8006c2c <HAL_TIM_Base_Init>
 8003796:	4603      	mov	r3, r0
 8003798:	2b00      	cmp	r3, #0
 800379a:	d001      	beq.n	80037a0 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 800379c:	f000 ff1e 	bl	80045dc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80037a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80037a4:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80037a6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80037aa:	4619      	mov	r1, r3
 80037ac:	482c      	ldr	r0, [pc, #176]	; (8003860 <MX_TIM3_Init+0x128>)
 80037ae:	f003 fd9f 	bl	80072f0 <HAL_TIM_ConfigClockSource>
 80037b2:	4603      	mov	r3, r0
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d001      	beq.n	80037bc <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 80037b8:	f000 ff10 	bl	80045dc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80037bc:	4828      	ldr	r0, [pc, #160]	; (8003860 <MX_TIM3_Init+0x128>)
 80037be:	f003 fad7 	bl	8006d70 <HAL_TIM_PWM_Init>
 80037c2:	4603      	mov	r3, r0
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d001      	beq.n	80037cc <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 80037c8:	f000 ff08 	bl	80045dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80037cc:	2300      	movs	r3, #0
 80037ce:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80037d0:	2300      	movs	r3, #0
 80037d2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80037d4:	f107 0320 	add.w	r3, r7, #32
 80037d8:	4619      	mov	r1, r3
 80037da:	4821      	ldr	r0, [pc, #132]	; (8003860 <MX_TIM3_Init+0x128>)
 80037dc:	f004 f914 	bl	8007a08 <HAL_TIMEx_MasterConfigSynchronization>
 80037e0:	4603      	mov	r3, r0
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d001      	beq.n	80037ea <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80037e6:	f000 fef9 	bl	80045dc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80037ea:	2360      	movs	r3, #96	; 0x60
 80037ec:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80037ee:	2300      	movs	r3, #0
 80037f0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80037f2:	2300      	movs	r3, #0
 80037f4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80037f6:	2300      	movs	r3, #0
 80037f8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80037fa:	1d3b      	adds	r3, r7, #4
 80037fc:	2200      	movs	r2, #0
 80037fe:	4619      	mov	r1, r3
 8003800:	4817      	ldr	r0, [pc, #92]	; (8003860 <MX_TIM3_Init+0x128>)
 8003802:	f003 fcb7 	bl	8007174 <HAL_TIM_PWM_ConfigChannel>
 8003806:	4603      	mov	r3, r0
 8003808:	2b00      	cmp	r3, #0
 800380a:	d001      	beq.n	8003810 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 800380c:	f000 fee6 	bl	80045dc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003810:	1d3b      	adds	r3, r7, #4
 8003812:	2204      	movs	r2, #4
 8003814:	4619      	mov	r1, r3
 8003816:	4812      	ldr	r0, [pc, #72]	; (8003860 <MX_TIM3_Init+0x128>)
 8003818:	f003 fcac 	bl	8007174 <HAL_TIM_PWM_ConfigChannel>
 800381c:	4603      	mov	r3, r0
 800381e:	2b00      	cmp	r3, #0
 8003820:	d001      	beq.n	8003826 <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 8003822:	f000 fedb 	bl	80045dc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003826:	1d3b      	adds	r3, r7, #4
 8003828:	2208      	movs	r2, #8
 800382a:	4619      	mov	r1, r3
 800382c:	480c      	ldr	r0, [pc, #48]	; (8003860 <MX_TIM3_Init+0x128>)
 800382e:	f003 fca1 	bl	8007174 <HAL_TIM_PWM_ConfigChannel>
 8003832:	4603      	mov	r3, r0
 8003834:	2b00      	cmp	r3, #0
 8003836:	d001      	beq.n	800383c <MX_TIM3_Init+0x104>
  {
    Error_Handler();
 8003838:	f000 fed0 	bl	80045dc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800383c:	1d3b      	adds	r3, r7, #4
 800383e:	220c      	movs	r2, #12
 8003840:	4619      	mov	r1, r3
 8003842:	4807      	ldr	r0, [pc, #28]	; (8003860 <MX_TIM3_Init+0x128>)
 8003844:	f003 fc96 	bl	8007174 <HAL_TIM_PWM_ConfigChannel>
 8003848:	4603      	mov	r3, r0
 800384a:	2b00      	cmp	r3, #0
 800384c:	d001      	beq.n	8003852 <MX_TIM3_Init+0x11a>
  {
    Error_Handler();
 800384e:	f000 fec5 	bl	80045dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8003852:	4803      	ldr	r0, [pc, #12]	; (8003860 <MX_TIM3_Init+0x128>)
 8003854:	f000 ff76 	bl	8004744 <HAL_TIM_MspPostInit>

}
 8003858:	bf00      	nop
 800385a:	3738      	adds	r7, #56	; 0x38
 800385c:	46bd      	mov	sp, r7
 800385e:	bd80      	pop	{r7, pc}
 8003860:	2000052c 	.word	0x2000052c
 8003864:	40000400 	.word	0x40000400

08003868 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8003868:	b580      	push	{r7, lr}
 800386a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800386c:	4b11      	ldr	r3, [pc, #68]	; (80038b4 <MX_USART1_UART_Init+0x4c>)
 800386e:	4a12      	ldr	r2, [pc, #72]	; (80038b8 <MX_USART1_UART_Init+0x50>)
 8003870:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8003872:	4b10      	ldr	r3, [pc, #64]	; (80038b4 <MX_USART1_UART_Init+0x4c>)
 8003874:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8003878:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800387a:	4b0e      	ldr	r3, [pc, #56]	; (80038b4 <MX_USART1_UART_Init+0x4c>)
 800387c:	2200      	movs	r2, #0
 800387e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003880:	4b0c      	ldr	r3, [pc, #48]	; (80038b4 <MX_USART1_UART_Init+0x4c>)
 8003882:	2200      	movs	r2, #0
 8003884:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003886:	4b0b      	ldr	r3, [pc, #44]	; (80038b4 <MX_USART1_UART_Init+0x4c>)
 8003888:	2200      	movs	r2, #0
 800388a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800388c:	4b09      	ldr	r3, [pc, #36]	; (80038b4 <MX_USART1_UART_Init+0x4c>)
 800388e:	220c      	movs	r2, #12
 8003890:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003892:	4b08      	ldr	r3, [pc, #32]	; (80038b4 <MX_USART1_UART_Init+0x4c>)
 8003894:	2200      	movs	r2, #0
 8003896:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003898:	4b06      	ldr	r3, [pc, #24]	; (80038b4 <MX_USART1_UART_Init+0x4c>)
 800389a:	2200      	movs	r2, #0
 800389c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800389e:	4805      	ldr	r0, [pc, #20]	; (80038b4 <MX_USART1_UART_Init+0x4c>)
 80038a0:	f004 f922 	bl	8007ae8 <HAL_UART_Init>
 80038a4:	4603      	mov	r3, r0
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d001      	beq.n	80038ae <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80038aa:	f000 fe97 	bl	80045dc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80038ae:	bf00      	nop
 80038b0:	bd80      	pop	{r7, pc}
 80038b2:	bf00      	nop
 80038b4:	20000574 	.word	0x20000574
 80038b8:	40013800 	.word	0x40013800

080038bc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80038c0:	4b11      	ldr	r3, [pc, #68]	; (8003908 <MX_USART2_UART_Init+0x4c>)
 80038c2:	4a12      	ldr	r2, [pc, #72]	; (800390c <MX_USART2_UART_Init+0x50>)
 80038c4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80038c6:	4b10      	ldr	r3, [pc, #64]	; (8003908 <MX_USART2_UART_Init+0x4c>)
 80038c8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80038cc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80038ce:	4b0e      	ldr	r3, [pc, #56]	; (8003908 <MX_USART2_UART_Init+0x4c>)
 80038d0:	2200      	movs	r2, #0
 80038d2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80038d4:	4b0c      	ldr	r3, [pc, #48]	; (8003908 <MX_USART2_UART_Init+0x4c>)
 80038d6:	2200      	movs	r2, #0
 80038d8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80038da:	4b0b      	ldr	r3, [pc, #44]	; (8003908 <MX_USART2_UART_Init+0x4c>)
 80038dc:	2200      	movs	r2, #0
 80038de:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80038e0:	4b09      	ldr	r3, [pc, #36]	; (8003908 <MX_USART2_UART_Init+0x4c>)
 80038e2:	220c      	movs	r2, #12
 80038e4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80038e6:	4b08      	ldr	r3, [pc, #32]	; (8003908 <MX_USART2_UART_Init+0x4c>)
 80038e8:	2200      	movs	r2, #0
 80038ea:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80038ec:	4b06      	ldr	r3, [pc, #24]	; (8003908 <MX_USART2_UART_Init+0x4c>)
 80038ee:	2200      	movs	r2, #0
 80038f0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80038f2:	4805      	ldr	r0, [pc, #20]	; (8003908 <MX_USART2_UART_Init+0x4c>)
 80038f4:	f004 f8f8 	bl	8007ae8 <HAL_UART_Init>
 80038f8:	4603      	mov	r3, r0
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d001      	beq.n	8003902 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80038fe:	f000 fe6d 	bl	80045dc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003902:	bf00      	nop
 8003904:	bd80      	pop	{r7, pc}
 8003906:	bf00      	nop
 8003908:	200005b8 	.word	0x200005b8
 800390c:	40004400 	.word	0x40004400

08003910 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8003910:	b580      	push	{r7, lr}
 8003912:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8003914:	4b11      	ldr	r3, [pc, #68]	; (800395c <MX_USART3_UART_Init+0x4c>)
 8003916:	4a12      	ldr	r2, [pc, #72]	; (8003960 <MX_USART3_UART_Init+0x50>)
 8003918:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800391a:	4b10      	ldr	r3, [pc, #64]	; (800395c <MX_USART3_UART_Init+0x4c>)
 800391c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003920:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8003922:	4b0e      	ldr	r3, [pc, #56]	; (800395c <MX_USART3_UART_Init+0x4c>)
 8003924:	2200      	movs	r2, #0
 8003926:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8003928:	4b0c      	ldr	r3, [pc, #48]	; (800395c <MX_USART3_UART_Init+0x4c>)
 800392a:	2200      	movs	r2, #0
 800392c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800392e:	4b0b      	ldr	r3, [pc, #44]	; (800395c <MX_USART3_UART_Init+0x4c>)
 8003930:	2200      	movs	r2, #0
 8003932:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8003934:	4b09      	ldr	r3, [pc, #36]	; (800395c <MX_USART3_UART_Init+0x4c>)
 8003936:	220c      	movs	r2, #12
 8003938:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800393a:	4b08      	ldr	r3, [pc, #32]	; (800395c <MX_USART3_UART_Init+0x4c>)
 800393c:	2200      	movs	r2, #0
 800393e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8003940:	4b06      	ldr	r3, [pc, #24]	; (800395c <MX_USART3_UART_Init+0x4c>)
 8003942:	2200      	movs	r2, #0
 8003944:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8003946:	4805      	ldr	r0, [pc, #20]	; (800395c <MX_USART3_UART_Init+0x4c>)
 8003948:	f004 f8ce 	bl	8007ae8 <HAL_UART_Init>
 800394c:	4603      	mov	r3, r0
 800394e:	2b00      	cmp	r3, #0
 8003950:	d001      	beq.n	8003956 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8003952:	f000 fe43 	bl	80045dc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8003956:	bf00      	nop
 8003958:	bd80      	pop	{r7, pc}
 800395a:	bf00      	nop
 800395c:	200005fc 	.word	0x200005fc
 8003960:	40004800 	.word	0x40004800

08003964 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003964:	b580      	push	{r7, lr}
 8003966:	b088      	sub	sp, #32
 8003968:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800396a:	f107 0310 	add.w	r3, r7, #16
 800396e:	2200      	movs	r2, #0
 8003970:	601a      	str	r2, [r3, #0]
 8003972:	605a      	str	r2, [r3, #4]
 8003974:	609a      	str	r2, [r3, #8]
 8003976:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003978:	4b24      	ldr	r3, [pc, #144]	; (8003a0c <MX_GPIO_Init+0xa8>)
 800397a:	699b      	ldr	r3, [r3, #24]
 800397c:	4a23      	ldr	r2, [pc, #140]	; (8003a0c <MX_GPIO_Init+0xa8>)
 800397e:	f043 0310 	orr.w	r3, r3, #16
 8003982:	6193      	str	r3, [r2, #24]
 8003984:	4b21      	ldr	r3, [pc, #132]	; (8003a0c <MX_GPIO_Init+0xa8>)
 8003986:	699b      	ldr	r3, [r3, #24]
 8003988:	f003 0310 	and.w	r3, r3, #16
 800398c:	60fb      	str	r3, [r7, #12]
 800398e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003990:	4b1e      	ldr	r3, [pc, #120]	; (8003a0c <MX_GPIO_Init+0xa8>)
 8003992:	699b      	ldr	r3, [r3, #24]
 8003994:	4a1d      	ldr	r2, [pc, #116]	; (8003a0c <MX_GPIO_Init+0xa8>)
 8003996:	f043 0320 	orr.w	r3, r3, #32
 800399a:	6193      	str	r3, [r2, #24]
 800399c:	4b1b      	ldr	r3, [pc, #108]	; (8003a0c <MX_GPIO_Init+0xa8>)
 800399e:	699b      	ldr	r3, [r3, #24]
 80039a0:	f003 0320 	and.w	r3, r3, #32
 80039a4:	60bb      	str	r3, [r7, #8]
 80039a6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80039a8:	4b18      	ldr	r3, [pc, #96]	; (8003a0c <MX_GPIO_Init+0xa8>)
 80039aa:	699b      	ldr	r3, [r3, #24]
 80039ac:	4a17      	ldr	r2, [pc, #92]	; (8003a0c <MX_GPIO_Init+0xa8>)
 80039ae:	f043 0304 	orr.w	r3, r3, #4
 80039b2:	6193      	str	r3, [r2, #24]
 80039b4:	4b15      	ldr	r3, [pc, #84]	; (8003a0c <MX_GPIO_Init+0xa8>)
 80039b6:	699b      	ldr	r3, [r3, #24]
 80039b8:	f003 0304 	and.w	r3, r3, #4
 80039bc:	607b      	str	r3, [r7, #4]
 80039be:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80039c0:	4b12      	ldr	r3, [pc, #72]	; (8003a0c <MX_GPIO_Init+0xa8>)
 80039c2:	699b      	ldr	r3, [r3, #24]
 80039c4:	4a11      	ldr	r2, [pc, #68]	; (8003a0c <MX_GPIO_Init+0xa8>)
 80039c6:	f043 0308 	orr.w	r3, r3, #8
 80039ca:	6193      	str	r3, [r2, #24]
 80039cc:	4b0f      	ldr	r3, [pc, #60]	; (8003a0c <MX_GPIO_Init+0xa8>)
 80039ce:	699b      	ldr	r3, [r3, #24]
 80039d0:	f003 0308 	and.w	r3, r3, #8
 80039d4:	603b      	str	r3, [r7, #0]
 80039d6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80039d8:	2200      	movs	r2, #0
 80039da:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80039de:	480c      	ldr	r0, [pc, #48]	; (8003a10 <MX_GPIO_Init+0xac>)
 80039e0:	f001 fcda 	bl	8005398 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80039e4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80039e8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80039ea:	2301      	movs	r3, #1
 80039ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039ee:	2300      	movs	r3, #0
 80039f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80039f2:	2302      	movs	r3, #2
 80039f4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80039f6:	f107 0310 	add.w	r3, r7, #16
 80039fa:	4619      	mov	r1, r3
 80039fc:	4804      	ldr	r0, [pc, #16]	; (8003a10 <MX_GPIO_Init+0xac>)
 80039fe:	f001 fb47 	bl	8005090 <HAL_GPIO_Init>

}
 8003a02:	bf00      	nop
 8003a04:	3720      	adds	r7, #32
 8003a06:	46bd      	mov	sp, r7
 8003a08:	bd80      	pop	{r7, pc}
 8003a0a:	bf00      	nop
 8003a0c:	40021000 	.word	0x40021000
 8003a10:	40011000 	.word	0x40011000

08003a14 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8003a14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003a16:	b08f      	sub	sp, #60	; 0x3c
 8003a18:	af0c      	add	r7, sp, #48	; 0x30
 8003a1a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
		  MPU6050_Get_Accel_RawData(&myAccelRaw);
 8003a1c:	484f      	ldr	r0, [pc, #316]	; (8003b5c <StartDefaultTask+0x148>)
 8003a1e:	f7fd fd49 	bl	80014b4 <MPU6050_Get_Accel_RawData>
		  MPU6050_Get_Gyro_RawData(&myGyroRaw);
 8003a22:	484f      	ldr	r0, [pc, #316]	; (8003b60 <StartDefaultTask+0x14c>)
 8003a24:	f7fd fdac 	bl	8001580 <MPU6050_Get_Gyro_RawData>
		  //MPU6050_Get_Mag_RawData(&myMagRaw);
		  updateQuaternion(myAccelRaw, myGyroRaw, myMagRaw,offset, &upQua);
 8003a28:	4b4d      	ldr	r3, [pc, #308]	; (8003b60 <StartDefaultTask+0x14c>)
 8003a2a:	603b      	str	r3, [r7, #0]
 8003a2c:	4e4b      	ldr	r6, [pc, #300]	; (8003b5c <StartDefaultTask+0x148>)
 8003a2e:	4b4d      	ldr	r3, [pc, #308]	; (8003b64 <StartDefaultTask+0x150>)
 8003a30:	930b      	str	r3, [sp, #44]	; 0x2c
 8003a32:	4b4d      	ldr	r3, [pc, #308]	; (8003b68 <StartDefaultTask+0x154>)
 8003a34:	ac02      	add	r4, sp, #8
 8003a36:	461d      	mov	r5, r3
 8003a38:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003a3a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003a3c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003a3e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003a40:	682b      	ldr	r3, [r5, #0]
 8003a42:	6023      	str	r3, [r4, #0]
 8003a44:	4a49      	ldr	r2, [pc, #292]	; (8003b6c <StartDefaultTask+0x158>)
 8003a46:	466b      	mov	r3, sp
 8003a48:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003a4c:	6018      	str	r0, [r3, #0]
 8003a4e:	3304      	adds	r3, #4
 8003a50:	8019      	strh	r1, [r3, #0]
 8003a52:	683b      	ldr	r3, [r7, #0]
 8003a54:	cb0c      	ldmia	r3, {r2, r3}
 8003a56:	e896 0003 	ldmia.w	r6, {r0, r1}
 8003a5a:	f7fd fded 	bl	8001638 <updateQuaternion>

		  Now = micros();
 8003a5e:	f7ff fc5d 	bl	800331c <micros>
 8003a62:	4603      	mov	r3, r0
 8003a64:	4a42      	ldr	r2, [pc, #264]	; (8003b70 <StartDefaultTask+0x15c>)
 8003a66:	6013      	str	r3, [r2, #0]
		  if (Now < lastUpdate)
 8003a68:	4b41      	ldr	r3, [pc, #260]	; (8003b70 <StartDefaultTask+0x15c>)
 8003a6a:	681a      	ldr	r2, [r3, #0]
 8003a6c:	4b41      	ldr	r3, [pc, #260]	; (8003b74 <StartDefaultTask+0x160>)
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	429a      	cmp	r2, r3
 8003a72:	d204      	bcs.n	8003a7e <StartDefaultTask+0x6a>
			  {
		  //	      sampleFreq = 1582;
			  sampleFreq = last_sampleFreq;
 8003a74:	4b40      	ldr	r3, [pc, #256]	; (8003b78 <StartDefaultTask+0x164>)
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	4a40      	ldr	r2, [pc, #256]	; (8003b7c <StartDefaultTask+0x168>)
 8003a7a:	6013      	str	r3, [r2, #0]
 8003a7c:	e010      	b.n	8003aa0 <StartDefaultTask+0x8c>
			  }
		  else
			  sampleFreq = (1000000.0f / (Now - lastUpdate)); // set integration time by time elapsed since last filter update
 8003a7e:	4b3c      	ldr	r3, [pc, #240]	; (8003b70 <StartDefaultTask+0x15c>)
 8003a80:	681a      	ldr	r2, [r3, #0]
 8003a82:	4b3c      	ldr	r3, [pc, #240]	; (8003b74 <StartDefaultTask+0x160>)
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	1ad3      	subs	r3, r2, r3
 8003a88:	4618      	mov	r0, r3
 8003a8a:	f7fd f903 	bl	8000c94 <__aeabi_ui2f>
 8003a8e:	4603      	mov	r3, r0
 8003a90:	4619      	mov	r1, r3
 8003a92:	483b      	ldr	r0, [pc, #236]	; (8003b80 <StartDefaultTask+0x16c>)
 8003a94:	f7fd fa0a 	bl	8000eac <__aeabi_fdiv>
 8003a98:	4603      	mov	r3, r0
 8003a9a:	461a      	mov	r2, r3
 8003a9c:	4b37      	ldr	r3, [pc, #220]	; (8003b7c <StartDefaultTask+0x168>)
 8003a9e:	601a      	str	r2, [r3, #0]

		  lastUpdate = Now;//	  if (Now == 25000000)
 8003aa0:	4b33      	ldr	r3, [pc, #204]	; (8003b70 <StartDefaultTask+0x15c>)
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	4a33      	ldr	r2, [pc, #204]	; (8003b74 <StartDefaultTask+0x160>)
 8003aa6:	6013      	str	r3, [r2, #0]
		  last_sampleFreq = sampleFreq;
 8003aa8:	4b34      	ldr	r3, [pc, #208]	; (8003b7c <StartDefaultTask+0x168>)
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	4a32      	ldr	r2, [pc, #200]	; (8003b78 <StartDefaultTask+0x164>)
 8003aae:	6013      	str	r3, [r2, #0]

		  //MahonyAHRSupdateIMU(upQua, sampleFreq, &qVol);
		  //sampleFreq
		  MahonyAHRSupdate(upQua, sampleFreq, &qVol);
 8003ab0:	4b32      	ldr	r3, [pc, #200]	; (8003b7c <StartDefaultTask+0x168>)
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	4e2b      	ldr	r6, [pc, #172]	; (8003b64 <StartDefaultTask+0x150>)
 8003ab6:	4a33      	ldr	r2, [pc, #204]	; (8003b84 <StartDefaultTask+0x170>)
 8003ab8:	9206      	str	r2, [sp, #24]
 8003aba:	9305      	str	r3, [sp, #20]
 8003abc:	466d      	mov	r5, sp
 8003abe:	f106 0410 	add.w	r4, r6, #16
 8003ac2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003ac4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003ac6:	6823      	ldr	r3, [r4, #0]
 8003ac8:	602b      	str	r3, [r5, #0]
 8003aca:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8003ace:	f7fe fe3b 	bl	8002748 <MahonyAHRSupdate>

		  //last_yaw = rpy.yaw;
		  mpu6050_getRollPitchYaw(qVol, &rpy);
 8003ad2:	4b2c      	ldr	r3, [pc, #176]	; (8003b84 <StartDefaultTask+0x170>)
 8003ad4:	4a2c      	ldr	r2, [pc, #176]	; (8003b88 <StartDefaultTask+0x174>)
 8003ad6:	9200      	str	r2, [sp, #0]
 8003ad8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003ada:	f7fe f9b9 	bl	8001e50 <mpu6050_getRollPitchYaw>
//		  if(abs(rpy.yaw - last_yaw) < 1)
//			  rpy.yaw = rpy.yaw - (rpy.yaw - last_yaw);

		  PID(&rpy, &pid, 1, Init_CCR, desired_roll_angle, desired_pitch_angle, desired_yaw_angle); // roll
 8003ade:	4b2b      	ldr	r3, [pc, #172]	; (8003b8c <StartDefaultTask+0x178>)
 8003ae0:	881b      	ldrh	r3, [r3, #0]
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	4b2a      	ldr	r3, [pc, #168]	; (8003b90 <StartDefaultTask+0x17c>)
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	4a2a      	ldr	r2, [pc, #168]	; (8003b94 <StartDefaultTask+0x180>)
 8003aea:	6812      	ldr	r2, [r2, #0]
 8003aec:	492a      	ldr	r1, [pc, #168]	; (8003b98 <StartDefaultTask+0x184>)
 8003aee:	6809      	ldr	r1, [r1, #0]
 8003af0:	9102      	str	r1, [sp, #8]
 8003af2:	9201      	str	r2, [sp, #4]
 8003af4:	9300      	str	r3, [sp, #0]
 8003af6:	4603      	mov	r3, r0
 8003af8:	2201      	movs	r2, #1
 8003afa:	4928      	ldr	r1, [pc, #160]	; (8003b9c <StartDefaultTask+0x188>)
 8003afc:	4822      	ldr	r0, [pc, #136]	; (8003b88 <StartDefaultTask+0x174>)
 8003afe:	f7fe fb3b 	bl	8002178 <PID>

		  LF_1_wing = (pid.pwm_LF_1)/20;
 8003b02:	4b26      	ldr	r3, [pc, #152]	; (8003b9c <StartDefaultTask+0x188>)
 8003b04:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8003b08:	4925      	ldr	r1, [pc, #148]	; (8003ba0 <StartDefaultTask+0x18c>)
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	f7fd f9ce 	bl	8000eac <__aeabi_fdiv>
 8003b10:	4603      	mov	r3, r0
 8003b12:	461a      	mov	r2, r3
 8003b14:	4b23      	ldr	r3, [pc, #140]	; (8003ba4 <StartDefaultTask+0x190>)
 8003b16:	601a      	str	r2, [r3, #0]
		  RF_2_wing = (pid.pwm_RF_2)/20;
 8003b18:	4b20      	ldr	r3, [pc, #128]	; (8003b9c <StartDefaultTask+0x188>)
 8003b1a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003b1e:	4920      	ldr	r1, [pc, #128]	; (8003ba0 <StartDefaultTask+0x18c>)
 8003b20:	4618      	mov	r0, r3
 8003b22:	f7fd f9c3 	bl	8000eac <__aeabi_fdiv>
 8003b26:	4603      	mov	r3, r0
 8003b28:	461a      	mov	r2, r3
 8003b2a:	4b1f      	ldr	r3, [pc, #124]	; (8003ba8 <StartDefaultTask+0x194>)
 8003b2c:	601a      	str	r2, [r3, #0]
		  RB_3_wing = (pid.pwm_RB_3)/20;
 8003b2e:	4b1b      	ldr	r3, [pc, #108]	; (8003b9c <StartDefaultTask+0x188>)
 8003b30:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003b34:	491a      	ldr	r1, [pc, #104]	; (8003ba0 <StartDefaultTask+0x18c>)
 8003b36:	4618      	mov	r0, r3
 8003b38:	f7fd f9b8 	bl	8000eac <__aeabi_fdiv>
 8003b3c:	4603      	mov	r3, r0
 8003b3e:	461a      	mov	r2, r3
 8003b40:	4b1a      	ldr	r3, [pc, #104]	; (8003bac <StartDefaultTask+0x198>)
 8003b42:	601a      	str	r2, [r3, #0]
		  LB_4_wing = (pid.pwm_LB_4)/20;
 8003b44:	4b15      	ldr	r3, [pc, #84]	; (8003b9c <StartDefaultTask+0x188>)
 8003b46:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8003b4a:	4915      	ldr	r1, [pc, #84]	; (8003ba0 <StartDefaultTask+0x18c>)
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	f7fd f9ad 	bl	8000eac <__aeabi_fdiv>
 8003b52:	4603      	mov	r3, r0
 8003b54:	461a      	mov	r2, r3
 8003b56:	4b16      	ldr	r3, [pc, #88]	; (8003bb0 <StartDefaultTask+0x19c>)
 8003b58:	601a      	str	r2, [r3, #0]
		  MPU6050_Get_Accel_RawData(&myAccelRaw);
 8003b5a:	e75f      	b.n	8003a1c <StartDefaultTask+0x8>
 8003b5c:	20000670 	.word	0x20000670
 8003b60:	20000678 	.word	0x20000678
 8003b64:	200006bc 	.word	0x200006bc
 8003b68:	20000688 	.word	0x20000688
 8003b6c:	20000680 	.word	0x20000680
 8003b70:	200006b8 	.word	0x200006b8
 8003b74:	200006b4 	.word	0x200006b4
 8003b78:	200007c8 	.word	0x200007c8
 8003b7c:	200006fc 	.word	0x200006fc
 8003b80:	49742400 	.word	0x49742400
 8003b84:	200006e0 	.word	0x200006e0
 8003b88:	200006f0 	.word	0x200006f0
 8003b8c:	20000008 	.word	0x20000008
 8003b90:	200007dc 	.word	0x200007dc
 8003b94:	200007e0 	.word	0x200007e0
 8003b98:	200007e4 	.word	0x200007e4
 8003b9c:	20000700 	.word	0x20000700
 8003ba0:	41a00000 	.word	0x41a00000
 8003ba4:	200007cc 	.word	0x200007cc
 8003ba8:	200007d0 	.word	0x200007d0
 8003bac:	200007d4 	.word	0x200007d4
 8003bb0:	200007d8 	.word	0x200007d8

08003bb4 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void const * argument)
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	b086      	sub	sp, #24
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]
  char roll_buffer[5];
  char pitch_buffer[5];

  for(;;)
  {
	gcvt(rpy.roll, 4, roll_buffer);
 8003bbc:	4b10      	ldr	r3, [pc, #64]	; (8003c00 <StartTask02+0x4c>)
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	f7fc fc31 	bl	8000428 <__aeabi_f2d>
 8003bc6:	f107 0310 	add.w	r3, r7, #16
 8003bca:	2204      	movs	r2, #4
 8003bcc:	f005 fea0 	bl	8009910 <gcvt>
	gcvt(rpy.pitch, 4, pitch_buffer);
 8003bd0:	4b0b      	ldr	r3, [pc, #44]	; (8003c00 <StartTask02+0x4c>)
 8003bd2:	685b      	ldr	r3, [r3, #4]
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	f7fc fc27 	bl	8000428 <__aeabi_f2d>
 8003bda:	f107 0308 	add.w	r3, r7, #8
 8003bde:	2204      	movs	r2, #4
 8003be0:	f005 fe96 	bl	8009910 <gcvt>

	//printf("Roll_Angle: %s, Pitch_Angle: %s, CCR: %d,LF: %d, RF: %d, RB: %d, LB: %d\n", roll_angle_buffer, pitch_angle_buffer, (int)Init_CCR, (int)pid.pwm_LF_1, (int)pid.pwm_RF_2, (int)pid.pwm_RB_3, (int)pid.pwm_LB_4);
	printf("%s,%s,%d,\n", roll_buffer, pitch_buffer, Init_CCR);
 8003be4:	4b07      	ldr	r3, [pc, #28]	; (8003c04 <StartTask02+0x50>)
 8003be6:	881b      	ldrh	r3, [r3, #0]
 8003be8:	f107 0208 	add.w	r2, r7, #8
 8003bec:	f107 0110 	add.w	r1, r7, #16
 8003bf0:	4805      	ldr	r0, [pc, #20]	; (8003c08 <StartTask02+0x54>)
 8003bf2:	f006 fb51 	bl	800a298 <iprintf>
	//printf("%d, %d, %d, %d \n", (int)pid.pwm_LF_1, (int)pid.pwm_RF_2, (int)pid.pwm_RB_3, (int)pid.pwm_LB_4);
	//printf("Hello\n");
	//printf("input_voltage_percentage: %d\n", (int)myADC.input_voltage_percentage);
	//HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
	//printf("%f,%f,%d\n", GPS.dec_latitude, GPS.dec_longitude, Init_CCR);
	osDelay(1000);
 8003bf6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003bfa:	f004 fd17 	bl	800862c <osDelay>
  {
 8003bfe:	e7dd      	b.n	8003bbc <StartTask02+0x8>
 8003c00:	200006f0 	.word	0x200006f0
 8003c04:	20000008 	.word	0x20000008
 8003c08:	0800d218 	.word	0x0800d218
 8003c0c:	00000000 	.word	0x00000000

08003c10 <StartTask03>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask03 */
void StartTask03(void const * argument)
{
 8003c10:	b5b0      	push	{r4, r5, r7, lr}
 8003c12:	b084      	sub	sp, #16
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
//	char PID_Pitch_Kp[6];
//	char PID_Pitch_Ki[6];
//	char PID_Pitch_Kd[6];
  for(;;)
  {
	  if(huart_data.flag == 1){
 8003c18:	4ba9      	ldr	r3, [pc, #676]	; (8003ec0 <StartTask03+0x2b0>)
 8003c1a:	781b      	ldrb	r3, [r3, #0]
 8003c1c:	2b01      	cmp	r3, #1
 8003c1e:	f040 83d5 	bne.w	80043cc <StartTask03+0x7bc>
		    HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);	//Received command
 8003c22:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003c26:	48a7      	ldr	r0, [pc, #668]	; (8003ec4 <StartTask03+0x2b4>)
 8003c28:	f001 fbce 	bl	80053c8 <HAL_GPIO_TogglePin>
	  		//ROL P 00.123 I 00.124 D 00.123 Z
	  		if(huart_data.buff[0] == 82 && huart_data.buff[1] == 79 && huart_data.buff[2] == 76){
 8003c2c:	4ba4      	ldr	r3, [pc, #656]	; (8003ec0 <StartTask03+0x2b0>)
 8003c2e:	785b      	ldrb	r3, [r3, #1]
 8003c30:	2b52      	cmp	r3, #82	; 0x52
 8003c32:	f040 814b 	bne.w	8003ecc <StartTask03+0x2bc>
 8003c36:	4ba2      	ldr	r3, [pc, #648]	; (8003ec0 <StartTask03+0x2b0>)
 8003c38:	789b      	ldrb	r3, [r3, #2]
 8003c3a:	2b4f      	cmp	r3, #79	; 0x4f
 8003c3c:	f040 8146 	bne.w	8003ecc <StartTask03+0x2bc>
 8003c40:	4b9f      	ldr	r3, [pc, #636]	; (8003ec0 <StartTask03+0x2b0>)
 8003c42:	78db      	ldrb	r3, [r3, #3]
 8003c44:	2b4c      	cmp	r3, #76	; 0x4c
 8003c46:	f040 8141 	bne.w	8003ecc <StartTask03+0x2bc>
	  			  pid.Kp_roll = Ascii_to_Int(huart_data.buff[6])*10
 8003c4a:	4b9d      	ldr	r3, [pc, #628]	; (8003ec0 <StartTask03+0x2b0>)
 8003c4c:	79db      	ldrb	r3, [r3, #7]
 8003c4e:	4618      	mov	r0, r3
 8003c50:	f000 fcc9 	bl	80045e6 <Ascii_to_Int>
 8003c54:	4602      	mov	r2, r0
 8003c56:	4613      	mov	r3, r2
 8003c58:	009b      	lsls	r3, r3, #2
 8003c5a:	4413      	add	r3, r2
 8003c5c:	005b      	lsls	r3, r3, #1
 8003c5e:	461c      	mov	r4, r3
	  					  	  + Ascii_to_Int(huart_data.buff[7])*1
 8003c60:	4b97      	ldr	r3, [pc, #604]	; (8003ec0 <StartTask03+0x2b0>)
 8003c62:	7a1b      	ldrb	r3, [r3, #8]
 8003c64:	4618      	mov	r0, r3
 8003c66:	f000 fcbe 	bl	80045e6 <Ascii_to_Int>
 8003c6a:	4603      	mov	r3, r0
 8003c6c:	4423      	add	r3, r4
	  			  	  	  	  + Ascii_to_Int(huart_data.buff[9])*0.1
 8003c6e:	4618      	mov	r0, r3
 8003c70:	f7fc fbc8 	bl	8000404 <__aeabi_i2d>
 8003c74:	4604      	mov	r4, r0
 8003c76:	460d      	mov	r5, r1
 8003c78:	4b91      	ldr	r3, [pc, #580]	; (8003ec0 <StartTask03+0x2b0>)
 8003c7a:	7a9b      	ldrb	r3, [r3, #10]
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	f000 fcb2 	bl	80045e6 <Ascii_to_Int>
 8003c82:	4603      	mov	r3, r0
 8003c84:	4618      	mov	r0, r3
 8003c86:	f7fc fbbd 	bl	8000404 <__aeabi_i2d>
 8003c8a:	a387      	add	r3, pc, #540	; (adr r3, 8003ea8 <StartTask03+0x298>)
 8003c8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c90:	f7fc fc22 	bl	80004d8 <__aeabi_dmul>
 8003c94:	4602      	mov	r2, r0
 8003c96:	460b      	mov	r3, r1
 8003c98:	4620      	mov	r0, r4
 8003c9a:	4629      	mov	r1, r5
 8003c9c:	f7fc fa66 	bl	800016c <__adddf3>
 8003ca0:	4602      	mov	r2, r0
 8003ca2:	460b      	mov	r3, r1
 8003ca4:	4614      	mov	r4, r2
 8003ca6:	461d      	mov	r5, r3
	  						  + Ascii_to_Int(huart_data.buff[10])*0.01
 8003ca8:	4b85      	ldr	r3, [pc, #532]	; (8003ec0 <StartTask03+0x2b0>)
 8003caa:	7adb      	ldrb	r3, [r3, #11]
 8003cac:	4618      	mov	r0, r3
 8003cae:	f000 fc9a 	bl	80045e6 <Ascii_to_Int>
 8003cb2:	4603      	mov	r3, r0
 8003cb4:	4618      	mov	r0, r3
 8003cb6:	f7fc fba5 	bl	8000404 <__aeabi_i2d>
 8003cba:	a37d      	add	r3, pc, #500	; (adr r3, 8003eb0 <StartTask03+0x2a0>)
 8003cbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cc0:	f7fc fc0a 	bl	80004d8 <__aeabi_dmul>
 8003cc4:	4602      	mov	r2, r0
 8003cc6:	460b      	mov	r3, r1
 8003cc8:	4620      	mov	r0, r4
 8003cca:	4629      	mov	r1, r5
 8003ccc:	f7fc fa4e 	bl	800016c <__adddf3>
 8003cd0:	4602      	mov	r2, r0
 8003cd2:	460b      	mov	r3, r1
 8003cd4:	4614      	mov	r4, r2
 8003cd6:	461d      	mov	r5, r3
	  						  + Ascii_to_Int(huart_data.buff[11])*0.001;
 8003cd8:	4b79      	ldr	r3, [pc, #484]	; (8003ec0 <StartTask03+0x2b0>)
 8003cda:	7b1b      	ldrb	r3, [r3, #12]
 8003cdc:	4618      	mov	r0, r3
 8003cde:	f000 fc82 	bl	80045e6 <Ascii_to_Int>
 8003ce2:	4603      	mov	r3, r0
 8003ce4:	4618      	mov	r0, r3
 8003ce6:	f7fc fb8d 	bl	8000404 <__aeabi_i2d>
 8003cea:	a373      	add	r3, pc, #460	; (adr r3, 8003eb8 <StartTask03+0x2a8>)
 8003cec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cf0:	f7fc fbf2 	bl	80004d8 <__aeabi_dmul>
 8003cf4:	4602      	mov	r2, r0
 8003cf6:	460b      	mov	r3, r1
 8003cf8:	4620      	mov	r0, r4
 8003cfa:	4629      	mov	r1, r5
 8003cfc:	f7fc fa36 	bl	800016c <__adddf3>
 8003d00:	4602      	mov	r2, r0
 8003d02:	460b      	mov	r3, r1
 8003d04:	4610      	mov	r0, r2
 8003d06:	4619      	mov	r1, r3
 8003d08:	f7fc febe 	bl	8000a88 <__aeabi_d2f>
 8003d0c:	4603      	mov	r3, r0
	  			  pid.Kp_roll = Ascii_to_Int(huart_data.buff[6])*10
 8003d0e:	4a6e      	ldr	r2, [pc, #440]	; (8003ec8 <StartTask03+0x2b8>)
 8003d10:	60d3      	str	r3, [r2, #12]
	  			  pid.Ki_roll = Ascii_to_Int(huart_data.buff[15])*10
 8003d12:	4b6b      	ldr	r3, [pc, #428]	; (8003ec0 <StartTask03+0x2b0>)
 8003d14:	7c1b      	ldrb	r3, [r3, #16]
 8003d16:	4618      	mov	r0, r3
 8003d18:	f000 fc65 	bl	80045e6 <Ascii_to_Int>
 8003d1c:	4602      	mov	r2, r0
 8003d1e:	4613      	mov	r3, r2
 8003d20:	009b      	lsls	r3, r3, #2
 8003d22:	4413      	add	r3, r2
 8003d24:	005b      	lsls	r3, r3, #1
 8003d26:	461c      	mov	r4, r3
	  						  + Ascii_to_Int(huart_data.buff[16])*1
 8003d28:	4b65      	ldr	r3, [pc, #404]	; (8003ec0 <StartTask03+0x2b0>)
 8003d2a:	7c5b      	ldrb	r3, [r3, #17]
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	f000 fc5a 	bl	80045e6 <Ascii_to_Int>
 8003d32:	4603      	mov	r3, r0
 8003d34:	4423      	add	r3, r4
	  						  + Ascii_to_Int(huart_data.buff[18])*0.1
 8003d36:	4618      	mov	r0, r3
 8003d38:	f7fc fb64 	bl	8000404 <__aeabi_i2d>
 8003d3c:	4604      	mov	r4, r0
 8003d3e:	460d      	mov	r5, r1
 8003d40:	4b5f      	ldr	r3, [pc, #380]	; (8003ec0 <StartTask03+0x2b0>)
 8003d42:	7cdb      	ldrb	r3, [r3, #19]
 8003d44:	4618      	mov	r0, r3
 8003d46:	f000 fc4e 	bl	80045e6 <Ascii_to_Int>
 8003d4a:	4603      	mov	r3, r0
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	f7fc fb59 	bl	8000404 <__aeabi_i2d>
 8003d52:	a355      	add	r3, pc, #340	; (adr r3, 8003ea8 <StartTask03+0x298>)
 8003d54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d58:	f7fc fbbe 	bl	80004d8 <__aeabi_dmul>
 8003d5c:	4602      	mov	r2, r0
 8003d5e:	460b      	mov	r3, r1
 8003d60:	4620      	mov	r0, r4
 8003d62:	4629      	mov	r1, r5
 8003d64:	f7fc fa02 	bl	800016c <__adddf3>
 8003d68:	4602      	mov	r2, r0
 8003d6a:	460b      	mov	r3, r1
 8003d6c:	4614      	mov	r4, r2
 8003d6e:	461d      	mov	r5, r3
	  						  + Ascii_to_Int(huart_data.buff[19])*0.01
 8003d70:	4b53      	ldr	r3, [pc, #332]	; (8003ec0 <StartTask03+0x2b0>)
 8003d72:	7d1b      	ldrb	r3, [r3, #20]
 8003d74:	4618      	mov	r0, r3
 8003d76:	f000 fc36 	bl	80045e6 <Ascii_to_Int>
 8003d7a:	4603      	mov	r3, r0
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	f7fc fb41 	bl	8000404 <__aeabi_i2d>
 8003d82:	a34b      	add	r3, pc, #300	; (adr r3, 8003eb0 <StartTask03+0x2a0>)
 8003d84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d88:	f7fc fba6 	bl	80004d8 <__aeabi_dmul>
 8003d8c:	4602      	mov	r2, r0
 8003d8e:	460b      	mov	r3, r1
 8003d90:	4620      	mov	r0, r4
 8003d92:	4629      	mov	r1, r5
 8003d94:	f7fc f9ea 	bl	800016c <__adddf3>
 8003d98:	4602      	mov	r2, r0
 8003d9a:	460b      	mov	r3, r1
 8003d9c:	4614      	mov	r4, r2
 8003d9e:	461d      	mov	r5, r3
	  						  + Ascii_to_Int(huart_data.buff[20])*0.001;
 8003da0:	4b47      	ldr	r3, [pc, #284]	; (8003ec0 <StartTask03+0x2b0>)
 8003da2:	7d5b      	ldrb	r3, [r3, #21]
 8003da4:	4618      	mov	r0, r3
 8003da6:	f000 fc1e 	bl	80045e6 <Ascii_to_Int>
 8003daa:	4603      	mov	r3, r0
 8003dac:	4618      	mov	r0, r3
 8003dae:	f7fc fb29 	bl	8000404 <__aeabi_i2d>
 8003db2:	a341      	add	r3, pc, #260	; (adr r3, 8003eb8 <StartTask03+0x2a8>)
 8003db4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003db8:	f7fc fb8e 	bl	80004d8 <__aeabi_dmul>
 8003dbc:	4602      	mov	r2, r0
 8003dbe:	460b      	mov	r3, r1
 8003dc0:	4620      	mov	r0, r4
 8003dc2:	4629      	mov	r1, r5
 8003dc4:	f7fc f9d2 	bl	800016c <__adddf3>
 8003dc8:	4602      	mov	r2, r0
 8003dca:	460b      	mov	r3, r1
 8003dcc:	4610      	mov	r0, r2
 8003dce:	4619      	mov	r1, r3
 8003dd0:	f7fc fe5a 	bl	8000a88 <__aeabi_d2f>
 8003dd4:	4603      	mov	r3, r0
	  			  pid.Ki_roll = Ascii_to_Int(huart_data.buff[15])*10
 8003dd6:	4a3c      	ldr	r2, [pc, #240]	; (8003ec8 <StartTask03+0x2b8>)
 8003dd8:	6113      	str	r3, [r2, #16]
	  			  pid.Kd_roll = Ascii_to_Int(huart_data.buff[24])*10
 8003dda:	4b39      	ldr	r3, [pc, #228]	; (8003ec0 <StartTask03+0x2b0>)
 8003ddc:	7e5b      	ldrb	r3, [r3, #25]
 8003dde:	4618      	mov	r0, r3
 8003de0:	f000 fc01 	bl	80045e6 <Ascii_to_Int>
 8003de4:	4602      	mov	r2, r0
 8003de6:	4613      	mov	r3, r2
 8003de8:	009b      	lsls	r3, r3, #2
 8003dea:	4413      	add	r3, r2
 8003dec:	005b      	lsls	r3, r3, #1
 8003dee:	461c      	mov	r4, r3
	  						  + Ascii_to_Int(huart_data.buff[25])*1
 8003df0:	4b33      	ldr	r3, [pc, #204]	; (8003ec0 <StartTask03+0x2b0>)
 8003df2:	7e9b      	ldrb	r3, [r3, #26]
 8003df4:	4618      	mov	r0, r3
 8003df6:	f000 fbf6 	bl	80045e6 <Ascii_to_Int>
 8003dfa:	4603      	mov	r3, r0
 8003dfc:	4423      	add	r3, r4
	  						  + Ascii_to_Int(huart_data.buff[27])*0.1
 8003dfe:	4618      	mov	r0, r3
 8003e00:	f7fc fb00 	bl	8000404 <__aeabi_i2d>
 8003e04:	4604      	mov	r4, r0
 8003e06:	460d      	mov	r5, r1
 8003e08:	4b2d      	ldr	r3, [pc, #180]	; (8003ec0 <StartTask03+0x2b0>)
 8003e0a:	7f1b      	ldrb	r3, [r3, #28]
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	f000 fbea 	bl	80045e6 <Ascii_to_Int>
 8003e12:	4603      	mov	r3, r0
 8003e14:	4618      	mov	r0, r3
 8003e16:	f7fc faf5 	bl	8000404 <__aeabi_i2d>
 8003e1a:	a323      	add	r3, pc, #140	; (adr r3, 8003ea8 <StartTask03+0x298>)
 8003e1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e20:	f7fc fb5a 	bl	80004d8 <__aeabi_dmul>
 8003e24:	4602      	mov	r2, r0
 8003e26:	460b      	mov	r3, r1
 8003e28:	4620      	mov	r0, r4
 8003e2a:	4629      	mov	r1, r5
 8003e2c:	f7fc f99e 	bl	800016c <__adddf3>
 8003e30:	4602      	mov	r2, r0
 8003e32:	460b      	mov	r3, r1
 8003e34:	4614      	mov	r4, r2
 8003e36:	461d      	mov	r5, r3
	  						  + Ascii_to_Int(huart_data.buff[28])*0.01
 8003e38:	4b21      	ldr	r3, [pc, #132]	; (8003ec0 <StartTask03+0x2b0>)
 8003e3a:	7f5b      	ldrb	r3, [r3, #29]
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	f000 fbd2 	bl	80045e6 <Ascii_to_Int>
 8003e42:	4603      	mov	r3, r0
 8003e44:	4618      	mov	r0, r3
 8003e46:	f7fc fadd 	bl	8000404 <__aeabi_i2d>
 8003e4a:	a319      	add	r3, pc, #100	; (adr r3, 8003eb0 <StartTask03+0x2a0>)
 8003e4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e50:	f7fc fb42 	bl	80004d8 <__aeabi_dmul>
 8003e54:	4602      	mov	r2, r0
 8003e56:	460b      	mov	r3, r1
 8003e58:	4620      	mov	r0, r4
 8003e5a:	4629      	mov	r1, r5
 8003e5c:	f7fc f986 	bl	800016c <__adddf3>
 8003e60:	4602      	mov	r2, r0
 8003e62:	460b      	mov	r3, r1
 8003e64:	4614      	mov	r4, r2
 8003e66:	461d      	mov	r5, r3
	  						  + Ascii_to_Int(huart_data.buff[29])*0.001;
 8003e68:	4b15      	ldr	r3, [pc, #84]	; (8003ec0 <StartTask03+0x2b0>)
 8003e6a:	7f9b      	ldrb	r3, [r3, #30]
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	f000 fbba 	bl	80045e6 <Ascii_to_Int>
 8003e72:	4603      	mov	r3, r0
 8003e74:	4618      	mov	r0, r3
 8003e76:	f7fc fac5 	bl	8000404 <__aeabi_i2d>
 8003e7a:	a30f      	add	r3, pc, #60	; (adr r3, 8003eb8 <StartTask03+0x2a8>)
 8003e7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e80:	f7fc fb2a 	bl	80004d8 <__aeabi_dmul>
 8003e84:	4602      	mov	r2, r0
 8003e86:	460b      	mov	r3, r1
 8003e88:	4620      	mov	r0, r4
 8003e8a:	4629      	mov	r1, r5
 8003e8c:	f7fc f96e 	bl	800016c <__adddf3>
 8003e90:	4602      	mov	r2, r0
 8003e92:	460b      	mov	r3, r1
 8003e94:	4610      	mov	r0, r2
 8003e96:	4619      	mov	r1, r3
 8003e98:	f7fc fdf6 	bl	8000a88 <__aeabi_d2f>
 8003e9c:	4603      	mov	r3, r0
	  			  pid.Kd_roll = Ascii_to_Int(huart_data.buff[24])*10
 8003e9e:	4a0a      	ldr	r2, [pc, #40]	; (8003ec8 <StartTask03+0x2b8>)
 8003ea0:	6153      	str	r3, [r2, #20]
 8003ea2:	e288      	b.n	80043b6 <StartTask03+0x7a6>
 8003ea4:	f3af 8000 	nop.w
 8003ea8:	9999999a 	.word	0x9999999a
 8003eac:	3fb99999 	.word	0x3fb99999
 8003eb0:	47ae147b 	.word	0x47ae147b
 8003eb4:	3f847ae1 	.word	0x3f847ae1
 8003eb8:	d2f1a9fc 	.word	0xd2f1a9fc
 8003ebc:	3f50624d 	.word	0x3f50624d
 8003ec0:	20000650 	.word	0x20000650
 8003ec4:	40011000 	.word	0x40011000
 8003ec8:	20000700 	.word	0x20000700
	  		}
	  		//PIT P 00.123 I 00.124 D 00.123 Z
	  		else if(huart_data.buff[0] == 80 && huart_data.buff[1] == 73 && huart_data.buff[2] == 84){
 8003ecc:	4bca      	ldr	r3, [pc, #808]	; (80041f8 <StartTask03+0x5e8>)
 8003ece:	785b      	ldrb	r3, [r3, #1]
 8003ed0:	2b50      	cmp	r3, #80	; 0x50
 8003ed2:	f040 8137 	bne.w	8004144 <StartTask03+0x534>
 8003ed6:	4bc8      	ldr	r3, [pc, #800]	; (80041f8 <StartTask03+0x5e8>)
 8003ed8:	789b      	ldrb	r3, [r3, #2]
 8003eda:	2b49      	cmp	r3, #73	; 0x49
 8003edc:	f040 8132 	bne.w	8004144 <StartTask03+0x534>
 8003ee0:	4bc5      	ldr	r3, [pc, #788]	; (80041f8 <StartTask03+0x5e8>)
 8003ee2:	78db      	ldrb	r3, [r3, #3]
 8003ee4:	2b54      	cmp	r3, #84	; 0x54
 8003ee6:	f040 812d 	bne.w	8004144 <StartTask03+0x534>
	  			  pid.Kp_pitch = Ascii_to_Int(huart_data.buff[6])*10
 8003eea:	4bc3      	ldr	r3, [pc, #780]	; (80041f8 <StartTask03+0x5e8>)
 8003eec:	79db      	ldrb	r3, [r3, #7]
 8003eee:	4618      	mov	r0, r3
 8003ef0:	f000 fb79 	bl	80045e6 <Ascii_to_Int>
 8003ef4:	4602      	mov	r2, r0
 8003ef6:	4613      	mov	r3, r2
 8003ef8:	009b      	lsls	r3, r3, #2
 8003efa:	4413      	add	r3, r2
 8003efc:	005b      	lsls	r3, r3, #1
 8003efe:	461c      	mov	r4, r3
	  					  	  + Ascii_to_Int(huart_data.buff[7])*1
 8003f00:	4bbd      	ldr	r3, [pc, #756]	; (80041f8 <StartTask03+0x5e8>)
 8003f02:	7a1b      	ldrb	r3, [r3, #8]
 8003f04:	4618      	mov	r0, r3
 8003f06:	f000 fb6e 	bl	80045e6 <Ascii_to_Int>
 8003f0a:	4603      	mov	r3, r0
 8003f0c:	4423      	add	r3, r4
	  			  	  	  	  + Ascii_to_Int(huart_data.buff[9])*0.1
 8003f0e:	4618      	mov	r0, r3
 8003f10:	f7fc fa78 	bl	8000404 <__aeabi_i2d>
 8003f14:	4604      	mov	r4, r0
 8003f16:	460d      	mov	r5, r1
 8003f18:	4bb7      	ldr	r3, [pc, #732]	; (80041f8 <StartTask03+0x5e8>)
 8003f1a:	7a9b      	ldrb	r3, [r3, #10]
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	f000 fb62 	bl	80045e6 <Ascii_to_Int>
 8003f22:	4603      	mov	r3, r0
 8003f24:	4618      	mov	r0, r3
 8003f26:	f7fc fa6d 	bl	8000404 <__aeabi_i2d>
 8003f2a:	a3ad      	add	r3, pc, #692	; (adr r3, 80041e0 <StartTask03+0x5d0>)
 8003f2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f30:	f7fc fad2 	bl	80004d8 <__aeabi_dmul>
 8003f34:	4602      	mov	r2, r0
 8003f36:	460b      	mov	r3, r1
 8003f38:	4620      	mov	r0, r4
 8003f3a:	4629      	mov	r1, r5
 8003f3c:	f7fc f916 	bl	800016c <__adddf3>
 8003f40:	4602      	mov	r2, r0
 8003f42:	460b      	mov	r3, r1
 8003f44:	4614      	mov	r4, r2
 8003f46:	461d      	mov	r5, r3
	  						  + Ascii_to_Int(huart_data.buff[10])*0.01
 8003f48:	4bab      	ldr	r3, [pc, #684]	; (80041f8 <StartTask03+0x5e8>)
 8003f4a:	7adb      	ldrb	r3, [r3, #11]
 8003f4c:	4618      	mov	r0, r3
 8003f4e:	f000 fb4a 	bl	80045e6 <Ascii_to_Int>
 8003f52:	4603      	mov	r3, r0
 8003f54:	4618      	mov	r0, r3
 8003f56:	f7fc fa55 	bl	8000404 <__aeabi_i2d>
 8003f5a:	a3a3      	add	r3, pc, #652	; (adr r3, 80041e8 <StartTask03+0x5d8>)
 8003f5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f60:	f7fc faba 	bl	80004d8 <__aeabi_dmul>
 8003f64:	4602      	mov	r2, r0
 8003f66:	460b      	mov	r3, r1
 8003f68:	4620      	mov	r0, r4
 8003f6a:	4629      	mov	r1, r5
 8003f6c:	f7fc f8fe 	bl	800016c <__adddf3>
 8003f70:	4602      	mov	r2, r0
 8003f72:	460b      	mov	r3, r1
 8003f74:	4614      	mov	r4, r2
 8003f76:	461d      	mov	r5, r3
	  						  + Ascii_to_Int(huart_data.buff[11])*0.001;
 8003f78:	4b9f      	ldr	r3, [pc, #636]	; (80041f8 <StartTask03+0x5e8>)
 8003f7a:	7b1b      	ldrb	r3, [r3, #12]
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	f000 fb32 	bl	80045e6 <Ascii_to_Int>
 8003f82:	4603      	mov	r3, r0
 8003f84:	4618      	mov	r0, r3
 8003f86:	f7fc fa3d 	bl	8000404 <__aeabi_i2d>
 8003f8a:	a399      	add	r3, pc, #612	; (adr r3, 80041f0 <StartTask03+0x5e0>)
 8003f8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f90:	f7fc faa2 	bl	80004d8 <__aeabi_dmul>
 8003f94:	4602      	mov	r2, r0
 8003f96:	460b      	mov	r3, r1
 8003f98:	4620      	mov	r0, r4
 8003f9a:	4629      	mov	r1, r5
 8003f9c:	f7fc f8e6 	bl	800016c <__adddf3>
 8003fa0:	4602      	mov	r2, r0
 8003fa2:	460b      	mov	r3, r1
 8003fa4:	4610      	mov	r0, r2
 8003fa6:	4619      	mov	r1, r3
 8003fa8:	f7fc fd6e 	bl	8000a88 <__aeabi_d2f>
 8003fac:	4603      	mov	r3, r0
	  			  pid.Kp_pitch = Ascii_to_Int(huart_data.buff[6])*10
 8003fae:	4a93      	ldr	r2, [pc, #588]	; (80041fc <StartTask03+0x5ec>)
 8003fb0:	6193      	str	r3, [r2, #24]
	  			  pid.Ki_pitch = Ascii_to_Int(huart_data.buff[15])*10
 8003fb2:	4b91      	ldr	r3, [pc, #580]	; (80041f8 <StartTask03+0x5e8>)
 8003fb4:	7c1b      	ldrb	r3, [r3, #16]
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	f000 fb15 	bl	80045e6 <Ascii_to_Int>
 8003fbc:	4602      	mov	r2, r0
 8003fbe:	4613      	mov	r3, r2
 8003fc0:	009b      	lsls	r3, r3, #2
 8003fc2:	4413      	add	r3, r2
 8003fc4:	005b      	lsls	r3, r3, #1
 8003fc6:	461c      	mov	r4, r3
	  						  + Ascii_to_Int(huart_data.buff[16])*1
 8003fc8:	4b8b      	ldr	r3, [pc, #556]	; (80041f8 <StartTask03+0x5e8>)
 8003fca:	7c5b      	ldrb	r3, [r3, #17]
 8003fcc:	4618      	mov	r0, r3
 8003fce:	f000 fb0a 	bl	80045e6 <Ascii_to_Int>
 8003fd2:	4603      	mov	r3, r0
 8003fd4:	4423      	add	r3, r4
	  						  + Ascii_to_Int(huart_data.buff[18])*0.1
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	f7fc fa14 	bl	8000404 <__aeabi_i2d>
 8003fdc:	4604      	mov	r4, r0
 8003fde:	460d      	mov	r5, r1
 8003fe0:	4b85      	ldr	r3, [pc, #532]	; (80041f8 <StartTask03+0x5e8>)
 8003fe2:	7cdb      	ldrb	r3, [r3, #19]
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	f000 fafe 	bl	80045e6 <Ascii_to_Int>
 8003fea:	4603      	mov	r3, r0
 8003fec:	4618      	mov	r0, r3
 8003fee:	f7fc fa09 	bl	8000404 <__aeabi_i2d>
 8003ff2:	a37b      	add	r3, pc, #492	; (adr r3, 80041e0 <StartTask03+0x5d0>)
 8003ff4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ff8:	f7fc fa6e 	bl	80004d8 <__aeabi_dmul>
 8003ffc:	4602      	mov	r2, r0
 8003ffe:	460b      	mov	r3, r1
 8004000:	4620      	mov	r0, r4
 8004002:	4629      	mov	r1, r5
 8004004:	f7fc f8b2 	bl	800016c <__adddf3>
 8004008:	4602      	mov	r2, r0
 800400a:	460b      	mov	r3, r1
 800400c:	4614      	mov	r4, r2
 800400e:	461d      	mov	r5, r3
	  						  + Ascii_to_Int(huart_data.buff[19])*0.01
 8004010:	4b79      	ldr	r3, [pc, #484]	; (80041f8 <StartTask03+0x5e8>)
 8004012:	7d1b      	ldrb	r3, [r3, #20]
 8004014:	4618      	mov	r0, r3
 8004016:	f000 fae6 	bl	80045e6 <Ascii_to_Int>
 800401a:	4603      	mov	r3, r0
 800401c:	4618      	mov	r0, r3
 800401e:	f7fc f9f1 	bl	8000404 <__aeabi_i2d>
 8004022:	a371      	add	r3, pc, #452	; (adr r3, 80041e8 <StartTask03+0x5d8>)
 8004024:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004028:	f7fc fa56 	bl	80004d8 <__aeabi_dmul>
 800402c:	4602      	mov	r2, r0
 800402e:	460b      	mov	r3, r1
 8004030:	4620      	mov	r0, r4
 8004032:	4629      	mov	r1, r5
 8004034:	f7fc f89a 	bl	800016c <__adddf3>
 8004038:	4602      	mov	r2, r0
 800403a:	460b      	mov	r3, r1
 800403c:	4614      	mov	r4, r2
 800403e:	461d      	mov	r5, r3
	  						  + Ascii_to_Int(huart_data.buff[20])*0.001;
 8004040:	4b6d      	ldr	r3, [pc, #436]	; (80041f8 <StartTask03+0x5e8>)
 8004042:	7d5b      	ldrb	r3, [r3, #21]
 8004044:	4618      	mov	r0, r3
 8004046:	f000 face 	bl	80045e6 <Ascii_to_Int>
 800404a:	4603      	mov	r3, r0
 800404c:	4618      	mov	r0, r3
 800404e:	f7fc f9d9 	bl	8000404 <__aeabi_i2d>
 8004052:	a367      	add	r3, pc, #412	; (adr r3, 80041f0 <StartTask03+0x5e0>)
 8004054:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004058:	f7fc fa3e 	bl	80004d8 <__aeabi_dmul>
 800405c:	4602      	mov	r2, r0
 800405e:	460b      	mov	r3, r1
 8004060:	4620      	mov	r0, r4
 8004062:	4629      	mov	r1, r5
 8004064:	f7fc f882 	bl	800016c <__adddf3>
 8004068:	4602      	mov	r2, r0
 800406a:	460b      	mov	r3, r1
 800406c:	4610      	mov	r0, r2
 800406e:	4619      	mov	r1, r3
 8004070:	f7fc fd0a 	bl	8000a88 <__aeabi_d2f>
 8004074:	4603      	mov	r3, r0
	  			  pid.Ki_pitch = Ascii_to_Int(huart_data.buff[15])*10
 8004076:	4a61      	ldr	r2, [pc, #388]	; (80041fc <StartTask03+0x5ec>)
 8004078:	61d3      	str	r3, [r2, #28]
	  			  pid.Kd_pitch = Ascii_to_Int(huart_data.buff[24])*10
 800407a:	4b5f      	ldr	r3, [pc, #380]	; (80041f8 <StartTask03+0x5e8>)
 800407c:	7e5b      	ldrb	r3, [r3, #25]
 800407e:	4618      	mov	r0, r3
 8004080:	f000 fab1 	bl	80045e6 <Ascii_to_Int>
 8004084:	4602      	mov	r2, r0
 8004086:	4613      	mov	r3, r2
 8004088:	009b      	lsls	r3, r3, #2
 800408a:	4413      	add	r3, r2
 800408c:	005b      	lsls	r3, r3, #1
 800408e:	461c      	mov	r4, r3
	  						  + Ascii_to_Int(huart_data.buff[25])*1
 8004090:	4b59      	ldr	r3, [pc, #356]	; (80041f8 <StartTask03+0x5e8>)
 8004092:	7e9b      	ldrb	r3, [r3, #26]
 8004094:	4618      	mov	r0, r3
 8004096:	f000 faa6 	bl	80045e6 <Ascii_to_Int>
 800409a:	4603      	mov	r3, r0
 800409c:	4423      	add	r3, r4
	  						  + Ascii_to_Int(huart_data.buff[27])*0.1
 800409e:	4618      	mov	r0, r3
 80040a0:	f7fc f9b0 	bl	8000404 <__aeabi_i2d>
 80040a4:	4604      	mov	r4, r0
 80040a6:	460d      	mov	r5, r1
 80040a8:	4b53      	ldr	r3, [pc, #332]	; (80041f8 <StartTask03+0x5e8>)
 80040aa:	7f1b      	ldrb	r3, [r3, #28]
 80040ac:	4618      	mov	r0, r3
 80040ae:	f000 fa9a 	bl	80045e6 <Ascii_to_Int>
 80040b2:	4603      	mov	r3, r0
 80040b4:	4618      	mov	r0, r3
 80040b6:	f7fc f9a5 	bl	8000404 <__aeabi_i2d>
 80040ba:	a349      	add	r3, pc, #292	; (adr r3, 80041e0 <StartTask03+0x5d0>)
 80040bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040c0:	f7fc fa0a 	bl	80004d8 <__aeabi_dmul>
 80040c4:	4602      	mov	r2, r0
 80040c6:	460b      	mov	r3, r1
 80040c8:	4620      	mov	r0, r4
 80040ca:	4629      	mov	r1, r5
 80040cc:	f7fc f84e 	bl	800016c <__adddf3>
 80040d0:	4602      	mov	r2, r0
 80040d2:	460b      	mov	r3, r1
 80040d4:	4614      	mov	r4, r2
 80040d6:	461d      	mov	r5, r3
	  						  + Ascii_to_Int(huart_data.buff[28])*0.01
 80040d8:	4b47      	ldr	r3, [pc, #284]	; (80041f8 <StartTask03+0x5e8>)
 80040da:	7f5b      	ldrb	r3, [r3, #29]
 80040dc:	4618      	mov	r0, r3
 80040de:	f000 fa82 	bl	80045e6 <Ascii_to_Int>
 80040e2:	4603      	mov	r3, r0
 80040e4:	4618      	mov	r0, r3
 80040e6:	f7fc f98d 	bl	8000404 <__aeabi_i2d>
 80040ea:	a33f      	add	r3, pc, #252	; (adr r3, 80041e8 <StartTask03+0x5d8>)
 80040ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040f0:	f7fc f9f2 	bl	80004d8 <__aeabi_dmul>
 80040f4:	4602      	mov	r2, r0
 80040f6:	460b      	mov	r3, r1
 80040f8:	4620      	mov	r0, r4
 80040fa:	4629      	mov	r1, r5
 80040fc:	f7fc f836 	bl	800016c <__adddf3>
 8004100:	4602      	mov	r2, r0
 8004102:	460b      	mov	r3, r1
 8004104:	4614      	mov	r4, r2
 8004106:	461d      	mov	r5, r3
	  						  + Ascii_to_Int(huart_data.buff[29])*0.001;
 8004108:	4b3b      	ldr	r3, [pc, #236]	; (80041f8 <StartTask03+0x5e8>)
 800410a:	7f9b      	ldrb	r3, [r3, #30]
 800410c:	4618      	mov	r0, r3
 800410e:	f000 fa6a 	bl	80045e6 <Ascii_to_Int>
 8004112:	4603      	mov	r3, r0
 8004114:	4618      	mov	r0, r3
 8004116:	f7fc f975 	bl	8000404 <__aeabi_i2d>
 800411a:	a335      	add	r3, pc, #212	; (adr r3, 80041f0 <StartTask03+0x5e0>)
 800411c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004120:	f7fc f9da 	bl	80004d8 <__aeabi_dmul>
 8004124:	4602      	mov	r2, r0
 8004126:	460b      	mov	r3, r1
 8004128:	4620      	mov	r0, r4
 800412a:	4629      	mov	r1, r5
 800412c:	f7fc f81e 	bl	800016c <__adddf3>
 8004130:	4602      	mov	r2, r0
 8004132:	460b      	mov	r3, r1
 8004134:	4610      	mov	r0, r2
 8004136:	4619      	mov	r1, r3
 8004138:	f7fc fca6 	bl	8000a88 <__aeabi_d2f>
 800413c:	4603      	mov	r3, r0
	  			  pid.Kd_pitch = Ascii_to_Int(huart_data.buff[24])*10
 800413e:	4a2f      	ldr	r2, [pc, #188]	; (80041fc <StartTask03+0x5ec>)
 8004140:	6213      	str	r3, [r2, #32]
 8004142:	e138      	b.n	80043b6 <StartTask03+0x7a6>
	  		}
	  		//cmd = "CCR 1600 Z"
	  		else if(huart_data.buff[0] == 67 && huart_data.buff[1] == 67 && huart_data.buff[2] == 82){
 8004144:	4b2c      	ldr	r3, [pc, #176]	; (80041f8 <StartTask03+0x5e8>)
 8004146:	785b      	ldrb	r3, [r3, #1]
 8004148:	2b43      	cmp	r3, #67	; 0x43
 800414a:	d15f      	bne.n	800420c <StartTask03+0x5fc>
 800414c:	4b2a      	ldr	r3, [pc, #168]	; (80041f8 <StartTask03+0x5e8>)
 800414e:	789b      	ldrb	r3, [r3, #2]
 8004150:	2b43      	cmp	r3, #67	; 0x43
 8004152:	d15b      	bne.n	800420c <StartTask03+0x5fc>
 8004154:	4b28      	ldr	r3, [pc, #160]	; (80041f8 <StartTask03+0x5e8>)
 8004156:	78db      	ldrb	r3, [r3, #3]
 8004158:	2b52      	cmp	r3, #82	; 0x52
 800415a:	d157      	bne.n	800420c <StartTask03+0x5fc>
	  				Init_CCR = Ascii_to_Int(huart_data.buff[4])*1000 +
 800415c:	4b26      	ldr	r3, [pc, #152]	; (80041f8 <StartTask03+0x5e8>)
 800415e:	795b      	ldrb	r3, [r3, #5]
 8004160:	4618      	mov	r0, r3
 8004162:	f000 fa40 	bl	80045e6 <Ascii_to_Int>
 8004166:	4603      	mov	r3, r0
 8004168:	b29b      	uxth	r3, r3
 800416a:	461a      	mov	r2, r3
 800416c:	0152      	lsls	r2, r2, #5
 800416e:	1ad2      	subs	r2, r2, r3
 8004170:	0092      	lsls	r2, r2, #2
 8004172:	4413      	add	r3, r2
 8004174:	00db      	lsls	r3, r3, #3
 8004176:	b29c      	uxth	r4, r3
	  						Ascii_to_Int(huart_data.buff[5])*100 +
 8004178:	4b1f      	ldr	r3, [pc, #124]	; (80041f8 <StartTask03+0x5e8>)
 800417a:	799b      	ldrb	r3, [r3, #6]
 800417c:	4618      	mov	r0, r3
 800417e:	f000 fa32 	bl	80045e6 <Ascii_to_Int>
 8004182:	4603      	mov	r3, r0
	  				Init_CCR = Ascii_to_Int(huart_data.buff[4])*1000 +
 8004184:	b29b      	uxth	r3, r3
 8004186:	461a      	mov	r2, r3
 8004188:	0092      	lsls	r2, r2, #2
 800418a:	4413      	add	r3, r2
 800418c:	461a      	mov	r2, r3
 800418e:	0091      	lsls	r1, r2, #2
 8004190:	461a      	mov	r2, r3
 8004192:	460b      	mov	r3, r1
 8004194:	4413      	add	r3, r2
 8004196:	009b      	lsls	r3, r3, #2
 8004198:	b29b      	uxth	r3, r3
 800419a:	4423      	add	r3, r4
 800419c:	b29c      	uxth	r4, r3
	  						Ascii_to_Int(huart_data.buff[6])*10 +
 800419e:	4b16      	ldr	r3, [pc, #88]	; (80041f8 <StartTask03+0x5e8>)
 80041a0:	79db      	ldrb	r3, [r3, #7]
 80041a2:	4618      	mov	r0, r3
 80041a4:	f000 fa1f 	bl	80045e6 <Ascii_to_Int>
 80041a8:	4603      	mov	r3, r0
	  						Ascii_to_Int(huart_data.buff[5])*100 +
 80041aa:	b29b      	uxth	r3, r3
 80041ac:	461a      	mov	r2, r3
 80041ae:	0092      	lsls	r2, r2, #2
 80041b0:	4413      	add	r3, r2
 80041b2:	005b      	lsls	r3, r3, #1
 80041b4:	b29b      	uxth	r3, r3
 80041b6:	4423      	add	r3, r4
 80041b8:	b29c      	uxth	r4, r3
	  						Ascii_to_Int(huart_data.buff[7])*1;
 80041ba:	4b0f      	ldr	r3, [pc, #60]	; (80041f8 <StartTask03+0x5e8>)
 80041bc:	7a1b      	ldrb	r3, [r3, #8]
 80041be:	4618      	mov	r0, r3
 80041c0:	f000 fa11 	bl	80045e6 <Ascii_to_Int>
 80041c4:	4603      	mov	r3, r0
	  						Ascii_to_Int(huart_data.buff[6])*10 +
 80041c6:	b29b      	uxth	r3, r3
 80041c8:	4423      	add	r3, r4
 80041ca:	b29a      	uxth	r2, r3
	  				Init_CCR = Ascii_to_Int(huart_data.buff[4])*1000 +
 80041cc:	4b0c      	ldr	r3, [pc, #48]	; (8004200 <StartTask03+0x5f0>)
 80041ce:	801a      	strh	r2, [r3, #0]
	  				is_stop_flying = 0;
 80041d0:	4b0c      	ldr	r3, [pc, #48]	; (8004204 <StartTask03+0x5f4>)
 80041d2:	2200      	movs	r2, #0
 80041d4:	701a      	strb	r2, [r3, #0]
	  				is_already_to_fly = 1;
 80041d6:	4b0c      	ldr	r3, [pc, #48]	; (8004208 <StartTask03+0x5f8>)
 80041d8:	2201      	movs	r2, #1
 80041da:	701a      	strb	r2, [r3, #0]
 80041dc:	e0eb      	b.n	80043b6 <StartTask03+0x7a6>
 80041de:	bf00      	nop
 80041e0:	9999999a 	.word	0x9999999a
 80041e4:	3fb99999 	.word	0x3fb99999
 80041e8:	47ae147b 	.word	0x47ae147b
 80041ec:	3f847ae1 	.word	0x3f847ae1
 80041f0:	d2f1a9fc 	.word	0xd2f1a9fc
 80041f4:	3f50624d 	.word	0x3f50624d
 80041f8:	20000650 	.word	0x20000650
 80041fc:	20000700 	.word	0x20000700
 8004200:	20000008 	.word	0x20000008
 8004204:	200007f1 	.word	0x200007f1
 8004208:	200007f0 	.word	0x200007f0
	  		}
	  		//cmd = "ICRR Z"
	  		else if(huart_data.buff[0] == 73 && huart_data.buff[1] == 67 && huart_data.buff[2] == 67 && huart_data.buff[3] == 82){
 800420c:	4b7a      	ldr	r3, [pc, #488]	; (80043f8 <StartTask03+0x7e8>)
 800420e:	785b      	ldrb	r3, [r3, #1]
 8004210:	2b49      	cmp	r3, #73	; 0x49
 8004212:	d112      	bne.n	800423a <StartTask03+0x62a>
 8004214:	4b78      	ldr	r3, [pc, #480]	; (80043f8 <StartTask03+0x7e8>)
 8004216:	789b      	ldrb	r3, [r3, #2]
 8004218:	2b43      	cmp	r3, #67	; 0x43
 800421a:	d10e      	bne.n	800423a <StartTask03+0x62a>
 800421c:	4b76      	ldr	r3, [pc, #472]	; (80043f8 <StartTask03+0x7e8>)
 800421e:	78db      	ldrb	r3, [r3, #3]
 8004220:	2b43      	cmp	r3, #67	; 0x43
 8004222:	d10a      	bne.n	800423a <StartTask03+0x62a>
 8004224:	4b74      	ldr	r3, [pc, #464]	; (80043f8 <StartTask03+0x7e8>)
 8004226:	791b      	ldrb	r3, [r3, #4]
 8004228:	2b52      	cmp	r3, #82	; 0x52
 800422a:	d106      	bne.n	800423a <StartTask03+0x62a>
	  				Init_CCR +=2;
 800422c:	4b73      	ldr	r3, [pc, #460]	; (80043fc <StartTask03+0x7ec>)
 800422e:	881b      	ldrh	r3, [r3, #0]
 8004230:	3302      	adds	r3, #2
 8004232:	b29a      	uxth	r2, r3
 8004234:	4b71      	ldr	r3, [pc, #452]	; (80043fc <StartTask03+0x7ec>)
 8004236:	801a      	strh	r2, [r3, #0]
 8004238:	e0bd      	b.n	80043b6 <StartTask03+0x7a6>
	  		}
	  		//cmd = "DCCR Z"
	  		else if(huart_data.buff[0] == 68 && huart_data.buff[1] == 67 && huart_data.buff[2] == 67 && huart_data.buff[3] == 82){
 800423a:	4b6f      	ldr	r3, [pc, #444]	; (80043f8 <StartTask03+0x7e8>)
 800423c:	785b      	ldrb	r3, [r3, #1]
 800423e:	2b44      	cmp	r3, #68	; 0x44
 8004240:	d112      	bne.n	8004268 <StartTask03+0x658>
 8004242:	4b6d      	ldr	r3, [pc, #436]	; (80043f8 <StartTask03+0x7e8>)
 8004244:	789b      	ldrb	r3, [r3, #2]
 8004246:	2b43      	cmp	r3, #67	; 0x43
 8004248:	d10e      	bne.n	8004268 <StartTask03+0x658>
 800424a:	4b6b      	ldr	r3, [pc, #428]	; (80043f8 <StartTask03+0x7e8>)
 800424c:	78db      	ldrb	r3, [r3, #3]
 800424e:	2b43      	cmp	r3, #67	; 0x43
 8004250:	d10a      	bne.n	8004268 <StartTask03+0x658>
 8004252:	4b69      	ldr	r3, [pc, #420]	; (80043f8 <StartTask03+0x7e8>)
 8004254:	791b      	ldrb	r3, [r3, #4]
 8004256:	2b52      	cmp	r3, #82	; 0x52
 8004258:	d106      	bne.n	8004268 <StartTask03+0x658>
	  				Init_CCR -=5;
 800425a:	4b68      	ldr	r3, [pc, #416]	; (80043fc <StartTask03+0x7ec>)
 800425c:	881b      	ldrh	r3, [r3, #0]
 800425e:	3b05      	subs	r3, #5
 8004260:	b29a      	uxth	r2, r3
 8004262:	4b66      	ldr	r3, [pc, #408]	; (80043fc <StartTask03+0x7ec>)
 8004264:	801a      	strh	r2, [r3, #0]
 8004266:	e0a6      	b.n	80043b6 <StartTask03+0x7a6>
	  		}
	  		//cmd = "INIT Z"
	  		else if(huart_data.buff[0] == 73 && huart_data.buff[1] == 78 && huart_data.buff[2] == 73 && huart_data.buff[3] == 84){
 8004268:	4b63      	ldr	r3, [pc, #396]	; (80043f8 <StartTask03+0x7e8>)
 800426a:	785b      	ldrb	r3, [r3, #1]
 800426c:	2b49      	cmp	r3, #73	; 0x49
 800426e:	d10f      	bne.n	8004290 <StartTask03+0x680>
 8004270:	4b61      	ldr	r3, [pc, #388]	; (80043f8 <StartTask03+0x7e8>)
 8004272:	789b      	ldrb	r3, [r3, #2]
 8004274:	2b4e      	cmp	r3, #78	; 0x4e
 8004276:	d10b      	bne.n	8004290 <StartTask03+0x680>
 8004278:	4b5f      	ldr	r3, [pc, #380]	; (80043f8 <StartTask03+0x7e8>)
 800427a:	78db      	ldrb	r3, [r3, #3]
 800427c:	2b49      	cmp	r3, #73	; 0x49
 800427e:	d107      	bne.n	8004290 <StartTask03+0x680>
 8004280:	4b5d      	ldr	r3, [pc, #372]	; (80043f8 <StartTask03+0x7e8>)
 8004282:	791b      	ldrb	r3, [r3, #4]
 8004284:	2b54      	cmp	r3, #84	; 0x54
 8004286:	d103      	bne.n	8004290 <StartTask03+0x680>
	  				is_init = 1;
 8004288:	4b5d      	ldr	r3, [pc, #372]	; (8004400 <StartTask03+0x7f0>)
 800428a:	2201      	movs	r2, #1
 800428c:	701a      	strb	r2, [r3, #0]
 800428e:	e092      	b.n	80043b6 <StartTask03+0x7a6>
	  		}
	  		//cmd = STOP Z
	  		else if(huart_data.buff[0] == 83 && huart_data.buff[1] == 84 && huart_data.buff[2] == 79 && huart_data.buff[3] == 80){
 8004290:	4b59      	ldr	r3, [pc, #356]	; (80043f8 <StartTask03+0x7e8>)
 8004292:	785b      	ldrb	r3, [r3, #1]
 8004294:	2b53      	cmp	r3, #83	; 0x53
 8004296:	d10f      	bne.n	80042b8 <StartTask03+0x6a8>
 8004298:	4b57      	ldr	r3, [pc, #348]	; (80043f8 <StartTask03+0x7e8>)
 800429a:	789b      	ldrb	r3, [r3, #2]
 800429c:	2b54      	cmp	r3, #84	; 0x54
 800429e:	d10b      	bne.n	80042b8 <StartTask03+0x6a8>
 80042a0:	4b55      	ldr	r3, [pc, #340]	; (80043f8 <StartTask03+0x7e8>)
 80042a2:	78db      	ldrb	r3, [r3, #3]
 80042a4:	2b4f      	cmp	r3, #79	; 0x4f
 80042a6:	d107      	bne.n	80042b8 <StartTask03+0x6a8>
 80042a8:	4b53      	ldr	r3, [pc, #332]	; (80043f8 <StartTask03+0x7e8>)
 80042aa:	791b      	ldrb	r3, [r3, #4]
 80042ac:	2b50      	cmp	r3, #80	; 0x50
 80042ae:	d103      	bne.n	80042b8 <StartTask03+0x6a8>
	  				is_stop_flying = 1;
 80042b0:	4b54      	ldr	r3, [pc, #336]	; (8004404 <StartTask03+0x7f4>)
 80042b2:	2201      	movs	r2, #1
 80042b4:	701a      	strb	r2, [r3, #0]
 80042b6:	e07e      	b.n	80043b6 <StartTask03+0x7a6>
	  		}
	  		//cmd = LEFT Z
	  		else if(huart_data.buff[0] == 76 && huart_data.buff[1] == 69 && huart_data.buff[2] == 70 && huart_data.buff[3] == 84){
 80042b8:	4b4f      	ldr	r3, [pc, #316]	; (80043f8 <StartTask03+0x7e8>)
 80042ba:	785b      	ldrb	r3, [r3, #1]
 80042bc:	2b4c      	cmp	r3, #76	; 0x4c
 80042be:	d113      	bne.n	80042e8 <StartTask03+0x6d8>
 80042c0:	4b4d      	ldr	r3, [pc, #308]	; (80043f8 <StartTask03+0x7e8>)
 80042c2:	789b      	ldrb	r3, [r3, #2]
 80042c4:	2b45      	cmp	r3, #69	; 0x45
 80042c6:	d10f      	bne.n	80042e8 <StartTask03+0x6d8>
 80042c8:	4b4b      	ldr	r3, [pc, #300]	; (80043f8 <StartTask03+0x7e8>)
 80042ca:	78db      	ldrb	r3, [r3, #3]
 80042cc:	2b46      	cmp	r3, #70	; 0x46
 80042ce:	d10b      	bne.n	80042e8 <StartTask03+0x6d8>
 80042d0:	4b49      	ldr	r3, [pc, #292]	; (80043f8 <StartTask03+0x7e8>)
 80042d2:	791b      	ldrb	r3, [r3, #4]
 80042d4:	2b54      	cmp	r3, #84	; 0x54
 80042d6:	d107      	bne.n	80042e8 <StartTask03+0x6d8>
	  				desired_roll_angle = -8;
 80042d8:	4b4b      	ldr	r3, [pc, #300]	; (8004408 <StartTask03+0x7f8>)
 80042da:	f04f 4241 	mov.w	r2, #3238002688	; 0xc1000000
 80042de:	601a      	str	r2, [r3, #0]
	  				temp_count_roll = WAIT_FOR_DIRECTING;
 80042e0:	4b4a      	ldr	r3, [pc, #296]	; (800440c <StartTask03+0x7fc>)
 80042e2:	4a4b      	ldr	r2, [pc, #300]	; (8004410 <StartTask03+0x800>)
 80042e4:	601a      	str	r2, [r3, #0]
 80042e6:	e066      	b.n	80043b6 <StartTask03+0x7a6>
	  		}
	  		//cmd = RIGHT Z
	  		else if(huart_data.buff[0] == 82 && huart_data.buff[1] == 73 && huart_data.buff[2] == 71 && huart_data.buff[3] == 72 && huart_data.buff[4] == 84){
 80042e8:	4b43      	ldr	r3, [pc, #268]	; (80043f8 <StartTask03+0x7e8>)
 80042ea:	785b      	ldrb	r3, [r3, #1]
 80042ec:	2b52      	cmp	r3, #82	; 0x52
 80042ee:	d117      	bne.n	8004320 <StartTask03+0x710>
 80042f0:	4b41      	ldr	r3, [pc, #260]	; (80043f8 <StartTask03+0x7e8>)
 80042f2:	789b      	ldrb	r3, [r3, #2]
 80042f4:	2b49      	cmp	r3, #73	; 0x49
 80042f6:	d113      	bne.n	8004320 <StartTask03+0x710>
 80042f8:	4b3f      	ldr	r3, [pc, #252]	; (80043f8 <StartTask03+0x7e8>)
 80042fa:	78db      	ldrb	r3, [r3, #3]
 80042fc:	2b47      	cmp	r3, #71	; 0x47
 80042fe:	d10f      	bne.n	8004320 <StartTask03+0x710>
 8004300:	4b3d      	ldr	r3, [pc, #244]	; (80043f8 <StartTask03+0x7e8>)
 8004302:	791b      	ldrb	r3, [r3, #4]
 8004304:	2b48      	cmp	r3, #72	; 0x48
 8004306:	d10b      	bne.n	8004320 <StartTask03+0x710>
 8004308:	4b3b      	ldr	r3, [pc, #236]	; (80043f8 <StartTask03+0x7e8>)
 800430a:	795b      	ldrb	r3, [r3, #5]
 800430c:	2b54      	cmp	r3, #84	; 0x54
 800430e:	d107      	bne.n	8004320 <StartTask03+0x710>
	  				desired_roll_angle = 8;
 8004310:	4b3d      	ldr	r3, [pc, #244]	; (8004408 <StartTask03+0x7f8>)
 8004312:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
 8004316:	601a      	str	r2, [r3, #0]
	  				temp_count_roll = WAIT_FOR_DIRECTING;
 8004318:	4b3c      	ldr	r3, [pc, #240]	; (800440c <StartTask03+0x7fc>)
 800431a:	4a3d      	ldr	r2, [pc, #244]	; (8004410 <StartTask03+0x800>)
 800431c:	601a      	str	r2, [r3, #0]
 800431e:	e04a      	b.n	80043b6 <StartTask03+0x7a6>
	  		}
	  		//cmd = FORWARD Z
	  		else if(huart_data.buff[0] == 70 && huart_data.buff[1] == 79 && huart_data.buff[2] == 82 && huart_data.buff[3] == 87 && huart_data.buff[4] == 65 && huart_data.buff[5] == 82 && huart_data.buff[6] == 68){
 8004320:	4b35      	ldr	r3, [pc, #212]	; (80043f8 <StartTask03+0x7e8>)
 8004322:	785b      	ldrb	r3, [r3, #1]
 8004324:	2b46      	cmp	r3, #70	; 0x46
 8004326:	d11f      	bne.n	8004368 <StartTask03+0x758>
 8004328:	4b33      	ldr	r3, [pc, #204]	; (80043f8 <StartTask03+0x7e8>)
 800432a:	789b      	ldrb	r3, [r3, #2]
 800432c:	2b4f      	cmp	r3, #79	; 0x4f
 800432e:	d11b      	bne.n	8004368 <StartTask03+0x758>
 8004330:	4b31      	ldr	r3, [pc, #196]	; (80043f8 <StartTask03+0x7e8>)
 8004332:	78db      	ldrb	r3, [r3, #3]
 8004334:	2b52      	cmp	r3, #82	; 0x52
 8004336:	d117      	bne.n	8004368 <StartTask03+0x758>
 8004338:	4b2f      	ldr	r3, [pc, #188]	; (80043f8 <StartTask03+0x7e8>)
 800433a:	791b      	ldrb	r3, [r3, #4]
 800433c:	2b57      	cmp	r3, #87	; 0x57
 800433e:	d113      	bne.n	8004368 <StartTask03+0x758>
 8004340:	4b2d      	ldr	r3, [pc, #180]	; (80043f8 <StartTask03+0x7e8>)
 8004342:	795b      	ldrb	r3, [r3, #5]
 8004344:	2b41      	cmp	r3, #65	; 0x41
 8004346:	d10f      	bne.n	8004368 <StartTask03+0x758>
 8004348:	4b2b      	ldr	r3, [pc, #172]	; (80043f8 <StartTask03+0x7e8>)
 800434a:	799b      	ldrb	r3, [r3, #6]
 800434c:	2b52      	cmp	r3, #82	; 0x52
 800434e:	d10b      	bne.n	8004368 <StartTask03+0x758>
 8004350:	4b29      	ldr	r3, [pc, #164]	; (80043f8 <StartTask03+0x7e8>)
 8004352:	79db      	ldrb	r3, [r3, #7]
 8004354:	2b44      	cmp	r3, #68	; 0x44
 8004356:	d107      	bne.n	8004368 <StartTask03+0x758>
	  				desired_pitch_angle = -8;
 8004358:	4b2e      	ldr	r3, [pc, #184]	; (8004414 <StartTask03+0x804>)
 800435a:	f04f 4241 	mov.w	r2, #3238002688	; 0xc1000000
 800435e:	601a      	str	r2, [r3, #0]
	  				temp_count_pitch = WAIT_FOR_DIRECTING;
 8004360:	4b2d      	ldr	r3, [pc, #180]	; (8004418 <StartTask03+0x808>)
 8004362:	4a2b      	ldr	r2, [pc, #172]	; (8004410 <StartTask03+0x800>)
 8004364:	601a      	str	r2, [r3, #0]
 8004366:	e026      	b.n	80043b6 <StartTask03+0x7a6>
	  		}
	  		//cmd = BACKWARD Z
	  		else if(huart_data.buff[0] == 66 && huart_data.buff[1] == 65 && huart_data.buff[2] == 67 && huart_data.buff[3] == 75 && huart_data.buff[4] == 87 && huart_data.buff[5] == 65 && huart_data.buff[6] == 82 && huart_data.buff[7] == 68){
 8004368:	4b23      	ldr	r3, [pc, #140]	; (80043f8 <StartTask03+0x7e8>)
 800436a:	785b      	ldrb	r3, [r3, #1]
 800436c:	2b42      	cmp	r3, #66	; 0x42
 800436e:	d122      	bne.n	80043b6 <StartTask03+0x7a6>
 8004370:	4b21      	ldr	r3, [pc, #132]	; (80043f8 <StartTask03+0x7e8>)
 8004372:	789b      	ldrb	r3, [r3, #2]
 8004374:	2b41      	cmp	r3, #65	; 0x41
 8004376:	d11e      	bne.n	80043b6 <StartTask03+0x7a6>
 8004378:	4b1f      	ldr	r3, [pc, #124]	; (80043f8 <StartTask03+0x7e8>)
 800437a:	78db      	ldrb	r3, [r3, #3]
 800437c:	2b43      	cmp	r3, #67	; 0x43
 800437e:	d11a      	bne.n	80043b6 <StartTask03+0x7a6>
 8004380:	4b1d      	ldr	r3, [pc, #116]	; (80043f8 <StartTask03+0x7e8>)
 8004382:	791b      	ldrb	r3, [r3, #4]
 8004384:	2b4b      	cmp	r3, #75	; 0x4b
 8004386:	d116      	bne.n	80043b6 <StartTask03+0x7a6>
 8004388:	4b1b      	ldr	r3, [pc, #108]	; (80043f8 <StartTask03+0x7e8>)
 800438a:	795b      	ldrb	r3, [r3, #5]
 800438c:	2b57      	cmp	r3, #87	; 0x57
 800438e:	d112      	bne.n	80043b6 <StartTask03+0x7a6>
 8004390:	4b19      	ldr	r3, [pc, #100]	; (80043f8 <StartTask03+0x7e8>)
 8004392:	799b      	ldrb	r3, [r3, #6]
 8004394:	2b41      	cmp	r3, #65	; 0x41
 8004396:	d10e      	bne.n	80043b6 <StartTask03+0x7a6>
 8004398:	4b17      	ldr	r3, [pc, #92]	; (80043f8 <StartTask03+0x7e8>)
 800439a:	79db      	ldrb	r3, [r3, #7]
 800439c:	2b52      	cmp	r3, #82	; 0x52
 800439e:	d10a      	bne.n	80043b6 <StartTask03+0x7a6>
 80043a0:	4b15      	ldr	r3, [pc, #84]	; (80043f8 <StartTask03+0x7e8>)
 80043a2:	7a1b      	ldrb	r3, [r3, #8]
 80043a4:	2b44      	cmp	r3, #68	; 0x44
 80043a6:	d106      	bne.n	80043b6 <StartTask03+0x7a6>
	  				desired_pitch_angle = 8;
 80043a8:	4b1a      	ldr	r3, [pc, #104]	; (8004414 <StartTask03+0x804>)
 80043aa:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
 80043ae:	601a      	str	r2, [r3, #0]
	  				temp_count_pitch = WAIT_FOR_DIRECTING;
 80043b0:	4b19      	ldr	r3, [pc, #100]	; (8004418 <StartTask03+0x808>)
 80043b2:	4a17      	ldr	r2, [pc, #92]	; (8004410 <StartTask03+0x800>)
 80043b4:	601a      	str	r2, [r3, #0]
	  		}
			memset(huart_data.buff, 0, MAX_BUFFER_SIZE);
 80043b6:	221e      	movs	r2, #30
 80043b8:	2100      	movs	r1, #0
 80043ba:	4818      	ldr	r0, [pc, #96]	; (800441c <StartTask03+0x80c>)
 80043bc:	f005 fb04 	bl	80099c8 <memset>
			huart_data.index = 0;
 80043c0:	4b0d      	ldr	r3, [pc, #52]	; (80043f8 <StartTask03+0x7e8>)
 80043c2:	2200      	movs	r2, #0
 80043c4:	77da      	strb	r2, [r3, #31]
			huart_data.flag = 0;
 80043c6:	4b0c      	ldr	r3, [pc, #48]	; (80043f8 <StartTask03+0x7e8>)
 80043c8:	2200      	movs	r2, #0
 80043ca:	701a      	strb	r2, [r3, #0]
	  }
	  	  //direction

	  if(temp_count_roll > 0)
 80043cc:	4b0f      	ldr	r3, [pc, #60]	; (800440c <StartTask03+0x7fc>)
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f04f 0100 	mov.w	r1, #0
 80043d4:	4618      	mov	r0, r3
 80043d6:	f7fc fe71 	bl	80010bc <__aeabi_fcmpgt>
 80043da:	4603      	mov	r3, r0
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d01f      	beq.n	8004420 <StartTask03+0x810>
	  {
		  temp_count_roll = temp_count_roll - 1;
 80043e0:	4b0a      	ldr	r3, [pc, #40]	; (800440c <StartTask03+0x7fc>)
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80043e8:	4618      	mov	r0, r3
 80043ea:	f7fc fba1 	bl	8000b30 <__aeabi_fsub>
 80043ee:	4603      	mov	r3, r0
 80043f0:	461a      	mov	r2, r3
 80043f2:	4b06      	ldr	r3, [pc, #24]	; (800440c <StartTask03+0x7fc>)
 80043f4:	601a      	str	r2, [r3, #0]
 80043f6:	e021      	b.n	800443c <StartTask03+0x82c>
 80043f8:	20000650 	.word	0x20000650
 80043fc:	20000008 	.word	0x20000008
 8004400:	200007f2 	.word	0x200007f2
 8004404:	200007f1 	.word	0x200007f1
 8004408:	200007dc 	.word	0x200007dc
 800440c:	200007e8 	.word	0x200007e8
 8004410:	47c35000 	.word	0x47c35000
 8004414:	200007e0 	.word	0x200007e0
 8004418:	200007ec 	.word	0x200007ec
 800441c:	20000651 	.word	0x20000651
	  }
	  else if(temp_count_roll == 0)
 8004420:	4b59      	ldr	r3, [pc, #356]	; (8004588 <StartTask03+0x978>)
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f04f 0100 	mov.w	r1, #0
 8004428:	4618      	mov	r0, r3
 800442a:	f7fc fe1f 	bl	800106c <__aeabi_fcmpeq>
 800442e:	4603      	mov	r3, r0
 8004430:	2b00      	cmp	r3, #0
 8004432:	d003      	beq.n	800443c <StartTask03+0x82c>
	  {
		  desired_roll_angle = 0;
 8004434:	4b55      	ldr	r3, [pc, #340]	; (800458c <StartTask03+0x97c>)
 8004436:	f04f 0200 	mov.w	r2, #0
 800443a:	601a      	str	r2, [r3, #0]
	  }

	  if(temp_count_pitch > 0)
 800443c:	4b54      	ldr	r3, [pc, #336]	; (8004590 <StartTask03+0x980>)
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f04f 0100 	mov.w	r1, #0
 8004444:	4618      	mov	r0, r3
 8004446:	f7fc fe39 	bl	80010bc <__aeabi_fcmpgt>
 800444a:	4603      	mov	r3, r0
 800444c:	2b00      	cmp	r3, #0
 800444e:	d00b      	beq.n	8004468 <StartTask03+0x858>
	  {
		  temp_count_pitch = temp_count_pitch - 1;
 8004450:	4b4f      	ldr	r3, [pc, #316]	; (8004590 <StartTask03+0x980>)
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8004458:	4618      	mov	r0, r3
 800445a:	f7fc fb69 	bl	8000b30 <__aeabi_fsub>
 800445e:	4603      	mov	r3, r0
 8004460:	461a      	mov	r2, r3
 8004462:	4b4b      	ldr	r3, [pc, #300]	; (8004590 <StartTask03+0x980>)
 8004464:	601a      	str	r2, [r3, #0]
 8004466:	e00d      	b.n	8004484 <StartTask03+0x874>
	  }
	  else if(temp_count_pitch == 0)
 8004468:	4b49      	ldr	r3, [pc, #292]	; (8004590 <StartTask03+0x980>)
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f04f 0100 	mov.w	r1, #0
 8004470:	4618      	mov	r0, r3
 8004472:	f7fc fdfb 	bl	800106c <__aeabi_fcmpeq>
 8004476:	4603      	mov	r3, r0
 8004478:	2b00      	cmp	r3, #0
 800447a:	d003      	beq.n	8004484 <StartTask03+0x874>
	  {
		  desired_pitch_angle = 0;
 800447c:	4b45      	ldr	r3, [pc, #276]	; (8004594 <StartTask03+0x984>)
 800447e:	f04f 0200 	mov.w	r2, #0
 8004482:	601a      	str	r2, [r3, #0]
	  }

	  if(is_init == 1){
 8004484:	4b44      	ldr	r3, [pc, #272]	; (8004598 <StartTask03+0x988>)
 8004486:	781b      	ldrb	r3, [r3, #0]
 8004488:	2b01      	cmp	r3, #1
 800448a:	d13a      	bne.n	8004502 <StartTask03+0x8f2>
		  for(int i=50; i<=60; i++){
 800448c:	2332      	movs	r3, #50	; 0x32
 800448e:	60fb      	str	r3, [r7, #12]
 8004490:	e015      	b.n	80044be <StartTask03+0x8ae>
			  //debug
			  htim3.Instance->CCR2 = i;
 8004492:	4b42      	ldr	r3, [pc, #264]	; (800459c <StartTask03+0x98c>)
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	68fa      	ldr	r2, [r7, #12]
 8004498:	639a      	str	r2, [r3, #56]	; 0x38
			  htim3.Instance->CCR3 = i;
 800449a:	4b40      	ldr	r3, [pc, #256]	; (800459c <StartTask03+0x98c>)
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	68fa      	ldr	r2, [r7, #12]
 80044a0:	63da      	str	r2, [r3, #60]	; 0x3c
			  htim3.Instance->CCR1 = i;
 80044a2:	4b3e      	ldr	r3, [pc, #248]	; (800459c <StartTask03+0x98c>)
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	68fa      	ldr	r2, [r7, #12]
 80044a8:	635a      	str	r2, [r3, #52]	; 0x34
			  htim3.Instance->CCR4 = i;
 80044aa:	4b3c      	ldr	r3, [pc, #240]	; (800459c <StartTask03+0x98c>)
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	68fa      	ldr	r2, [r7, #12]
 80044b0:	641a      	str	r2, [r3, #64]	; 0x40
			  HAL_Delay(200);
 80044b2:	20c8      	movs	r0, #200	; 0xc8
 80044b4:	f000 fc38 	bl	8004d28 <HAL_Delay>
		  for(int i=50; i<=60; i++){
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	3301      	adds	r3, #1
 80044bc:	60fb      	str	r3, [r7, #12]
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	2b3c      	cmp	r3, #60	; 0x3c
 80044c2:	dde6      	ble.n	8004492 <StartTask03+0x882>
		  }

		  for(int i = 60; i>=50; i--){
 80044c4:	233c      	movs	r3, #60	; 0x3c
 80044c6:	60bb      	str	r3, [r7, #8]
 80044c8:	e015      	b.n	80044f6 <StartTask03+0x8e6>
			  //debug9
			  htim3.Instance->CCR2 = i;
 80044ca:	4b34      	ldr	r3, [pc, #208]	; (800459c <StartTask03+0x98c>)
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	68ba      	ldr	r2, [r7, #8]
 80044d0:	639a      	str	r2, [r3, #56]	; 0x38
			  htim3.Instance->CCR3 = i;
 80044d2:	4b32      	ldr	r3, [pc, #200]	; (800459c <StartTask03+0x98c>)
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	68ba      	ldr	r2, [r7, #8]
 80044d8:	63da      	str	r2, [r3, #60]	; 0x3c
			  htim3.Instance->CCR1 = i;
 80044da:	4b30      	ldr	r3, [pc, #192]	; (800459c <StartTask03+0x98c>)
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	68ba      	ldr	r2, [r7, #8]
 80044e0:	635a      	str	r2, [r3, #52]	; 0x34
			  htim3.Instance->CCR4 = i;
 80044e2:	4b2e      	ldr	r3, [pc, #184]	; (800459c <StartTask03+0x98c>)
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	68ba      	ldr	r2, [r7, #8]
 80044e8:	641a      	str	r2, [r3, #64]	; 0x40
			  HAL_Delay(200);
 80044ea:	20c8      	movs	r0, #200	; 0xc8
 80044ec:	f000 fc1c 	bl	8004d28 <HAL_Delay>
		  for(int i = 60; i>=50; i--){
 80044f0:	68bb      	ldr	r3, [r7, #8]
 80044f2:	3b01      	subs	r3, #1
 80044f4:	60bb      	str	r3, [r7, #8]
 80044f6:	68bb      	ldr	r3, [r7, #8]
 80044f8:	2b31      	cmp	r3, #49	; 0x31
 80044fa:	dce6      	bgt.n	80044ca <StartTask03+0x8ba>
		  }
		  is_init = 0;
 80044fc:	4b26      	ldr	r3, [pc, #152]	; (8004598 <StartTask03+0x988>)
 80044fe:	2200      	movs	r2, #0
 8004500:	701a      	strb	r2, [r3, #0]
	  }

	  if(is_stop_flying == 1)
 8004502:	4b27      	ldr	r3, [pc, #156]	; (80045a0 <StartTask03+0x990>)
 8004504:	781b      	ldrb	r3, [r3, #0]
 8004506:	2b01      	cmp	r3, #1
 8004508:	d112      	bne.n	8004530 <StartTask03+0x920>
	  {
		  htim3.Instance->CCR2 = 50;
 800450a:	4b24      	ldr	r3, [pc, #144]	; (800459c <StartTask03+0x98c>)
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	2232      	movs	r2, #50	; 0x32
 8004510:	639a      	str	r2, [r3, #56]	; 0x38
		  htim3.Instance->CCR3 = 50;
 8004512:	4b22      	ldr	r3, [pc, #136]	; (800459c <StartTask03+0x98c>)
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	2232      	movs	r2, #50	; 0x32
 8004518:	63da      	str	r2, [r3, #60]	; 0x3c
		  htim3.Instance->CCR1 = 50;
 800451a:	4b20      	ldr	r3, [pc, #128]	; (800459c <StartTask03+0x98c>)
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	2232      	movs	r2, #50	; 0x32
 8004520:	635a      	str	r2, [r3, #52]	; 0x34
		  htim3.Instance->CCR4 = 50;
 8004522:	4b1e      	ldr	r3, [pc, #120]	; (800459c <StartTask03+0x98c>)
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	2232      	movs	r2, #50	; 0x32
 8004528:	641a      	str	r2, [r3, #64]	; 0x40
		  is_already_to_fly = 0;
 800452a:	4b1e      	ldr	r3, [pc, #120]	; (80045a4 <StartTask03+0x994>)
 800452c:	2200      	movs	r2, #0
 800452e:	701a      	strb	r2, [r3, #0]
	  }

	  if(is_already_to_fly == 1)
 8004530:	4b1c      	ldr	r3, [pc, #112]	; (80045a4 <StartTask03+0x994>)
 8004532:	781b      	ldrb	r3, [r3, #0]
 8004534:	2b01      	cmp	r3, #1
 8004536:	f47f ab6f 	bne.w	8003c18 <StartTask03+0x8>
	  {
		  htim3.Instance->CCR2 = RF_2_wing;
 800453a:	4b1b      	ldr	r3, [pc, #108]	; (80045a8 <StartTask03+0x998>)
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	4a17      	ldr	r2, [pc, #92]	; (800459c <StartTask03+0x98c>)
 8004540:	6814      	ldr	r4, [r2, #0]
 8004542:	4618      	mov	r0, r3
 8004544:	f7fc fdc4 	bl	80010d0 <__aeabi_f2uiz>
 8004548:	4603      	mov	r3, r0
 800454a:	63a3      	str	r3, [r4, #56]	; 0x38
		  htim3.Instance->CCR3 = RB_3_wing;
 800454c:	4b17      	ldr	r3, [pc, #92]	; (80045ac <StartTask03+0x99c>)
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	4a12      	ldr	r2, [pc, #72]	; (800459c <StartTask03+0x98c>)
 8004552:	6814      	ldr	r4, [r2, #0]
 8004554:	4618      	mov	r0, r3
 8004556:	f7fc fdbb 	bl	80010d0 <__aeabi_f2uiz>
 800455a:	4603      	mov	r3, r0
 800455c:	63e3      	str	r3, [r4, #60]	; 0x3c
		  htim3.Instance->CCR1 = LF_1_wing;
 800455e:	4b14      	ldr	r3, [pc, #80]	; (80045b0 <StartTask03+0x9a0>)
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	4a0e      	ldr	r2, [pc, #56]	; (800459c <StartTask03+0x98c>)
 8004564:	6814      	ldr	r4, [r2, #0]
 8004566:	4618      	mov	r0, r3
 8004568:	f7fc fdb2 	bl	80010d0 <__aeabi_f2uiz>
 800456c:	4603      	mov	r3, r0
 800456e:	6363      	str	r3, [r4, #52]	; 0x34
		  htim3.Instance->CCR4 = LB_4_wing;
 8004570:	4b10      	ldr	r3, [pc, #64]	; (80045b4 <StartTask03+0x9a4>)
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	4a09      	ldr	r2, [pc, #36]	; (800459c <StartTask03+0x98c>)
 8004576:	6814      	ldr	r4, [r2, #0]
 8004578:	4618      	mov	r0, r3
 800457a:	f7fc fda9 	bl	80010d0 <__aeabi_f2uiz>
 800457e:	4603      	mov	r3, r0
 8004580:	6423      	str	r3, [r4, #64]	; 0x40
	  if(huart_data.flag == 1){
 8004582:	f7ff bb49 	b.w	8003c18 <StartTask03+0x8>
 8004586:	bf00      	nop
 8004588:	200007e8 	.word	0x200007e8
 800458c:	200007dc 	.word	0x200007dc
 8004590:	200007ec 	.word	0x200007ec
 8004594:	200007e0 	.word	0x200007e0
 8004598:	200007f2 	.word	0x200007f2
 800459c:	2000052c 	.word	0x2000052c
 80045a0:	200007f1 	.word	0x200007f1
 80045a4:	200007f0 	.word	0x200007f0
 80045a8:	200007d0 	.word	0x200007d0
 80045ac:	200007d4 	.word	0x200007d4
 80045b0:	200007cc 	.word	0x200007cc
 80045b4:	200007d8 	.word	0x200007d8

080045b8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80045b8:	b580      	push	{r7, lr}
 80045ba:	b082      	sub	sp, #8
 80045bc:	af00      	add	r7, sp, #0
 80045be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	4a04      	ldr	r2, [pc, #16]	; (80045d8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80045c6:	4293      	cmp	r3, r2
 80045c8:	d101      	bne.n	80045ce <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80045ca:	f000 fb91 	bl	8004cf0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80045ce:	bf00      	nop
 80045d0:	3708      	adds	r7, #8
 80045d2:	46bd      	mov	sp, r7
 80045d4:	bd80      	pop	{r7, pc}
 80045d6:	bf00      	nop
 80045d8:	40012c00 	.word	0x40012c00

080045dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80045dc:	b480      	push	{r7}
 80045de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80045e0:	b672      	cpsid	i
}
 80045e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80045e4:	e7fe      	b.n	80045e4 <Error_Handler+0x8>

080045e6 <Ascii_to_Int>:
int Ascii_to_Int(char number)
{
 80045e6:	b480      	push	{r7}
 80045e8:	b085      	sub	sp, #20
 80045ea:	af00      	add	r7, sp, #0
 80045ec:	4603      	mov	r3, r0
 80045ee:	71fb      	strb	r3, [r7, #7]
    for(int i = 48; i < 48+10; i++)
 80045f0:	2330      	movs	r3, #48	; 0x30
 80045f2:	60fb      	str	r3, [r7, #12]
 80045f4:	e009      	b.n	800460a <Ascii_to_Int+0x24>
        if(number == i)
 80045f6:	79fb      	ldrb	r3, [r7, #7]
 80045f8:	68fa      	ldr	r2, [r7, #12]
 80045fa:	429a      	cmp	r2, r3
 80045fc:	d102      	bne.n	8004604 <Ascii_to_Int+0x1e>
            return (i-48);
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	3b30      	subs	r3, #48	; 0x30
 8004602:	e006      	b.n	8004612 <Ascii_to_Int+0x2c>
    for(int i = 48; i < 48+10; i++)
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	3301      	adds	r3, #1
 8004608:	60fb      	str	r3, [r7, #12]
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	2b39      	cmp	r3, #57	; 0x39
 800460e:	ddf2      	ble.n	80045f6 <Ascii_to_Int+0x10>
    return 0;
 8004610:	2300      	movs	r3, #0
}
 8004612:	4618      	mov	r0, r3
 8004614:	3714      	adds	r7, #20
 8004616:	46bd      	mov	sp, r7
 8004618:	bc80      	pop	{r7}
 800461a:	4770      	bx	lr

0800461c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800461c:	b580      	push	{r7, lr}
 800461e:	b084      	sub	sp, #16
 8004620:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8004622:	4b18      	ldr	r3, [pc, #96]	; (8004684 <HAL_MspInit+0x68>)
 8004624:	699b      	ldr	r3, [r3, #24]
 8004626:	4a17      	ldr	r2, [pc, #92]	; (8004684 <HAL_MspInit+0x68>)
 8004628:	f043 0301 	orr.w	r3, r3, #1
 800462c:	6193      	str	r3, [r2, #24]
 800462e:	4b15      	ldr	r3, [pc, #84]	; (8004684 <HAL_MspInit+0x68>)
 8004630:	699b      	ldr	r3, [r3, #24]
 8004632:	f003 0301 	and.w	r3, r3, #1
 8004636:	60bb      	str	r3, [r7, #8]
 8004638:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800463a:	4b12      	ldr	r3, [pc, #72]	; (8004684 <HAL_MspInit+0x68>)
 800463c:	69db      	ldr	r3, [r3, #28]
 800463e:	4a11      	ldr	r2, [pc, #68]	; (8004684 <HAL_MspInit+0x68>)
 8004640:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004644:	61d3      	str	r3, [r2, #28]
 8004646:	4b0f      	ldr	r3, [pc, #60]	; (8004684 <HAL_MspInit+0x68>)
 8004648:	69db      	ldr	r3, [r3, #28]
 800464a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800464e:	607b      	str	r3, [r7, #4]
 8004650:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8004652:	2200      	movs	r2, #0
 8004654:	210f      	movs	r1, #15
 8004656:	f06f 0001 	mvn.w	r0, #1
 800465a:	f000 fc3e 	bl	8004eda <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800465e:	4b0a      	ldr	r3, [pc, #40]	; (8004688 <HAL_MspInit+0x6c>)
 8004660:	685b      	ldr	r3, [r3, #4]
 8004662:	60fb      	str	r3, [r7, #12]
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800466a:	60fb      	str	r3, [r7, #12]
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004672:	60fb      	str	r3, [r7, #12]
 8004674:	4a04      	ldr	r2, [pc, #16]	; (8004688 <HAL_MspInit+0x6c>)
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800467a:	bf00      	nop
 800467c:	3710      	adds	r7, #16
 800467e:	46bd      	mov	sp, r7
 8004680:	bd80      	pop	{r7, pc}
 8004682:	bf00      	nop
 8004684:	40021000 	.word	0x40021000
 8004688:	40010000 	.word	0x40010000

0800468c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800468c:	b580      	push	{r7, lr}
 800468e:	b088      	sub	sp, #32
 8004690:	af00      	add	r7, sp, #0
 8004692:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004694:	f107 0310 	add.w	r3, r7, #16
 8004698:	2200      	movs	r2, #0
 800469a:	601a      	str	r2, [r3, #0]
 800469c:	605a      	str	r2, [r3, #4]
 800469e:	609a      	str	r2, [r3, #8]
 80046a0:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	4a15      	ldr	r2, [pc, #84]	; (80046fc <HAL_I2C_MspInit+0x70>)
 80046a8:	4293      	cmp	r3, r2
 80046aa:	d123      	bne.n	80046f4 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80046ac:	4b14      	ldr	r3, [pc, #80]	; (8004700 <HAL_I2C_MspInit+0x74>)
 80046ae:	699b      	ldr	r3, [r3, #24]
 80046b0:	4a13      	ldr	r2, [pc, #76]	; (8004700 <HAL_I2C_MspInit+0x74>)
 80046b2:	f043 0308 	orr.w	r3, r3, #8
 80046b6:	6193      	str	r3, [r2, #24]
 80046b8:	4b11      	ldr	r3, [pc, #68]	; (8004700 <HAL_I2C_MspInit+0x74>)
 80046ba:	699b      	ldr	r3, [r3, #24]
 80046bc:	f003 0308 	and.w	r3, r3, #8
 80046c0:	60fb      	str	r3, [r7, #12]
 80046c2:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80046c4:	23c0      	movs	r3, #192	; 0xc0
 80046c6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80046c8:	2312      	movs	r3, #18
 80046ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80046cc:	2303      	movs	r3, #3
 80046ce:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80046d0:	f107 0310 	add.w	r3, r7, #16
 80046d4:	4619      	mov	r1, r3
 80046d6:	480b      	ldr	r0, [pc, #44]	; (8004704 <HAL_I2C_MspInit+0x78>)
 80046d8:	f000 fcda 	bl	8005090 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80046dc:	4b08      	ldr	r3, [pc, #32]	; (8004700 <HAL_I2C_MspInit+0x74>)
 80046de:	69db      	ldr	r3, [r3, #28]
 80046e0:	4a07      	ldr	r2, [pc, #28]	; (8004700 <HAL_I2C_MspInit+0x74>)
 80046e2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80046e6:	61d3      	str	r3, [r2, #28]
 80046e8:	4b05      	ldr	r3, [pc, #20]	; (8004700 <HAL_I2C_MspInit+0x74>)
 80046ea:	69db      	ldr	r3, [r3, #28]
 80046ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80046f0:	60bb      	str	r3, [r7, #8]
 80046f2:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80046f4:	bf00      	nop
 80046f6:	3720      	adds	r7, #32
 80046f8:	46bd      	mov	sp, r7
 80046fa:	bd80      	pop	{r7, pc}
 80046fc:	40005400 	.word	0x40005400
 8004700:	40021000 	.word	0x40021000
 8004704:	40010c00 	.word	0x40010c00

08004708 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004708:	b480      	push	{r7}
 800470a:	b085      	sub	sp, #20
 800470c:	af00      	add	r7, sp, #0
 800470e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	4a09      	ldr	r2, [pc, #36]	; (800473c <HAL_TIM_Base_MspInit+0x34>)
 8004716:	4293      	cmp	r3, r2
 8004718:	d10b      	bne.n	8004732 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800471a:	4b09      	ldr	r3, [pc, #36]	; (8004740 <HAL_TIM_Base_MspInit+0x38>)
 800471c:	69db      	ldr	r3, [r3, #28]
 800471e:	4a08      	ldr	r2, [pc, #32]	; (8004740 <HAL_TIM_Base_MspInit+0x38>)
 8004720:	f043 0302 	orr.w	r3, r3, #2
 8004724:	61d3      	str	r3, [r2, #28]
 8004726:	4b06      	ldr	r3, [pc, #24]	; (8004740 <HAL_TIM_Base_MspInit+0x38>)
 8004728:	69db      	ldr	r3, [r3, #28]
 800472a:	f003 0302 	and.w	r3, r3, #2
 800472e:	60fb      	str	r3, [r7, #12]
 8004730:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8004732:	bf00      	nop
 8004734:	3714      	adds	r7, #20
 8004736:	46bd      	mov	sp, r7
 8004738:	bc80      	pop	{r7}
 800473a:	4770      	bx	lr
 800473c:	40000400 	.word	0x40000400
 8004740:	40021000 	.word	0x40021000

08004744 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004744:	b580      	push	{r7, lr}
 8004746:	b088      	sub	sp, #32
 8004748:	af00      	add	r7, sp, #0
 800474a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800474c:	f107 0310 	add.w	r3, r7, #16
 8004750:	2200      	movs	r2, #0
 8004752:	601a      	str	r2, [r3, #0]
 8004754:	605a      	str	r2, [r3, #4]
 8004756:	609a      	str	r2, [r3, #8]
 8004758:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	4a1b      	ldr	r2, [pc, #108]	; (80047cc <HAL_TIM_MspPostInit+0x88>)
 8004760:	4293      	cmp	r3, r2
 8004762:	d12f      	bne.n	80047c4 <HAL_TIM_MspPostInit+0x80>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004764:	4b1a      	ldr	r3, [pc, #104]	; (80047d0 <HAL_TIM_MspPostInit+0x8c>)
 8004766:	699b      	ldr	r3, [r3, #24]
 8004768:	4a19      	ldr	r2, [pc, #100]	; (80047d0 <HAL_TIM_MspPostInit+0x8c>)
 800476a:	f043 0304 	orr.w	r3, r3, #4
 800476e:	6193      	str	r3, [r2, #24]
 8004770:	4b17      	ldr	r3, [pc, #92]	; (80047d0 <HAL_TIM_MspPostInit+0x8c>)
 8004772:	699b      	ldr	r3, [r3, #24]
 8004774:	f003 0304 	and.w	r3, r3, #4
 8004778:	60fb      	str	r3, [r7, #12]
 800477a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800477c:	4b14      	ldr	r3, [pc, #80]	; (80047d0 <HAL_TIM_MspPostInit+0x8c>)
 800477e:	699b      	ldr	r3, [r3, #24]
 8004780:	4a13      	ldr	r2, [pc, #76]	; (80047d0 <HAL_TIM_MspPostInit+0x8c>)
 8004782:	f043 0308 	orr.w	r3, r3, #8
 8004786:	6193      	str	r3, [r2, #24]
 8004788:	4b11      	ldr	r3, [pc, #68]	; (80047d0 <HAL_TIM_MspPostInit+0x8c>)
 800478a:	699b      	ldr	r3, [r3, #24]
 800478c:	f003 0308 	and.w	r3, r3, #8
 8004790:	60bb      	str	r3, [r7, #8]
 8004792:	68bb      	ldr	r3, [r7, #8]
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004794:	23c0      	movs	r3, #192	; 0xc0
 8004796:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004798:	2302      	movs	r3, #2
 800479a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800479c:	2302      	movs	r3, #2
 800479e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80047a0:	f107 0310 	add.w	r3, r7, #16
 80047a4:	4619      	mov	r1, r3
 80047a6:	480b      	ldr	r0, [pc, #44]	; (80047d4 <HAL_TIM_MspPostInit+0x90>)
 80047a8:	f000 fc72 	bl	8005090 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80047ac:	2303      	movs	r3, #3
 80047ae:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80047b0:	2302      	movs	r3, #2
 80047b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80047b4:	2302      	movs	r3, #2
 80047b6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80047b8:	f107 0310 	add.w	r3, r7, #16
 80047bc:	4619      	mov	r1, r3
 80047be:	4806      	ldr	r0, [pc, #24]	; (80047d8 <HAL_TIM_MspPostInit+0x94>)
 80047c0:	f000 fc66 	bl	8005090 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80047c4:	bf00      	nop
 80047c6:	3720      	adds	r7, #32
 80047c8:	46bd      	mov	sp, r7
 80047ca:	bd80      	pop	{r7, pc}
 80047cc:	40000400 	.word	0x40000400
 80047d0:	40021000 	.word	0x40021000
 80047d4:	40010800 	.word	0x40010800
 80047d8:	40010c00 	.word	0x40010c00

080047dc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80047dc:	b580      	push	{r7, lr}
 80047de:	b08c      	sub	sp, #48	; 0x30
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80047e4:	f107 0320 	add.w	r3, r7, #32
 80047e8:	2200      	movs	r2, #0
 80047ea:	601a      	str	r2, [r3, #0]
 80047ec:	605a      	str	r2, [r3, #4]
 80047ee:	609a      	str	r2, [r3, #8]
 80047f0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	4a5f      	ldr	r2, [pc, #380]	; (8004974 <HAL_UART_MspInit+0x198>)
 80047f8:	4293      	cmp	r3, r2
 80047fa:	d13a      	bne.n	8004872 <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80047fc:	4b5e      	ldr	r3, [pc, #376]	; (8004978 <HAL_UART_MspInit+0x19c>)
 80047fe:	699b      	ldr	r3, [r3, #24]
 8004800:	4a5d      	ldr	r2, [pc, #372]	; (8004978 <HAL_UART_MspInit+0x19c>)
 8004802:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004806:	6193      	str	r3, [r2, #24]
 8004808:	4b5b      	ldr	r3, [pc, #364]	; (8004978 <HAL_UART_MspInit+0x19c>)
 800480a:	699b      	ldr	r3, [r3, #24]
 800480c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004810:	61fb      	str	r3, [r7, #28]
 8004812:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004814:	4b58      	ldr	r3, [pc, #352]	; (8004978 <HAL_UART_MspInit+0x19c>)
 8004816:	699b      	ldr	r3, [r3, #24]
 8004818:	4a57      	ldr	r2, [pc, #348]	; (8004978 <HAL_UART_MspInit+0x19c>)
 800481a:	f043 0304 	orr.w	r3, r3, #4
 800481e:	6193      	str	r3, [r2, #24]
 8004820:	4b55      	ldr	r3, [pc, #340]	; (8004978 <HAL_UART_MspInit+0x19c>)
 8004822:	699b      	ldr	r3, [r3, #24]
 8004824:	f003 0304 	and.w	r3, r3, #4
 8004828:	61bb      	str	r3, [r7, #24]
 800482a:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800482c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004830:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004832:	2302      	movs	r3, #2
 8004834:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004836:	2303      	movs	r3, #3
 8004838:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800483a:	f107 0320 	add.w	r3, r7, #32
 800483e:	4619      	mov	r1, r3
 8004840:	484e      	ldr	r0, [pc, #312]	; (800497c <HAL_UART_MspInit+0x1a0>)
 8004842:	f000 fc25 	bl	8005090 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8004846:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800484a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800484c:	2300      	movs	r3, #0
 800484e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004850:	2300      	movs	r3, #0
 8004852:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004854:	f107 0320 	add.w	r3, r7, #32
 8004858:	4619      	mov	r1, r3
 800485a:	4848      	ldr	r0, [pc, #288]	; (800497c <HAL_UART_MspInit+0x1a0>)
 800485c:	f000 fc18 	bl	8005090 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8004860:	2200      	movs	r2, #0
 8004862:	2105      	movs	r1, #5
 8004864:	2025      	movs	r0, #37	; 0x25
 8004866:	f000 fb38 	bl	8004eda <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800486a:	2025      	movs	r0, #37	; 0x25
 800486c:	f000 fb51 	bl	8004f12 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8004870:	e07c      	b.n	800496c <HAL_UART_MspInit+0x190>
  else if(huart->Instance==USART2)
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	4a42      	ldr	r2, [pc, #264]	; (8004980 <HAL_UART_MspInit+0x1a4>)
 8004878:	4293      	cmp	r3, r2
 800487a:	d138      	bne.n	80048ee <HAL_UART_MspInit+0x112>
    __HAL_RCC_USART2_CLK_ENABLE();
 800487c:	4b3e      	ldr	r3, [pc, #248]	; (8004978 <HAL_UART_MspInit+0x19c>)
 800487e:	69db      	ldr	r3, [r3, #28]
 8004880:	4a3d      	ldr	r2, [pc, #244]	; (8004978 <HAL_UART_MspInit+0x19c>)
 8004882:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004886:	61d3      	str	r3, [r2, #28]
 8004888:	4b3b      	ldr	r3, [pc, #236]	; (8004978 <HAL_UART_MspInit+0x19c>)
 800488a:	69db      	ldr	r3, [r3, #28]
 800488c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004890:	617b      	str	r3, [r7, #20]
 8004892:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004894:	4b38      	ldr	r3, [pc, #224]	; (8004978 <HAL_UART_MspInit+0x19c>)
 8004896:	699b      	ldr	r3, [r3, #24]
 8004898:	4a37      	ldr	r2, [pc, #220]	; (8004978 <HAL_UART_MspInit+0x19c>)
 800489a:	f043 0304 	orr.w	r3, r3, #4
 800489e:	6193      	str	r3, [r2, #24]
 80048a0:	4b35      	ldr	r3, [pc, #212]	; (8004978 <HAL_UART_MspInit+0x19c>)
 80048a2:	699b      	ldr	r3, [r3, #24]
 80048a4:	f003 0304 	and.w	r3, r3, #4
 80048a8:	613b      	str	r3, [r7, #16]
 80048aa:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80048ac:	2304      	movs	r3, #4
 80048ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80048b0:	2302      	movs	r3, #2
 80048b2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80048b4:	2303      	movs	r3, #3
 80048b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80048b8:	f107 0320 	add.w	r3, r7, #32
 80048bc:	4619      	mov	r1, r3
 80048be:	482f      	ldr	r0, [pc, #188]	; (800497c <HAL_UART_MspInit+0x1a0>)
 80048c0:	f000 fbe6 	bl	8005090 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80048c4:	2308      	movs	r3, #8
 80048c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80048c8:	2300      	movs	r3, #0
 80048ca:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048cc:	2300      	movs	r3, #0
 80048ce:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80048d0:	f107 0320 	add.w	r3, r7, #32
 80048d4:	4619      	mov	r1, r3
 80048d6:	4829      	ldr	r0, [pc, #164]	; (800497c <HAL_UART_MspInit+0x1a0>)
 80048d8:	f000 fbda 	bl	8005090 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 80048dc:	2200      	movs	r2, #0
 80048de:	2105      	movs	r1, #5
 80048e0:	2026      	movs	r0, #38	; 0x26
 80048e2:	f000 fafa 	bl	8004eda <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80048e6:	2026      	movs	r0, #38	; 0x26
 80048e8:	f000 fb13 	bl	8004f12 <HAL_NVIC_EnableIRQ>
}
 80048ec:	e03e      	b.n	800496c <HAL_UART_MspInit+0x190>
  else if(huart->Instance==USART3)
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	4a24      	ldr	r2, [pc, #144]	; (8004984 <HAL_UART_MspInit+0x1a8>)
 80048f4:	4293      	cmp	r3, r2
 80048f6:	d139      	bne.n	800496c <HAL_UART_MspInit+0x190>
    __HAL_RCC_USART3_CLK_ENABLE();
 80048f8:	4b1f      	ldr	r3, [pc, #124]	; (8004978 <HAL_UART_MspInit+0x19c>)
 80048fa:	69db      	ldr	r3, [r3, #28]
 80048fc:	4a1e      	ldr	r2, [pc, #120]	; (8004978 <HAL_UART_MspInit+0x19c>)
 80048fe:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004902:	61d3      	str	r3, [r2, #28]
 8004904:	4b1c      	ldr	r3, [pc, #112]	; (8004978 <HAL_UART_MspInit+0x19c>)
 8004906:	69db      	ldr	r3, [r3, #28]
 8004908:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800490c:	60fb      	str	r3, [r7, #12]
 800490e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004910:	4b19      	ldr	r3, [pc, #100]	; (8004978 <HAL_UART_MspInit+0x19c>)
 8004912:	699b      	ldr	r3, [r3, #24]
 8004914:	4a18      	ldr	r2, [pc, #96]	; (8004978 <HAL_UART_MspInit+0x19c>)
 8004916:	f043 0308 	orr.w	r3, r3, #8
 800491a:	6193      	str	r3, [r2, #24]
 800491c:	4b16      	ldr	r3, [pc, #88]	; (8004978 <HAL_UART_MspInit+0x19c>)
 800491e:	699b      	ldr	r3, [r3, #24]
 8004920:	f003 0308 	and.w	r3, r3, #8
 8004924:	60bb      	str	r3, [r7, #8]
 8004926:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8004928:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800492c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800492e:	2302      	movs	r3, #2
 8004930:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004932:	2303      	movs	r3, #3
 8004934:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004936:	f107 0320 	add.w	r3, r7, #32
 800493a:	4619      	mov	r1, r3
 800493c:	4812      	ldr	r0, [pc, #72]	; (8004988 <HAL_UART_MspInit+0x1ac>)
 800493e:	f000 fba7 	bl	8005090 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8004942:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004946:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004948:	2300      	movs	r3, #0
 800494a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800494c:	2300      	movs	r3, #0
 800494e:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004950:	f107 0320 	add.w	r3, r7, #32
 8004954:	4619      	mov	r1, r3
 8004956:	480c      	ldr	r0, [pc, #48]	; (8004988 <HAL_UART_MspInit+0x1ac>)
 8004958:	f000 fb9a 	bl	8005090 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 800495c:	2200      	movs	r2, #0
 800495e:	2105      	movs	r1, #5
 8004960:	2027      	movs	r0, #39	; 0x27
 8004962:	f000 faba 	bl	8004eda <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8004966:	2027      	movs	r0, #39	; 0x27
 8004968:	f000 fad3 	bl	8004f12 <HAL_NVIC_EnableIRQ>
}
 800496c:	bf00      	nop
 800496e:	3730      	adds	r7, #48	; 0x30
 8004970:	46bd      	mov	sp, r7
 8004972:	bd80      	pop	{r7, pc}
 8004974:	40013800 	.word	0x40013800
 8004978:	40021000 	.word	0x40021000
 800497c:	40010800 	.word	0x40010800
 8004980:	40004400 	.word	0x40004400
 8004984:	40004800 	.word	0x40004800
 8004988:	40010c00 	.word	0x40010c00

0800498c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800498c:	b580      	push	{r7, lr}
 800498e:	b08c      	sub	sp, #48	; 0x30
 8004990:	af00      	add	r7, sp, #0
 8004992:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8004994:	2300      	movs	r3, #0
 8004996:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8004998:	2300      	movs	r3, #0
 800499a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 800499c:	2300      	movs	r3, #0
 800499e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80049a2:	4b2e      	ldr	r3, [pc, #184]	; (8004a5c <HAL_InitTick+0xd0>)
 80049a4:	699b      	ldr	r3, [r3, #24]
 80049a6:	4a2d      	ldr	r2, [pc, #180]	; (8004a5c <HAL_InitTick+0xd0>)
 80049a8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80049ac:	6193      	str	r3, [r2, #24]
 80049ae:	4b2b      	ldr	r3, [pc, #172]	; (8004a5c <HAL_InitTick+0xd0>)
 80049b0:	699b      	ldr	r3, [r3, #24]
 80049b2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80049b6:	60bb      	str	r3, [r7, #8]
 80049b8:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80049ba:	f107 020c 	add.w	r2, r7, #12
 80049be:	f107 0310 	add.w	r3, r7, #16
 80049c2:	4611      	mov	r1, r2
 80049c4:	4618      	mov	r0, r3
 80049c6:	f002 f8e3 	bl	8006b90 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 80049ca:	f002 f8cd 	bl	8006b68 <HAL_RCC_GetPCLK2Freq>
 80049ce:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80049d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049d2:	4a23      	ldr	r2, [pc, #140]	; (8004a60 <HAL_InitTick+0xd4>)
 80049d4:	fba2 2303 	umull	r2, r3, r2, r3
 80049d8:	0c9b      	lsrs	r3, r3, #18
 80049da:	3b01      	subs	r3, #1
 80049dc:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80049de:	4b21      	ldr	r3, [pc, #132]	; (8004a64 <HAL_InitTick+0xd8>)
 80049e0:	4a21      	ldr	r2, [pc, #132]	; (8004a68 <HAL_InitTick+0xdc>)
 80049e2:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80049e4:	4b1f      	ldr	r3, [pc, #124]	; (8004a64 <HAL_InitTick+0xd8>)
 80049e6:	f240 32e7 	movw	r2, #999	; 0x3e7
 80049ea:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80049ec:	4a1d      	ldr	r2, [pc, #116]	; (8004a64 <HAL_InitTick+0xd8>)
 80049ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049f0:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80049f2:	4b1c      	ldr	r3, [pc, #112]	; (8004a64 <HAL_InitTick+0xd8>)
 80049f4:	2200      	movs	r2, #0
 80049f6:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80049f8:	4b1a      	ldr	r3, [pc, #104]	; (8004a64 <HAL_InitTick+0xd8>)
 80049fa:	2200      	movs	r2, #0
 80049fc:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80049fe:	4b19      	ldr	r3, [pc, #100]	; (8004a64 <HAL_InitTick+0xd8>)
 8004a00:	2200      	movs	r2, #0
 8004a02:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8004a04:	4817      	ldr	r0, [pc, #92]	; (8004a64 <HAL_InitTick+0xd8>)
 8004a06:	f002 f911 	bl	8006c2c <HAL_TIM_Base_Init>
 8004a0a:	4603      	mov	r3, r0
 8004a0c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8004a10:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d11b      	bne.n	8004a50 <HAL_InitTick+0xc4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8004a18:	4812      	ldr	r0, [pc, #72]	; (8004a64 <HAL_InitTick+0xd8>)
 8004a1a:	f002 f957 	bl	8006ccc <HAL_TIM_Base_Start_IT>
 8004a1e:	4603      	mov	r3, r0
 8004a20:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8004a24:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d111      	bne.n	8004a50 <HAL_InitTick+0xc4>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8004a2c:	2019      	movs	r0, #25
 8004a2e:	f000 fa70 	bl	8004f12 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	2b0f      	cmp	r3, #15
 8004a36:	d808      	bhi.n	8004a4a <HAL_InitTick+0xbe>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority, 0U);
 8004a38:	2200      	movs	r2, #0
 8004a3a:	6879      	ldr	r1, [r7, #4]
 8004a3c:	2019      	movs	r0, #25
 8004a3e:	f000 fa4c 	bl	8004eda <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004a42:	4a0a      	ldr	r2, [pc, #40]	; (8004a6c <HAL_InitTick+0xe0>)
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	6013      	str	r3, [r2, #0]
 8004a48:	e002      	b.n	8004a50 <HAL_InitTick+0xc4>
      }
      else
      {
        status = HAL_ERROR;
 8004a4a:	2301      	movs	r3, #1
 8004a4c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8004a50:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8004a54:	4618      	mov	r0, r3
 8004a56:	3730      	adds	r7, #48	; 0x30
 8004a58:	46bd      	mov	sp, r7
 8004a5a:	bd80      	pop	{r7, pc}
 8004a5c:	40021000 	.word	0x40021000
 8004a60:	431bde83 	.word	0x431bde83
 8004a64:	200007f4 	.word	0x200007f4
 8004a68:	40012c00 	.word	0x40012c00
 8004a6c:	20000010 	.word	0x20000010

08004a70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004a70:	b480      	push	{r7}
 8004a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004a74:	e7fe      	b.n	8004a74 <NMI_Handler+0x4>

08004a76 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004a76:	b480      	push	{r7}
 8004a78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004a7a:	e7fe      	b.n	8004a7a <HardFault_Handler+0x4>

08004a7c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004a7c:	b480      	push	{r7}
 8004a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004a80:	e7fe      	b.n	8004a80 <MemManage_Handler+0x4>

08004a82 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004a82:	b480      	push	{r7}
 8004a84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004a86:	e7fe      	b.n	8004a86 <BusFault_Handler+0x4>

08004a88 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004a88:	b480      	push	{r7}
 8004a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004a8c:	e7fe      	b.n	8004a8c <UsageFault_Handler+0x4>

08004a8e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004a8e:	b480      	push	{r7}
 8004a90:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004a92:	bf00      	nop
 8004a94:	46bd      	mov	sp, r7
 8004a96:	bc80      	pop	{r7}
 8004a98:	4770      	bx	lr
	...

08004a9c <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8004a9c:	b580      	push	{r7, lr}
 8004a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004aa0:	4802      	ldr	r0, [pc, #8]	; (8004aac <TIM1_UP_IRQHandler+0x10>)
 8004aa2:	f002 fa5f 	bl	8006f64 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8004aa6:	bf00      	nop
 8004aa8:	bd80      	pop	{r7, pc}
 8004aaa:	bf00      	nop
 8004aac:	200007f4 	.word	0x200007f4

08004ab0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8004ab0:	b580      	push	{r7, lr}
 8004ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8004ab4:	4802      	ldr	r0, [pc, #8]	; (8004ac0 <USART1_IRQHandler+0x10>)
 8004ab6:	f003 f927 	bl	8007d08 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8004aba:	bf00      	nop
 8004abc:	bd80      	pop	{r7, pc}
 8004abe:	bf00      	nop
 8004ac0:	20000574 	.word	0x20000574

08004ac4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8004ac4:	b580      	push	{r7, lr}
 8004ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8004ac8:	4802      	ldr	r0, [pc, #8]	; (8004ad4 <USART2_IRQHandler+0x10>)
 8004aca:	f003 f91d 	bl	8007d08 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8004ace:	bf00      	nop
 8004ad0:	bd80      	pop	{r7, pc}
 8004ad2:	bf00      	nop
 8004ad4:	200005b8 	.word	0x200005b8

08004ad8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8004ad8:	b580      	push	{r7, lr}
 8004ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8004adc:	4802      	ldr	r0, [pc, #8]	; (8004ae8 <USART3_IRQHandler+0x10>)
 8004ade:	f003 f913 	bl	8007d08 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8004ae2:	bf00      	nop
 8004ae4:	bd80      	pop	{r7, pc}
 8004ae6:	bf00      	nop
 8004ae8:	200005fc 	.word	0x200005fc

08004aec <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004aec:	b480      	push	{r7}
 8004aee:	af00      	add	r7, sp, #0
	return 1;
 8004af0:	2301      	movs	r3, #1
}
 8004af2:	4618      	mov	r0, r3
 8004af4:	46bd      	mov	sp, r7
 8004af6:	bc80      	pop	{r7}
 8004af8:	4770      	bx	lr

08004afa <_kill>:

int _kill(int pid, int sig)
{
 8004afa:	b580      	push	{r7, lr}
 8004afc:	b082      	sub	sp, #8
 8004afe:	af00      	add	r7, sp, #0
 8004b00:	6078      	str	r0, [r7, #4]
 8004b02:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8004b04:	f004 ff28 	bl	8009958 <__errno>
 8004b08:	4603      	mov	r3, r0
 8004b0a:	2216      	movs	r2, #22
 8004b0c:	601a      	str	r2, [r3, #0]
	return -1;
 8004b0e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004b12:	4618      	mov	r0, r3
 8004b14:	3708      	adds	r7, #8
 8004b16:	46bd      	mov	sp, r7
 8004b18:	bd80      	pop	{r7, pc}

08004b1a <_exit>:

void _exit (int status)
{
 8004b1a:	b580      	push	{r7, lr}
 8004b1c:	b082      	sub	sp, #8
 8004b1e:	af00      	add	r7, sp, #0
 8004b20:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8004b22:	f04f 31ff 	mov.w	r1, #4294967295
 8004b26:	6878      	ldr	r0, [r7, #4]
 8004b28:	f7ff ffe7 	bl	8004afa <_kill>
	while (1) {}		/* Make sure we hang here */
 8004b2c:	e7fe      	b.n	8004b2c <_exit+0x12>

08004b2e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004b2e:	b580      	push	{r7, lr}
 8004b30:	b086      	sub	sp, #24
 8004b32:	af00      	add	r7, sp, #0
 8004b34:	60f8      	str	r0, [r7, #12]
 8004b36:	60b9      	str	r1, [r7, #8]
 8004b38:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004b3a:	2300      	movs	r3, #0
 8004b3c:	617b      	str	r3, [r7, #20]
 8004b3e:	e00a      	b.n	8004b56 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8004b40:	f3af 8000 	nop.w
 8004b44:	4601      	mov	r1, r0
 8004b46:	68bb      	ldr	r3, [r7, #8]
 8004b48:	1c5a      	adds	r2, r3, #1
 8004b4a:	60ba      	str	r2, [r7, #8]
 8004b4c:	b2ca      	uxtb	r2, r1
 8004b4e:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004b50:	697b      	ldr	r3, [r7, #20]
 8004b52:	3301      	adds	r3, #1
 8004b54:	617b      	str	r3, [r7, #20]
 8004b56:	697a      	ldr	r2, [r7, #20]
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	429a      	cmp	r2, r3
 8004b5c:	dbf0      	blt.n	8004b40 <_read+0x12>
	}

return len;
 8004b5e:	687b      	ldr	r3, [r7, #4]
}
 8004b60:	4618      	mov	r0, r3
 8004b62:	3718      	adds	r7, #24
 8004b64:	46bd      	mov	sp, r7
 8004b66:	bd80      	pop	{r7, pc}

08004b68 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004b68:	b580      	push	{r7, lr}
 8004b6a:	b086      	sub	sp, #24
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	60f8      	str	r0, [r7, #12]
 8004b70:	60b9      	str	r1, [r7, #8]
 8004b72:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004b74:	2300      	movs	r3, #0
 8004b76:	617b      	str	r3, [r7, #20]
 8004b78:	e009      	b.n	8004b8e <_write+0x26>
	{
		__io_putchar(*ptr++);
 8004b7a:	68bb      	ldr	r3, [r7, #8]
 8004b7c:	1c5a      	adds	r2, r3, #1
 8004b7e:	60ba      	str	r2, [r7, #8]
 8004b80:	781b      	ldrb	r3, [r3, #0]
 8004b82:	4618      	mov	r0, r3
 8004b84:	f7fe fbe0 	bl	8003348 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004b88:	697b      	ldr	r3, [r7, #20]
 8004b8a:	3301      	adds	r3, #1
 8004b8c:	617b      	str	r3, [r7, #20]
 8004b8e:	697a      	ldr	r2, [r7, #20]
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	429a      	cmp	r2, r3
 8004b94:	dbf1      	blt.n	8004b7a <_write+0x12>
	}
	return len;
 8004b96:	687b      	ldr	r3, [r7, #4]
}
 8004b98:	4618      	mov	r0, r3
 8004b9a:	3718      	adds	r7, #24
 8004b9c:	46bd      	mov	sp, r7
 8004b9e:	bd80      	pop	{r7, pc}

08004ba0 <_close>:

int _close(int file)
{
 8004ba0:	b480      	push	{r7}
 8004ba2:	b083      	sub	sp, #12
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	6078      	str	r0, [r7, #4]
	return -1;
 8004ba8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004bac:	4618      	mov	r0, r3
 8004bae:	370c      	adds	r7, #12
 8004bb0:	46bd      	mov	sp, r7
 8004bb2:	bc80      	pop	{r7}
 8004bb4:	4770      	bx	lr

08004bb6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004bb6:	b480      	push	{r7}
 8004bb8:	b083      	sub	sp, #12
 8004bba:	af00      	add	r7, sp, #0
 8004bbc:	6078      	str	r0, [r7, #4]
 8004bbe:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8004bc0:	683b      	ldr	r3, [r7, #0]
 8004bc2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004bc6:	605a      	str	r2, [r3, #4]
	return 0;
 8004bc8:	2300      	movs	r3, #0
}
 8004bca:	4618      	mov	r0, r3
 8004bcc:	370c      	adds	r7, #12
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	bc80      	pop	{r7}
 8004bd2:	4770      	bx	lr

08004bd4 <_isatty>:

int _isatty(int file)
{
 8004bd4:	b480      	push	{r7}
 8004bd6:	b083      	sub	sp, #12
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	6078      	str	r0, [r7, #4]
	return 1;
 8004bdc:	2301      	movs	r3, #1
}
 8004bde:	4618      	mov	r0, r3
 8004be0:	370c      	adds	r7, #12
 8004be2:	46bd      	mov	sp, r7
 8004be4:	bc80      	pop	{r7}
 8004be6:	4770      	bx	lr

08004be8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004be8:	b480      	push	{r7}
 8004bea:	b085      	sub	sp, #20
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	60f8      	str	r0, [r7, #12]
 8004bf0:	60b9      	str	r1, [r7, #8]
 8004bf2:	607a      	str	r2, [r7, #4]
	return 0;
 8004bf4:	2300      	movs	r3, #0
}
 8004bf6:	4618      	mov	r0, r3
 8004bf8:	3714      	adds	r7, #20
 8004bfa:	46bd      	mov	sp, r7
 8004bfc:	bc80      	pop	{r7}
 8004bfe:	4770      	bx	lr

08004c00 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004c00:	b580      	push	{r7, lr}
 8004c02:	b086      	sub	sp, #24
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004c08:	4a14      	ldr	r2, [pc, #80]	; (8004c5c <_sbrk+0x5c>)
 8004c0a:	4b15      	ldr	r3, [pc, #84]	; (8004c60 <_sbrk+0x60>)
 8004c0c:	1ad3      	subs	r3, r2, r3
 8004c0e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004c10:	697b      	ldr	r3, [r7, #20]
 8004c12:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004c14:	4b13      	ldr	r3, [pc, #76]	; (8004c64 <_sbrk+0x64>)
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d102      	bne.n	8004c22 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004c1c:	4b11      	ldr	r3, [pc, #68]	; (8004c64 <_sbrk+0x64>)
 8004c1e:	4a12      	ldr	r2, [pc, #72]	; (8004c68 <_sbrk+0x68>)
 8004c20:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004c22:	4b10      	ldr	r3, [pc, #64]	; (8004c64 <_sbrk+0x64>)
 8004c24:	681a      	ldr	r2, [r3, #0]
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	4413      	add	r3, r2
 8004c2a:	693a      	ldr	r2, [r7, #16]
 8004c2c:	429a      	cmp	r2, r3
 8004c2e:	d207      	bcs.n	8004c40 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004c30:	f004 fe92 	bl	8009958 <__errno>
 8004c34:	4603      	mov	r3, r0
 8004c36:	220c      	movs	r2, #12
 8004c38:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004c3a:	f04f 33ff 	mov.w	r3, #4294967295
 8004c3e:	e009      	b.n	8004c54 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004c40:	4b08      	ldr	r3, [pc, #32]	; (8004c64 <_sbrk+0x64>)
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004c46:	4b07      	ldr	r3, [pc, #28]	; (8004c64 <_sbrk+0x64>)
 8004c48:	681a      	ldr	r2, [r3, #0]
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	4413      	add	r3, r2
 8004c4e:	4a05      	ldr	r2, [pc, #20]	; (8004c64 <_sbrk+0x64>)
 8004c50:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004c52:	68fb      	ldr	r3, [r7, #12]
}
 8004c54:	4618      	mov	r0, r3
 8004c56:	3718      	adds	r7, #24
 8004c58:	46bd      	mov	sp, r7
 8004c5a:	bd80      	pop	{r7, pc}
 8004c5c:	20005000 	.word	0x20005000
 8004c60:	00000400 	.word	0x00000400
 8004c64:	2000083c 	.word	0x2000083c
 8004c68:	200015a0 	.word	0x200015a0

08004c6c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8004c6c:	b480      	push	{r7}
 8004c6e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004c70:	bf00      	nop
 8004c72:	46bd      	mov	sp, r7
 8004c74:	bc80      	pop	{r7}
 8004c76:	4770      	bx	lr

08004c78 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
   ldr r0, =_sdata
 8004c78:	480c      	ldr	r0, [pc, #48]	; (8004cac <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8004c7a:	490d      	ldr	r1, [pc, #52]	; (8004cb0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8004c7c:	4a0d      	ldr	r2, [pc, #52]	; (8004cb4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8004c7e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004c80:	e002      	b.n	8004c88 <LoopCopyDataInit>

08004c82 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004c82:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004c84:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004c86:	3304      	adds	r3, #4

08004c88 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004c88:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004c8a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004c8c:	d3f9      	bcc.n	8004c82 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004c8e:	4a0a      	ldr	r2, [pc, #40]	; (8004cb8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8004c90:	4c0a      	ldr	r4, [pc, #40]	; (8004cbc <LoopFillZerobss+0x22>)
  movs r3, #0
 8004c92:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004c94:	e001      	b.n	8004c9a <LoopFillZerobss>

08004c96 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004c96:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004c98:	3204      	adds	r2, #4

08004c9a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004c9a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004c9c:	d3fb      	bcc.n	8004c96 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8004c9e:	f7ff ffe5 	bl	8004c6c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004ca2:	f004 fe5f 	bl	8009964 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8004ca6:	f7fe fb95 	bl	80033d4 <main>
  bx lr
 8004caa:	4770      	bx	lr
   ldr r0, =_sdata
 8004cac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004cb0:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 8004cb4:	0800d6a8 	.word	0x0800d6a8
  ldr r2, =_sbss
 8004cb8:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 8004cbc:	200015a0 	.word	0x200015a0

08004cc0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004cc0:	e7fe      	b.n	8004cc0 <ADC1_2_IRQHandler>
	...

08004cc4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004cc4:	b580      	push	{r7, lr}
 8004cc6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004cc8:	4b08      	ldr	r3, [pc, #32]	; (8004cec <HAL_Init+0x28>)
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	4a07      	ldr	r2, [pc, #28]	; (8004cec <HAL_Init+0x28>)
 8004cce:	f043 0310 	orr.w	r3, r3, #16
 8004cd2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004cd4:	2003      	movs	r0, #3
 8004cd6:	f000 f8f5 	bl	8004ec4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004cda:	200f      	movs	r0, #15
 8004cdc:	f7ff fe56 	bl	800498c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004ce0:	f7ff fc9c 	bl	800461c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004ce4:	2300      	movs	r3, #0
}
 8004ce6:	4618      	mov	r0, r3
 8004ce8:	bd80      	pop	{r7, pc}
 8004cea:	bf00      	nop
 8004cec:	40022000 	.word	0x40022000

08004cf0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004cf0:	b480      	push	{r7}
 8004cf2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004cf4:	4b05      	ldr	r3, [pc, #20]	; (8004d0c <HAL_IncTick+0x1c>)
 8004cf6:	781b      	ldrb	r3, [r3, #0]
 8004cf8:	461a      	mov	r2, r3
 8004cfa:	4b05      	ldr	r3, [pc, #20]	; (8004d10 <HAL_IncTick+0x20>)
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	4413      	add	r3, r2
 8004d00:	4a03      	ldr	r2, [pc, #12]	; (8004d10 <HAL_IncTick+0x20>)
 8004d02:	6013      	str	r3, [r2, #0]
}
 8004d04:	bf00      	nop
 8004d06:	46bd      	mov	sp, r7
 8004d08:	bc80      	pop	{r7}
 8004d0a:	4770      	bx	lr
 8004d0c:	20000014 	.word	0x20000014
 8004d10:	20000840 	.word	0x20000840

08004d14 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004d14:	b480      	push	{r7}
 8004d16:	af00      	add	r7, sp, #0
  return uwTick;
 8004d18:	4b02      	ldr	r3, [pc, #8]	; (8004d24 <HAL_GetTick+0x10>)
 8004d1a:	681b      	ldr	r3, [r3, #0]
}
 8004d1c:	4618      	mov	r0, r3
 8004d1e:	46bd      	mov	sp, r7
 8004d20:	bc80      	pop	{r7}
 8004d22:	4770      	bx	lr
 8004d24:	20000840 	.word	0x20000840

08004d28 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004d28:	b580      	push	{r7, lr}
 8004d2a:	b084      	sub	sp, #16
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004d30:	f7ff fff0 	bl	8004d14 <HAL_GetTick>
 8004d34:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d40:	d005      	beq.n	8004d4e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004d42:	4b0a      	ldr	r3, [pc, #40]	; (8004d6c <HAL_Delay+0x44>)
 8004d44:	781b      	ldrb	r3, [r3, #0]
 8004d46:	461a      	mov	r2, r3
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	4413      	add	r3, r2
 8004d4c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004d4e:	bf00      	nop
 8004d50:	f7ff ffe0 	bl	8004d14 <HAL_GetTick>
 8004d54:	4602      	mov	r2, r0
 8004d56:	68bb      	ldr	r3, [r7, #8]
 8004d58:	1ad3      	subs	r3, r2, r3
 8004d5a:	68fa      	ldr	r2, [r7, #12]
 8004d5c:	429a      	cmp	r2, r3
 8004d5e:	d8f7      	bhi.n	8004d50 <HAL_Delay+0x28>
  {
  }
}
 8004d60:	bf00      	nop
 8004d62:	bf00      	nop
 8004d64:	3710      	adds	r7, #16
 8004d66:	46bd      	mov	sp, r7
 8004d68:	bd80      	pop	{r7, pc}
 8004d6a:	bf00      	nop
 8004d6c:	20000014 	.word	0x20000014

08004d70 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004d70:	b480      	push	{r7}
 8004d72:	b085      	sub	sp, #20
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	f003 0307 	and.w	r3, r3, #7
 8004d7e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004d80:	4b0c      	ldr	r3, [pc, #48]	; (8004db4 <__NVIC_SetPriorityGrouping+0x44>)
 8004d82:	68db      	ldr	r3, [r3, #12]
 8004d84:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004d86:	68ba      	ldr	r2, [r7, #8]
 8004d88:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004d8c:	4013      	ands	r3, r2
 8004d8e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004d94:	68bb      	ldr	r3, [r7, #8]
 8004d96:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004d98:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004d9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004da0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004da2:	4a04      	ldr	r2, [pc, #16]	; (8004db4 <__NVIC_SetPriorityGrouping+0x44>)
 8004da4:	68bb      	ldr	r3, [r7, #8]
 8004da6:	60d3      	str	r3, [r2, #12]
}
 8004da8:	bf00      	nop
 8004daa:	3714      	adds	r7, #20
 8004dac:	46bd      	mov	sp, r7
 8004dae:	bc80      	pop	{r7}
 8004db0:	4770      	bx	lr
 8004db2:	bf00      	nop
 8004db4:	e000ed00 	.word	0xe000ed00

08004db8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004db8:	b480      	push	{r7}
 8004dba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004dbc:	4b04      	ldr	r3, [pc, #16]	; (8004dd0 <__NVIC_GetPriorityGrouping+0x18>)
 8004dbe:	68db      	ldr	r3, [r3, #12]
 8004dc0:	0a1b      	lsrs	r3, r3, #8
 8004dc2:	f003 0307 	and.w	r3, r3, #7
}
 8004dc6:	4618      	mov	r0, r3
 8004dc8:	46bd      	mov	sp, r7
 8004dca:	bc80      	pop	{r7}
 8004dcc:	4770      	bx	lr
 8004dce:	bf00      	nop
 8004dd0:	e000ed00 	.word	0xe000ed00

08004dd4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004dd4:	b480      	push	{r7}
 8004dd6:	b083      	sub	sp, #12
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	4603      	mov	r3, r0
 8004ddc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004dde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	db0b      	blt.n	8004dfe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004de6:	79fb      	ldrb	r3, [r7, #7]
 8004de8:	f003 021f 	and.w	r2, r3, #31
 8004dec:	4906      	ldr	r1, [pc, #24]	; (8004e08 <__NVIC_EnableIRQ+0x34>)
 8004dee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004df2:	095b      	lsrs	r3, r3, #5
 8004df4:	2001      	movs	r0, #1
 8004df6:	fa00 f202 	lsl.w	r2, r0, r2
 8004dfa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004dfe:	bf00      	nop
 8004e00:	370c      	adds	r7, #12
 8004e02:	46bd      	mov	sp, r7
 8004e04:	bc80      	pop	{r7}
 8004e06:	4770      	bx	lr
 8004e08:	e000e100 	.word	0xe000e100

08004e0c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004e0c:	b480      	push	{r7}
 8004e0e:	b083      	sub	sp, #12
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	4603      	mov	r3, r0
 8004e14:	6039      	str	r1, [r7, #0]
 8004e16:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004e18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	db0a      	blt.n	8004e36 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004e20:	683b      	ldr	r3, [r7, #0]
 8004e22:	b2da      	uxtb	r2, r3
 8004e24:	490c      	ldr	r1, [pc, #48]	; (8004e58 <__NVIC_SetPriority+0x4c>)
 8004e26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e2a:	0112      	lsls	r2, r2, #4
 8004e2c:	b2d2      	uxtb	r2, r2
 8004e2e:	440b      	add	r3, r1
 8004e30:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004e34:	e00a      	b.n	8004e4c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004e36:	683b      	ldr	r3, [r7, #0]
 8004e38:	b2da      	uxtb	r2, r3
 8004e3a:	4908      	ldr	r1, [pc, #32]	; (8004e5c <__NVIC_SetPriority+0x50>)
 8004e3c:	79fb      	ldrb	r3, [r7, #7]
 8004e3e:	f003 030f 	and.w	r3, r3, #15
 8004e42:	3b04      	subs	r3, #4
 8004e44:	0112      	lsls	r2, r2, #4
 8004e46:	b2d2      	uxtb	r2, r2
 8004e48:	440b      	add	r3, r1
 8004e4a:	761a      	strb	r2, [r3, #24]
}
 8004e4c:	bf00      	nop
 8004e4e:	370c      	adds	r7, #12
 8004e50:	46bd      	mov	sp, r7
 8004e52:	bc80      	pop	{r7}
 8004e54:	4770      	bx	lr
 8004e56:	bf00      	nop
 8004e58:	e000e100 	.word	0xe000e100
 8004e5c:	e000ed00 	.word	0xe000ed00

08004e60 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004e60:	b480      	push	{r7}
 8004e62:	b089      	sub	sp, #36	; 0x24
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	60f8      	str	r0, [r7, #12]
 8004e68:	60b9      	str	r1, [r7, #8]
 8004e6a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	f003 0307 	and.w	r3, r3, #7
 8004e72:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004e74:	69fb      	ldr	r3, [r7, #28]
 8004e76:	f1c3 0307 	rsb	r3, r3, #7
 8004e7a:	2b04      	cmp	r3, #4
 8004e7c:	bf28      	it	cs
 8004e7e:	2304      	movcs	r3, #4
 8004e80:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004e82:	69fb      	ldr	r3, [r7, #28]
 8004e84:	3304      	adds	r3, #4
 8004e86:	2b06      	cmp	r3, #6
 8004e88:	d902      	bls.n	8004e90 <NVIC_EncodePriority+0x30>
 8004e8a:	69fb      	ldr	r3, [r7, #28]
 8004e8c:	3b03      	subs	r3, #3
 8004e8e:	e000      	b.n	8004e92 <NVIC_EncodePriority+0x32>
 8004e90:	2300      	movs	r3, #0
 8004e92:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004e94:	f04f 32ff 	mov.w	r2, #4294967295
 8004e98:	69bb      	ldr	r3, [r7, #24]
 8004e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8004e9e:	43da      	mvns	r2, r3
 8004ea0:	68bb      	ldr	r3, [r7, #8]
 8004ea2:	401a      	ands	r2, r3
 8004ea4:	697b      	ldr	r3, [r7, #20]
 8004ea6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004ea8:	f04f 31ff 	mov.w	r1, #4294967295
 8004eac:	697b      	ldr	r3, [r7, #20]
 8004eae:	fa01 f303 	lsl.w	r3, r1, r3
 8004eb2:	43d9      	mvns	r1, r3
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004eb8:	4313      	orrs	r3, r2
         );
}
 8004eba:	4618      	mov	r0, r3
 8004ebc:	3724      	adds	r7, #36	; 0x24
 8004ebe:	46bd      	mov	sp, r7
 8004ec0:	bc80      	pop	{r7}
 8004ec2:	4770      	bx	lr

08004ec4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004ec4:	b580      	push	{r7, lr}
 8004ec6:	b082      	sub	sp, #8
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004ecc:	6878      	ldr	r0, [r7, #4]
 8004ece:	f7ff ff4f 	bl	8004d70 <__NVIC_SetPriorityGrouping>
}
 8004ed2:	bf00      	nop
 8004ed4:	3708      	adds	r7, #8
 8004ed6:	46bd      	mov	sp, r7
 8004ed8:	bd80      	pop	{r7, pc}

08004eda <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004eda:	b580      	push	{r7, lr}
 8004edc:	b086      	sub	sp, #24
 8004ede:	af00      	add	r7, sp, #0
 8004ee0:	4603      	mov	r3, r0
 8004ee2:	60b9      	str	r1, [r7, #8]
 8004ee4:	607a      	str	r2, [r7, #4]
 8004ee6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004ee8:	2300      	movs	r3, #0
 8004eea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004eec:	f7ff ff64 	bl	8004db8 <__NVIC_GetPriorityGrouping>
 8004ef0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004ef2:	687a      	ldr	r2, [r7, #4]
 8004ef4:	68b9      	ldr	r1, [r7, #8]
 8004ef6:	6978      	ldr	r0, [r7, #20]
 8004ef8:	f7ff ffb2 	bl	8004e60 <NVIC_EncodePriority>
 8004efc:	4602      	mov	r2, r0
 8004efe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004f02:	4611      	mov	r1, r2
 8004f04:	4618      	mov	r0, r3
 8004f06:	f7ff ff81 	bl	8004e0c <__NVIC_SetPriority>
}
 8004f0a:	bf00      	nop
 8004f0c:	3718      	adds	r7, #24
 8004f0e:	46bd      	mov	sp, r7
 8004f10:	bd80      	pop	{r7, pc}

08004f12 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004f12:	b580      	push	{r7, lr}
 8004f14:	b082      	sub	sp, #8
 8004f16:	af00      	add	r7, sp, #0
 8004f18:	4603      	mov	r3, r0
 8004f1a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004f1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f20:	4618      	mov	r0, r3
 8004f22:	f7ff ff57 	bl	8004dd4 <__NVIC_EnableIRQ>
}
 8004f26:	bf00      	nop
 8004f28:	3708      	adds	r7, #8
 8004f2a:	46bd      	mov	sp, r7
 8004f2c:	bd80      	pop	{r7, pc}

08004f2e <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004f2e:	b480      	push	{r7}
 8004f30:	b085      	sub	sp, #20
 8004f32:	af00      	add	r7, sp, #0
 8004f34:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004f36:	2300      	movs	r3, #0
 8004f38:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004f40:	2b02      	cmp	r3, #2
 8004f42:	d008      	beq.n	8004f56 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	2204      	movs	r2, #4
 8004f48:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	2200      	movs	r2, #0
 8004f4e:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8004f52:	2301      	movs	r3, #1
 8004f54:	e020      	b.n	8004f98 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	681a      	ldr	r2, [r3, #0]
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f022 020e 	bic.w	r2, r2, #14
 8004f64:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	681a      	ldr	r2, [r3, #0]
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f022 0201 	bic.w	r2, r2, #1
 8004f74:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f7e:	2101      	movs	r1, #1
 8004f80:	fa01 f202 	lsl.w	r2, r1, r2
 8004f84:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	2201      	movs	r2, #1
 8004f8a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	2200      	movs	r2, #0
 8004f92:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8004f96:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f98:	4618      	mov	r0, r3
 8004f9a:	3714      	adds	r7, #20
 8004f9c:	46bd      	mov	sp, r7
 8004f9e:	bc80      	pop	{r7}
 8004fa0:	4770      	bx	lr
	...

08004fa4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8004fa4:	b580      	push	{r7, lr}
 8004fa6:	b084      	sub	sp, #16
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004fac:	2300      	movs	r3, #0
 8004fae:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004fb6:	2b02      	cmp	r3, #2
 8004fb8:	d005      	beq.n	8004fc6 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	2204      	movs	r2, #4
 8004fbe:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8004fc0:	2301      	movs	r3, #1
 8004fc2:	73fb      	strb	r3, [r7, #15]
 8004fc4:	e051      	b.n	800506a <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	681a      	ldr	r2, [r3, #0]
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	f022 020e 	bic.w	r2, r2, #14
 8004fd4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	681a      	ldr	r2, [r3, #0]
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f022 0201 	bic.w	r2, r2, #1
 8004fe4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	4a22      	ldr	r2, [pc, #136]	; (8005074 <HAL_DMA_Abort_IT+0xd0>)
 8004fec:	4293      	cmp	r3, r2
 8004fee:	d029      	beq.n	8005044 <HAL_DMA_Abort_IT+0xa0>
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	4a20      	ldr	r2, [pc, #128]	; (8005078 <HAL_DMA_Abort_IT+0xd4>)
 8004ff6:	4293      	cmp	r3, r2
 8004ff8:	d022      	beq.n	8005040 <HAL_DMA_Abort_IT+0x9c>
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	4a1f      	ldr	r2, [pc, #124]	; (800507c <HAL_DMA_Abort_IT+0xd8>)
 8005000:	4293      	cmp	r3, r2
 8005002:	d01a      	beq.n	800503a <HAL_DMA_Abort_IT+0x96>
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	4a1d      	ldr	r2, [pc, #116]	; (8005080 <HAL_DMA_Abort_IT+0xdc>)
 800500a:	4293      	cmp	r3, r2
 800500c:	d012      	beq.n	8005034 <HAL_DMA_Abort_IT+0x90>
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	4a1c      	ldr	r2, [pc, #112]	; (8005084 <HAL_DMA_Abort_IT+0xe0>)
 8005014:	4293      	cmp	r3, r2
 8005016:	d00a      	beq.n	800502e <HAL_DMA_Abort_IT+0x8a>
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	4a1a      	ldr	r2, [pc, #104]	; (8005088 <HAL_DMA_Abort_IT+0xe4>)
 800501e:	4293      	cmp	r3, r2
 8005020:	d102      	bne.n	8005028 <HAL_DMA_Abort_IT+0x84>
 8005022:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8005026:	e00e      	b.n	8005046 <HAL_DMA_Abort_IT+0xa2>
 8005028:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800502c:	e00b      	b.n	8005046 <HAL_DMA_Abort_IT+0xa2>
 800502e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005032:	e008      	b.n	8005046 <HAL_DMA_Abort_IT+0xa2>
 8005034:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005038:	e005      	b.n	8005046 <HAL_DMA_Abort_IT+0xa2>
 800503a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800503e:	e002      	b.n	8005046 <HAL_DMA_Abort_IT+0xa2>
 8005040:	2310      	movs	r3, #16
 8005042:	e000      	b.n	8005046 <HAL_DMA_Abort_IT+0xa2>
 8005044:	2301      	movs	r3, #1
 8005046:	4a11      	ldr	r2, [pc, #68]	; (800508c <HAL_DMA_Abort_IT+0xe8>)
 8005048:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	2201      	movs	r2, #1
 800504e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	2200      	movs	r2, #0
 8005056:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800505e:	2b00      	cmp	r3, #0
 8005060:	d003      	beq.n	800506a <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005066:	6878      	ldr	r0, [r7, #4]
 8005068:	4798      	blx	r3
    } 
  }
  return status;
 800506a:	7bfb      	ldrb	r3, [r7, #15]
}
 800506c:	4618      	mov	r0, r3
 800506e:	3710      	adds	r7, #16
 8005070:	46bd      	mov	sp, r7
 8005072:	bd80      	pop	{r7, pc}
 8005074:	40020008 	.word	0x40020008
 8005078:	4002001c 	.word	0x4002001c
 800507c:	40020030 	.word	0x40020030
 8005080:	40020044 	.word	0x40020044
 8005084:	40020058 	.word	0x40020058
 8005088:	4002006c 	.word	0x4002006c
 800508c:	40020000 	.word	0x40020000

08005090 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005090:	b480      	push	{r7}
 8005092:	b08b      	sub	sp, #44	; 0x2c
 8005094:	af00      	add	r7, sp, #0
 8005096:	6078      	str	r0, [r7, #4]
 8005098:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800509a:	2300      	movs	r3, #0
 800509c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800509e:	2300      	movs	r3, #0
 80050a0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80050a2:	e169      	b.n	8005378 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80050a4:	2201      	movs	r2, #1
 80050a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050a8:	fa02 f303 	lsl.w	r3, r2, r3
 80050ac:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80050ae:	683b      	ldr	r3, [r7, #0]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	69fa      	ldr	r2, [r7, #28]
 80050b4:	4013      	ands	r3, r2
 80050b6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80050b8:	69ba      	ldr	r2, [r7, #24]
 80050ba:	69fb      	ldr	r3, [r7, #28]
 80050bc:	429a      	cmp	r2, r3
 80050be:	f040 8158 	bne.w	8005372 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80050c2:	683b      	ldr	r3, [r7, #0]
 80050c4:	685b      	ldr	r3, [r3, #4]
 80050c6:	4a9a      	ldr	r2, [pc, #616]	; (8005330 <HAL_GPIO_Init+0x2a0>)
 80050c8:	4293      	cmp	r3, r2
 80050ca:	d05e      	beq.n	800518a <HAL_GPIO_Init+0xfa>
 80050cc:	4a98      	ldr	r2, [pc, #608]	; (8005330 <HAL_GPIO_Init+0x2a0>)
 80050ce:	4293      	cmp	r3, r2
 80050d0:	d875      	bhi.n	80051be <HAL_GPIO_Init+0x12e>
 80050d2:	4a98      	ldr	r2, [pc, #608]	; (8005334 <HAL_GPIO_Init+0x2a4>)
 80050d4:	4293      	cmp	r3, r2
 80050d6:	d058      	beq.n	800518a <HAL_GPIO_Init+0xfa>
 80050d8:	4a96      	ldr	r2, [pc, #600]	; (8005334 <HAL_GPIO_Init+0x2a4>)
 80050da:	4293      	cmp	r3, r2
 80050dc:	d86f      	bhi.n	80051be <HAL_GPIO_Init+0x12e>
 80050de:	4a96      	ldr	r2, [pc, #600]	; (8005338 <HAL_GPIO_Init+0x2a8>)
 80050e0:	4293      	cmp	r3, r2
 80050e2:	d052      	beq.n	800518a <HAL_GPIO_Init+0xfa>
 80050e4:	4a94      	ldr	r2, [pc, #592]	; (8005338 <HAL_GPIO_Init+0x2a8>)
 80050e6:	4293      	cmp	r3, r2
 80050e8:	d869      	bhi.n	80051be <HAL_GPIO_Init+0x12e>
 80050ea:	4a94      	ldr	r2, [pc, #592]	; (800533c <HAL_GPIO_Init+0x2ac>)
 80050ec:	4293      	cmp	r3, r2
 80050ee:	d04c      	beq.n	800518a <HAL_GPIO_Init+0xfa>
 80050f0:	4a92      	ldr	r2, [pc, #584]	; (800533c <HAL_GPIO_Init+0x2ac>)
 80050f2:	4293      	cmp	r3, r2
 80050f4:	d863      	bhi.n	80051be <HAL_GPIO_Init+0x12e>
 80050f6:	4a92      	ldr	r2, [pc, #584]	; (8005340 <HAL_GPIO_Init+0x2b0>)
 80050f8:	4293      	cmp	r3, r2
 80050fa:	d046      	beq.n	800518a <HAL_GPIO_Init+0xfa>
 80050fc:	4a90      	ldr	r2, [pc, #576]	; (8005340 <HAL_GPIO_Init+0x2b0>)
 80050fe:	4293      	cmp	r3, r2
 8005100:	d85d      	bhi.n	80051be <HAL_GPIO_Init+0x12e>
 8005102:	2b12      	cmp	r3, #18
 8005104:	d82a      	bhi.n	800515c <HAL_GPIO_Init+0xcc>
 8005106:	2b12      	cmp	r3, #18
 8005108:	d859      	bhi.n	80051be <HAL_GPIO_Init+0x12e>
 800510a:	a201      	add	r2, pc, #4	; (adr r2, 8005110 <HAL_GPIO_Init+0x80>)
 800510c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005110:	0800518b 	.word	0x0800518b
 8005114:	08005165 	.word	0x08005165
 8005118:	08005177 	.word	0x08005177
 800511c:	080051b9 	.word	0x080051b9
 8005120:	080051bf 	.word	0x080051bf
 8005124:	080051bf 	.word	0x080051bf
 8005128:	080051bf 	.word	0x080051bf
 800512c:	080051bf 	.word	0x080051bf
 8005130:	080051bf 	.word	0x080051bf
 8005134:	080051bf 	.word	0x080051bf
 8005138:	080051bf 	.word	0x080051bf
 800513c:	080051bf 	.word	0x080051bf
 8005140:	080051bf 	.word	0x080051bf
 8005144:	080051bf 	.word	0x080051bf
 8005148:	080051bf 	.word	0x080051bf
 800514c:	080051bf 	.word	0x080051bf
 8005150:	080051bf 	.word	0x080051bf
 8005154:	0800516d 	.word	0x0800516d
 8005158:	08005181 	.word	0x08005181
 800515c:	4a79      	ldr	r2, [pc, #484]	; (8005344 <HAL_GPIO_Init+0x2b4>)
 800515e:	4293      	cmp	r3, r2
 8005160:	d013      	beq.n	800518a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8005162:	e02c      	b.n	80051be <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8005164:	683b      	ldr	r3, [r7, #0]
 8005166:	68db      	ldr	r3, [r3, #12]
 8005168:	623b      	str	r3, [r7, #32]
          break;
 800516a:	e029      	b.n	80051c0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800516c:	683b      	ldr	r3, [r7, #0]
 800516e:	68db      	ldr	r3, [r3, #12]
 8005170:	3304      	adds	r3, #4
 8005172:	623b      	str	r3, [r7, #32]
          break;
 8005174:	e024      	b.n	80051c0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8005176:	683b      	ldr	r3, [r7, #0]
 8005178:	68db      	ldr	r3, [r3, #12]
 800517a:	3308      	adds	r3, #8
 800517c:	623b      	str	r3, [r7, #32]
          break;
 800517e:	e01f      	b.n	80051c0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8005180:	683b      	ldr	r3, [r7, #0]
 8005182:	68db      	ldr	r3, [r3, #12]
 8005184:	330c      	adds	r3, #12
 8005186:	623b      	str	r3, [r7, #32]
          break;
 8005188:	e01a      	b.n	80051c0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800518a:	683b      	ldr	r3, [r7, #0]
 800518c:	689b      	ldr	r3, [r3, #8]
 800518e:	2b00      	cmp	r3, #0
 8005190:	d102      	bne.n	8005198 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8005192:	2304      	movs	r3, #4
 8005194:	623b      	str	r3, [r7, #32]
          break;
 8005196:	e013      	b.n	80051c0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8005198:	683b      	ldr	r3, [r7, #0]
 800519a:	689b      	ldr	r3, [r3, #8]
 800519c:	2b01      	cmp	r3, #1
 800519e:	d105      	bne.n	80051ac <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80051a0:	2308      	movs	r3, #8
 80051a2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	69fa      	ldr	r2, [r7, #28]
 80051a8:	611a      	str	r2, [r3, #16]
          break;
 80051aa:	e009      	b.n	80051c0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80051ac:	2308      	movs	r3, #8
 80051ae:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	69fa      	ldr	r2, [r7, #28]
 80051b4:	615a      	str	r2, [r3, #20]
          break;
 80051b6:	e003      	b.n	80051c0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80051b8:	2300      	movs	r3, #0
 80051ba:	623b      	str	r3, [r7, #32]
          break;
 80051bc:	e000      	b.n	80051c0 <HAL_GPIO_Init+0x130>
          break;
 80051be:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80051c0:	69bb      	ldr	r3, [r7, #24]
 80051c2:	2bff      	cmp	r3, #255	; 0xff
 80051c4:	d801      	bhi.n	80051ca <HAL_GPIO_Init+0x13a>
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	e001      	b.n	80051ce <HAL_GPIO_Init+0x13e>
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	3304      	adds	r3, #4
 80051ce:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80051d0:	69bb      	ldr	r3, [r7, #24]
 80051d2:	2bff      	cmp	r3, #255	; 0xff
 80051d4:	d802      	bhi.n	80051dc <HAL_GPIO_Init+0x14c>
 80051d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051d8:	009b      	lsls	r3, r3, #2
 80051da:	e002      	b.n	80051e2 <HAL_GPIO_Init+0x152>
 80051dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051de:	3b08      	subs	r3, #8
 80051e0:	009b      	lsls	r3, r3, #2
 80051e2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80051e4:	697b      	ldr	r3, [r7, #20]
 80051e6:	681a      	ldr	r2, [r3, #0]
 80051e8:	210f      	movs	r1, #15
 80051ea:	693b      	ldr	r3, [r7, #16]
 80051ec:	fa01 f303 	lsl.w	r3, r1, r3
 80051f0:	43db      	mvns	r3, r3
 80051f2:	401a      	ands	r2, r3
 80051f4:	6a39      	ldr	r1, [r7, #32]
 80051f6:	693b      	ldr	r3, [r7, #16]
 80051f8:	fa01 f303 	lsl.w	r3, r1, r3
 80051fc:	431a      	orrs	r2, r3
 80051fe:	697b      	ldr	r3, [r7, #20]
 8005200:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005202:	683b      	ldr	r3, [r7, #0]
 8005204:	685b      	ldr	r3, [r3, #4]
 8005206:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800520a:	2b00      	cmp	r3, #0
 800520c:	f000 80b1 	beq.w	8005372 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8005210:	4b4d      	ldr	r3, [pc, #308]	; (8005348 <HAL_GPIO_Init+0x2b8>)
 8005212:	699b      	ldr	r3, [r3, #24]
 8005214:	4a4c      	ldr	r2, [pc, #304]	; (8005348 <HAL_GPIO_Init+0x2b8>)
 8005216:	f043 0301 	orr.w	r3, r3, #1
 800521a:	6193      	str	r3, [r2, #24]
 800521c:	4b4a      	ldr	r3, [pc, #296]	; (8005348 <HAL_GPIO_Init+0x2b8>)
 800521e:	699b      	ldr	r3, [r3, #24]
 8005220:	f003 0301 	and.w	r3, r3, #1
 8005224:	60bb      	str	r3, [r7, #8]
 8005226:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8005228:	4a48      	ldr	r2, [pc, #288]	; (800534c <HAL_GPIO_Init+0x2bc>)
 800522a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800522c:	089b      	lsrs	r3, r3, #2
 800522e:	3302      	adds	r3, #2
 8005230:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005234:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8005236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005238:	f003 0303 	and.w	r3, r3, #3
 800523c:	009b      	lsls	r3, r3, #2
 800523e:	220f      	movs	r2, #15
 8005240:	fa02 f303 	lsl.w	r3, r2, r3
 8005244:	43db      	mvns	r3, r3
 8005246:	68fa      	ldr	r2, [r7, #12]
 8005248:	4013      	ands	r3, r2
 800524a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	4a40      	ldr	r2, [pc, #256]	; (8005350 <HAL_GPIO_Init+0x2c0>)
 8005250:	4293      	cmp	r3, r2
 8005252:	d013      	beq.n	800527c <HAL_GPIO_Init+0x1ec>
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	4a3f      	ldr	r2, [pc, #252]	; (8005354 <HAL_GPIO_Init+0x2c4>)
 8005258:	4293      	cmp	r3, r2
 800525a:	d00d      	beq.n	8005278 <HAL_GPIO_Init+0x1e8>
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	4a3e      	ldr	r2, [pc, #248]	; (8005358 <HAL_GPIO_Init+0x2c8>)
 8005260:	4293      	cmp	r3, r2
 8005262:	d007      	beq.n	8005274 <HAL_GPIO_Init+0x1e4>
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	4a3d      	ldr	r2, [pc, #244]	; (800535c <HAL_GPIO_Init+0x2cc>)
 8005268:	4293      	cmp	r3, r2
 800526a:	d101      	bne.n	8005270 <HAL_GPIO_Init+0x1e0>
 800526c:	2303      	movs	r3, #3
 800526e:	e006      	b.n	800527e <HAL_GPIO_Init+0x1ee>
 8005270:	2304      	movs	r3, #4
 8005272:	e004      	b.n	800527e <HAL_GPIO_Init+0x1ee>
 8005274:	2302      	movs	r3, #2
 8005276:	e002      	b.n	800527e <HAL_GPIO_Init+0x1ee>
 8005278:	2301      	movs	r3, #1
 800527a:	e000      	b.n	800527e <HAL_GPIO_Init+0x1ee>
 800527c:	2300      	movs	r3, #0
 800527e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005280:	f002 0203 	and.w	r2, r2, #3
 8005284:	0092      	lsls	r2, r2, #2
 8005286:	4093      	lsls	r3, r2
 8005288:	68fa      	ldr	r2, [r7, #12]
 800528a:	4313      	orrs	r3, r2
 800528c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800528e:	492f      	ldr	r1, [pc, #188]	; (800534c <HAL_GPIO_Init+0x2bc>)
 8005290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005292:	089b      	lsrs	r3, r3, #2
 8005294:	3302      	adds	r3, #2
 8005296:	68fa      	ldr	r2, [r7, #12]
 8005298:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800529c:	683b      	ldr	r3, [r7, #0]
 800529e:	685b      	ldr	r3, [r3, #4]
 80052a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d006      	beq.n	80052b6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80052a8:	4b2d      	ldr	r3, [pc, #180]	; (8005360 <HAL_GPIO_Init+0x2d0>)
 80052aa:	681a      	ldr	r2, [r3, #0]
 80052ac:	492c      	ldr	r1, [pc, #176]	; (8005360 <HAL_GPIO_Init+0x2d0>)
 80052ae:	69bb      	ldr	r3, [r7, #24]
 80052b0:	4313      	orrs	r3, r2
 80052b2:	600b      	str	r3, [r1, #0]
 80052b4:	e006      	b.n	80052c4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80052b6:	4b2a      	ldr	r3, [pc, #168]	; (8005360 <HAL_GPIO_Init+0x2d0>)
 80052b8:	681a      	ldr	r2, [r3, #0]
 80052ba:	69bb      	ldr	r3, [r7, #24]
 80052bc:	43db      	mvns	r3, r3
 80052be:	4928      	ldr	r1, [pc, #160]	; (8005360 <HAL_GPIO_Init+0x2d0>)
 80052c0:	4013      	ands	r3, r2
 80052c2:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80052c4:	683b      	ldr	r3, [r7, #0]
 80052c6:	685b      	ldr	r3, [r3, #4]
 80052c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d006      	beq.n	80052de <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80052d0:	4b23      	ldr	r3, [pc, #140]	; (8005360 <HAL_GPIO_Init+0x2d0>)
 80052d2:	685a      	ldr	r2, [r3, #4]
 80052d4:	4922      	ldr	r1, [pc, #136]	; (8005360 <HAL_GPIO_Init+0x2d0>)
 80052d6:	69bb      	ldr	r3, [r7, #24]
 80052d8:	4313      	orrs	r3, r2
 80052da:	604b      	str	r3, [r1, #4]
 80052dc:	e006      	b.n	80052ec <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80052de:	4b20      	ldr	r3, [pc, #128]	; (8005360 <HAL_GPIO_Init+0x2d0>)
 80052e0:	685a      	ldr	r2, [r3, #4]
 80052e2:	69bb      	ldr	r3, [r7, #24]
 80052e4:	43db      	mvns	r3, r3
 80052e6:	491e      	ldr	r1, [pc, #120]	; (8005360 <HAL_GPIO_Init+0x2d0>)
 80052e8:	4013      	ands	r3, r2
 80052ea:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80052ec:	683b      	ldr	r3, [r7, #0]
 80052ee:	685b      	ldr	r3, [r3, #4]
 80052f0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d006      	beq.n	8005306 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80052f8:	4b19      	ldr	r3, [pc, #100]	; (8005360 <HAL_GPIO_Init+0x2d0>)
 80052fa:	689a      	ldr	r2, [r3, #8]
 80052fc:	4918      	ldr	r1, [pc, #96]	; (8005360 <HAL_GPIO_Init+0x2d0>)
 80052fe:	69bb      	ldr	r3, [r7, #24]
 8005300:	4313      	orrs	r3, r2
 8005302:	608b      	str	r3, [r1, #8]
 8005304:	e006      	b.n	8005314 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8005306:	4b16      	ldr	r3, [pc, #88]	; (8005360 <HAL_GPIO_Init+0x2d0>)
 8005308:	689a      	ldr	r2, [r3, #8]
 800530a:	69bb      	ldr	r3, [r7, #24]
 800530c:	43db      	mvns	r3, r3
 800530e:	4914      	ldr	r1, [pc, #80]	; (8005360 <HAL_GPIO_Init+0x2d0>)
 8005310:	4013      	ands	r3, r2
 8005312:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005314:	683b      	ldr	r3, [r7, #0]
 8005316:	685b      	ldr	r3, [r3, #4]
 8005318:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800531c:	2b00      	cmp	r3, #0
 800531e:	d021      	beq.n	8005364 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8005320:	4b0f      	ldr	r3, [pc, #60]	; (8005360 <HAL_GPIO_Init+0x2d0>)
 8005322:	68da      	ldr	r2, [r3, #12]
 8005324:	490e      	ldr	r1, [pc, #56]	; (8005360 <HAL_GPIO_Init+0x2d0>)
 8005326:	69bb      	ldr	r3, [r7, #24]
 8005328:	4313      	orrs	r3, r2
 800532a:	60cb      	str	r3, [r1, #12]
 800532c:	e021      	b.n	8005372 <HAL_GPIO_Init+0x2e2>
 800532e:	bf00      	nop
 8005330:	10320000 	.word	0x10320000
 8005334:	10310000 	.word	0x10310000
 8005338:	10220000 	.word	0x10220000
 800533c:	10210000 	.word	0x10210000
 8005340:	10120000 	.word	0x10120000
 8005344:	10110000 	.word	0x10110000
 8005348:	40021000 	.word	0x40021000
 800534c:	40010000 	.word	0x40010000
 8005350:	40010800 	.word	0x40010800
 8005354:	40010c00 	.word	0x40010c00
 8005358:	40011000 	.word	0x40011000
 800535c:	40011400 	.word	0x40011400
 8005360:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8005364:	4b0b      	ldr	r3, [pc, #44]	; (8005394 <HAL_GPIO_Init+0x304>)
 8005366:	68da      	ldr	r2, [r3, #12]
 8005368:	69bb      	ldr	r3, [r7, #24]
 800536a:	43db      	mvns	r3, r3
 800536c:	4909      	ldr	r1, [pc, #36]	; (8005394 <HAL_GPIO_Init+0x304>)
 800536e:	4013      	ands	r3, r2
 8005370:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8005372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005374:	3301      	adds	r3, #1
 8005376:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005378:	683b      	ldr	r3, [r7, #0]
 800537a:	681a      	ldr	r2, [r3, #0]
 800537c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800537e:	fa22 f303 	lsr.w	r3, r2, r3
 8005382:	2b00      	cmp	r3, #0
 8005384:	f47f ae8e 	bne.w	80050a4 <HAL_GPIO_Init+0x14>
  }
}
 8005388:	bf00      	nop
 800538a:	bf00      	nop
 800538c:	372c      	adds	r7, #44	; 0x2c
 800538e:	46bd      	mov	sp, r7
 8005390:	bc80      	pop	{r7}
 8005392:	4770      	bx	lr
 8005394:	40010400 	.word	0x40010400

08005398 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005398:	b480      	push	{r7}
 800539a:	b083      	sub	sp, #12
 800539c:	af00      	add	r7, sp, #0
 800539e:	6078      	str	r0, [r7, #4]
 80053a0:	460b      	mov	r3, r1
 80053a2:	807b      	strh	r3, [r7, #2]
 80053a4:	4613      	mov	r3, r2
 80053a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80053a8:	787b      	ldrb	r3, [r7, #1]
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d003      	beq.n	80053b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80053ae:	887a      	ldrh	r2, [r7, #2]
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80053b4:	e003      	b.n	80053be <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80053b6:	887b      	ldrh	r3, [r7, #2]
 80053b8:	041a      	lsls	r2, r3, #16
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	611a      	str	r2, [r3, #16]
}
 80053be:	bf00      	nop
 80053c0:	370c      	adds	r7, #12
 80053c2:	46bd      	mov	sp, r7
 80053c4:	bc80      	pop	{r7}
 80053c6:	4770      	bx	lr

080053c8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80053c8:	b480      	push	{r7}
 80053ca:	b085      	sub	sp, #20
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	6078      	str	r0, [r7, #4]
 80053d0:	460b      	mov	r3, r1
 80053d2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	68db      	ldr	r3, [r3, #12]
 80053d8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80053da:	887a      	ldrh	r2, [r7, #2]
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	4013      	ands	r3, r2
 80053e0:	041a      	lsls	r2, r3, #16
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	43d9      	mvns	r1, r3
 80053e6:	887b      	ldrh	r3, [r7, #2]
 80053e8:	400b      	ands	r3, r1
 80053ea:	431a      	orrs	r2, r3
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	611a      	str	r2, [r3, #16]
}
 80053f0:	bf00      	nop
 80053f2:	3714      	adds	r7, #20
 80053f4:	46bd      	mov	sp, r7
 80053f6:	bc80      	pop	{r7}
 80053f8:	4770      	bx	lr
	...

080053fc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80053fc:	b580      	push	{r7, lr}
 80053fe:	b084      	sub	sp, #16
 8005400:	af00      	add	r7, sp, #0
 8005402:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	2b00      	cmp	r3, #0
 8005408:	d101      	bne.n	800540e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800540a:	2301      	movs	r3, #1
 800540c:	e12b      	b.n	8005666 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005414:	b2db      	uxtb	r3, r3
 8005416:	2b00      	cmp	r3, #0
 8005418:	d106      	bne.n	8005428 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	2200      	movs	r2, #0
 800541e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005422:	6878      	ldr	r0, [r7, #4]
 8005424:	f7ff f932 	bl	800468c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	2224      	movs	r2, #36	; 0x24
 800542c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	681a      	ldr	r2, [r3, #0]
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	f022 0201 	bic.w	r2, r2, #1
 800543e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	681a      	ldr	r2, [r3, #0]
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800544e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	681a      	ldr	r2, [r3, #0]
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800545e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005460:	f001 fb6e 	bl	8006b40 <HAL_RCC_GetPCLK1Freq>
 8005464:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	685b      	ldr	r3, [r3, #4]
 800546a:	4a81      	ldr	r2, [pc, #516]	; (8005670 <HAL_I2C_Init+0x274>)
 800546c:	4293      	cmp	r3, r2
 800546e:	d807      	bhi.n	8005480 <HAL_I2C_Init+0x84>
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	4a80      	ldr	r2, [pc, #512]	; (8005674 <HAL_I2C_Init+0x278>)
 8005474:	4293      	cmp	r3, r2
 8005476:	bf94      	ite	ls
 8005478:	2301      	movls	r3, #1
 800547a:	2300      	movhi	r3, #0
 800547c:	b2db      	uxtb	r3, r3
 800547e:	e006      	b.n	800548e <HAL_I2C_Init+0x92>
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	4a7d      	ldr	r2, [pc, #500]	; (8005678 <HAL_I2C_Init+0x27c>)
 8005484:	4293      	cmp	r3, r2
 8005486:	bf94      	ite	ls
 8005488:	2301      	movls	r3, #1
 800548a:	2300      	movhi	r3, #0
 800548c:	b2db      	uxtb	r3, r3
 800548e:	2b00      	cmp	r3, #0
 8005490:	d001      	beq.n	8005496 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005492:	2301      	movs	r3, #1
 8005494:	e0e7      	b.n	8005666 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	4a78      	ldr	r2, [pc, #480]	; (800567c <HAL_I2C_Init+0x280>)
 800549a:	fba2 2303 	umull	r2, r3, r2, r3
 800549e:	0c9b      	lsrs	r3, r3, #18
 80054a0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	685b      	ldr	r3, [r3, #4]
 80054a8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	68ba      	ldr	r2, [r7, #8]
 80054b2:	430a      	orrs	r2, r1
 80054b4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	6a1b      	ldr	r3, [r3, #32]
 80054bc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	685b      	ldr	r3, [r3, #4]
 80054c4:	4a6a      	ldr	r2, [pc, #424]	; (8005670 <HAL_I2C_Init+0x274>)
 80054c6:	4293      	cmp	r3, r2
 80054c8:	d802      	bhi.n	80054d0 <HAL_I2C_Init+0xd4>
 80054ca:	68bb      	ldr	r3, [r7, #8]
 80054cc:	3301      	adds	r3, #1
 80054ce:	e009      	b.n	80054e4 <HAL_I2C_Init+0xe8>
 80054d0:	68bb      	ldr	r3, [r7, #8]
 80054d2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80054d6:	fb02 f303 	mul.w	r3, r2, r3
 80054da:	4a69      	ldr	r2, [pc, #420]	; (8005680 <HAL_I2C_Init+0x284>)
 80054dc:	fba2 2303 	umull	r2, r3, r2, r3
 80054e0:	099b      	lsrs	r3, r3, #6
 80054e2:	3301      	adds	r3, #1
 80054e4:	687a      	ldr	r2, [r7, #4]
 80054e6:	6812      	ldr	r2, [r2, #0]
 80054e8:	430b      	orrs	r3, r1
 80054ea:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	69db      	ldr	r3, [r3, #28]
 80054f2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80054f6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	685b      	ldr	r3, [r3, #4]
 80054fe:	495c      	ldr	r1, [pc, #368]	; (8005670 <HAL_I2C_Init+0x274>)
 8005500:	428b      	cmp	r3, r1
 8005502:	d819      	bhi.n	8005538 <HAL_I2C_Init+0x13c>
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	1e59      	subs	r1, r3, #1
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	685b      	ldr	r3, [r3, #4]
 800550c:	005b      	lsls	r3, r3, #1
 800550e:	fbb1 f3f3 	udiv	r3, r1, r3
 8005512:	1c59      	adds	r1, r3, #1
 8005514:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005518:	400b      	ands	r3, r1
 800551a:	2b00      	cmp	r3, #0
 800551c:	d00a      	beq.n	8005534 <HAL_I2C_Init+0x138>
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	1e59      	subs	r1, r3, #1
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	685b      	ldr	r3, [r3, #4]
 8005526:	005b      	lsls	r3, r3, #1
 8005528:	fbb1 f3f3 	udiv	r3, r1, r3
 800552c:	3301      	adds	r3, #1
 800552e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005532:	e051      	b.n	80055d8 <HAL_I2C_Init+0x1dc>
 8005534:	2304      	movs	r3, #4
 8005536:	e04f      	b.n	80055d8 <HAL_I2C_Init+0x1dc>
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	689b      	ldr	r3, [r3, #8]
 800553c:	2b00      	cmp	r3, #0
 800553e:	d111      	bne.n	8005564 <HAL_I2C_Init+0x168>
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	1e58      	subs	r0, r3, #1
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	6859      	ldr	r1, [r3, #4]
 8005548:	460b      	mov	r3, r1
 800554a:	005b      	lsls	r3, r3, #1
 800554c:	440b      	add	r3, r1
 800554e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005552:	3301      	adds	r3, #1
 8005554:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005558:	2b00      	cmp	r3, #0
 800555a:	bf0c      	ite	eq
 800555c:	2301      	moveq	r3, #1
 800555e:	2300      	movne	r3, #0
 8005560:	b2db      	uxtb	r3, r3
 8005562:	e012      	b.n	800558a <HAL_I2C_Init+0x18e>
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	1e58      	subs	r0, r3, #1
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	6859      	ldr	r1, [r3, #4]
 800556c:	460b      	mov	r3, r1
 800556e:	009b      	lsls	r3, r3, #2
 8005570:	440b      	add	r3, r1
 8005572:	0099      	lsls	r1, r3, #2
 8005574:	440b      	add	r3, r1
 8005576:	fbb0 f3f3 	udiv	r3, r0, r3
 800557a:	3301      	adds	r3, #1
 800557c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005580:	2b00      	cmp	r3, #0
 8005582:	bf0c      	ite	eq
 8005584:	2301      	moveq	r3, #1
 8005586:	2300      	movne	r3, #0
 8005588:	b2db      	uxtb	r3, r3
 800558a:	2b00      	cmp	r3, #0
 800558c:	d001      	beq.n	8005592 <HAL_I2C_Init+0x196>
 800558e:	2301      	movs	r3, #1
 8005590:	e022      	b.n	80055d8 <HAL_I2C_Init+0x1dc>
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	689b      	ldr	r3, [r3, #8]
 8005596:	2b00      	cmp	r3, #0
 8005598:	d10e      	bne.n	80055b8 <HAL_I2C_Init+0x1bc>
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	1e58      	subs	r0, r3, #1
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	6859      	ldr	r1, [r3, #4]
 80055a2:	460b      	mov	r3, r1
 80055a4:	005b      	lsls	r3, r3, #1
 80055a6:	440b      	add	r3, r1
 80055a8:	fbb0 f3f3 	udiv	r3, r0, r3
 80055ac:	3301      	adds	r3, #1
 80055ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80055b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80055b6:	e00f      	b.n	80055d8 <HAL_I2C_Init+0x1dc>
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	1e58      	subs	r0, r3, #1
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	6859      	ldr	r1, [r3, #4]
 80055c0:	460b      	mov	r3, r1
 80055c2:	009b      	lsls	r3, r3, #2
 80055c4:	440b      	add	r3, r1
 80055c6:	0099      	lsls	r1, r3, #2
 80055c8:	440b      	add	r3, r1
 80055ca:	fbb0 f3f3 	udiv	r3, r0, r3
 80055ce:	3301      	adds	r3, #1
 80055d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80055d4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80055d8:	6879      	ldr	r1, [r7, #4]
 80055da:	6809      	ldr	r1, [r1, #0]
 80055dc:	4313      	orrs	r3, r2
 80055de:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	69da      	ldr	r2, [r3, #28]
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	6a1b      	ldr	r3, [r3, #32]
 80055f2:	431a      	orrs	r2, r3
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	430a      	orrs	r2, r1
 80055fa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	689b      	ldr	r3, [r3, #8]
 8005602:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8005606:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800560a:	687a      	ldr	r2, [r7, #4]
 800560c:	6911      	ldr	r1, [r2, #16]
 800560e:	687a      	ldr	r2, [r7, #4]
 8005610:	68d2      	ldr	r2, [r2, #12]
 8005612:	4311      	orrs	r1, r2
 8005614:	687a      	ldr	r2, [r7, #4]
 8005616:	6812      	ldr	r2, [r2, #0]
 8005618:	430b      	orrs	r3, r1
 800561a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	68db      	ldr	r3, [r3, #12]
 8005622:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	695a      	ldr	r2, [r3, #20]
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	699b      	ldr	r3, [r3, #24]
 800562e:	431a      	orrs	r2, r3
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	430a      	orrs	r2, r1
 8005636:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	681a      	ldr	r2, [r3, #0]
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	f042 0201 	orr.w	r2, r2, #1
 8005646:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	2200      	movs	r2, #0
 800564c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	2220      	movs	r2, #32
 8005652:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	2200      	movs	r2, #0
 800565a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	2200      	movs	r2, #0
 8005660:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005664:	2300      	movs	r3, #0
}
 8005666:	4618      	mov	r0, r3
 8005668:	3710      	adds	r7, #16
 800566a:	46bd      	mov	sp, r7
 800566c:	bd80      	pop	{r7, pc}
 800566e:	bf00      	nop
 8005670:	000186a0 	.word	0x000186a0
 8005674:	001e847f 	.word	0x001e847f
 8005678:	003d08ff 	.word	0x003d08ff
 800567c:	431bde83 	.word	0x431bde83
 8005680:	10624dd3 	.word	0x10624dd3

08005684 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005684:	b580      	push	{r7, lr}
 8005686:	b088      	sub	sp, #32
 8005688:	af02      	add	r7, sp, #8
 800568a:	60f8      	str	r0, [r7, #12]
 800568c:	607a      	str	r2, [r7, #4]
 800568e:	461a      	mov	r2, r3
 8005690:	460b      	mov	r3, r1
 8005692:	817b      	strh	r3, [r7, #10]
 8005694:	4613      	mov	r3, r2
 8005696:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005698:	f7ff fb3c 	bl	8004d14 <HAL_GetTick>
 800569c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056a4:	b2db      	uxtb	r3, r3
 80056a6:	2b20      	cmp	r3, #32
 80056a8:	f040 80e0 	bne.w	800586c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80056ac:	697b      	ldr	r3, [r7, #20]
 80056ae:	9300      	str	r3, [sp, #0]
 80056b0:	2319      	movs	r3, #25
 80056b2:	2201      	movs	r2, #1
 80056b4:	4970      	ldr	r1, [pc, #448]	; (8005878 <HAL_I2C_Master_Transmit+0x1f4>)
 80056b6:	68f8      	ldr	r0, [r7, #12]
 80056b8:	f000 fc92 	bl	8005fe0 <I2C_WaitOnFlagUntilTimeout>
 80056bc:	4603      	mov	r3, r0
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d001      	beq.n	80056c6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80056c2:	2302      	movs	r3, #2
 80056c4:	e0d3      	b.n	800586e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80056cc:	2b01      	cmp	r3, #1
 80056ce:	d101      	bne.n	80056d4 <HAL_I2C_Master_Transmit+0x50>
 80056d0:	2302      	movs	r3, #2
 80056d2:	e0cc      	b.n	800586e <HAL_I2C_Master_Transmit+0x1ea>
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	2201      	movs	r2, #1
 80056d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	f003 0301 	and.w	r3, r3, #1
 80056e6:	2b01      	cmp	r3, #1
 80056e8:	d007      	beq.n	80056fa <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	681a      	ldr	r2, [r3, #0]
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	f042 0201 	orr.w	r2, r2, #1
 80056f8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	681a      	ldr	r2, [r3, #0]
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005708:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	2221      	movs	r2, #33	; 0x21
 800570e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	2210      	movs	r2, #16
 8005716:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	2200      	movs	r2, #0
 800571e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	687a      	ldr	r2, [r7, #4]
 8005724:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	893a      	ldrh	r2, [r7, #8]
 800572a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005730:	b29a      	uxth	r2, r3
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	4a50      	ldr	r2, [pc, #320]	; (800587c <HAL_I2C_Master_Transmit+0x1f8>)
 800573a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800573c:	8979      	ldrh	r1, [r7, #10]
 800573e:	697b      	ldr	r3, [r7, #20]
 8005740:	6a3a      	ldr	r2, [r7, #32]
 8005742:	68f8      	ldr	r0, [r7, #12]
 8005744:	f000 fafc 	bl	8005d40 <I2C_MasterRequestWrite>
 8005748:	4603      	mov	r3, r0
 800574a:	2b00      	cmp	r3, #0
 800574c:	d001      	beq.n	8005752 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800574e:	2301      	movs	r3, #1
 8005750:	e08d      	b.n	800586e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005752:	2300      	movs	r3, #0
 8005754:	613b      	str	r3, [r7, #16]
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	695b      	ldr	r3, [r3, #20]
 800575c:	613b      	str	r3, [r7, #16]
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	699b      	ldr	r3, [r3, #24]
 8005764:	613b      	str	r3, [r7, #16]
 8005766:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8005768:	e066      	b.n	8005838 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800576a:	697a      	ldr	r2, [r7, #20]
 800576c:	6a39      	ldr	r1, [r7, #32]
 800576e:	68f8      	ldr	r0, [r7, #12]
 8005770:	f000 fd0c 	bl	800618c <I2C_WaitOnTXEFlagUntilTimeout>
 8005774:	4603      	mov	r3, r0
 8005776:	2b00      	cmp	r3, #0
 8005778:	d00d      	beq.n	8005796 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800577e:	2b04      	cmp	r3, #4
 8005780:	d107      	bne.n	8005792 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	681a      	ldr	r2, [r3, #0]
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005790:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005792:	2301      	movs	r3, #1
 8005794:	e06b      	b.n	800586e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800579a:	781a      	ldrb	r2, [r3, #0]
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057a6:	1c5a      	adds	r2, r3, #1
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057b0:	b29b      	uxth	r3, r3
 80057b2:	3b01      	subs	r3, #1
 80057b4:	b29a      	uxth	r2, r3
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80057be:	3b01      	subs	r3, #1
 80057c0:	b29a      	uxth	r2, r3
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	695b      	ldr	r3, [r3, #20]
 80057cc:	f003 0304 	and.w	r3, r3, #4
 80057d0:	2b04      	cmp	r3, #4
 80057d2:	d11b      	bne.n	800580c <HAL_I2C_Master_Transmit+0x188>
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d017      	beq.n	800580c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057e0:	781a      	ldrb	r2, [r3, #0]
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057ec:	1c5a      	adds	r2, r3, #1
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057f6:	b29b      	uxth	r3, r3
 80057f8:	3b01      	subs	r3, #1
 80057fa:	b29a      	uxth	r2, r3
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005804:	3b01      	subs	r3, #1
 8005806:	b29a      	uxth	r2, r3
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800580c:	697a      	ldr	r2, [r7, #20]
 800580e:	6a39      	ldr	r1, [r7, #32]
 8005810:	68f8      	ldr	r0, [r7, #12]
 8005812:	f000 fcfc 	bl	800620e <I2C_WaitOnBTFFlagUntilTimeout>
 8005816:	4603      	mov	r3, r0
 8005818:	2b00      	cmp	r3, #0
 800581a:	d00d      	beq.n	8005838 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005820:	2b04      	cmp	r3, #4
 8005822:	d107      	bne.n	8005834 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	681a      	ldr	r2, [r3, #0]
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005832:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005834:	2301      	movs	r3, #1
 8005836:	e01a      	b.n	800586e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800583c:	2b00      	cmp	r3, #0
 800583e:	d194      	bne.n	800576a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	681a      	ldr	r2, [r3, #0]
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800584e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	2220      	movs	r2, #32
 8005854:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	2200      	movs	r2, #0
 800585c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	2200      	movs	r2, #0
 8005864:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005868:	2300      	movs	r3, #0
 800586a:	e000      	b.n	800586e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800586c:	2302      	movs	r3, #2
  }
}
 800586e:	4618      	mov	r0, r3
 8005870:	3718      	adds	r7, #24
 8005872:	46bd      	mov	sp, r7
 8005874:	bd80      	pop	{r7, pc}
 8005876:	bf00      	nop
 8005878:	00100002 	.word	0x00100002
 800587c:	ffff0000 	.word	0xffff0000

08005880 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005880:	b580      	push	{r7, lr}
 8005882:	b08c      	sub	sp, #48	; 0x30
 8005884:	af02      	add	r7, sp, #8
 8005886:	60f8      	str	r0, [r7, #12]
 8005888:	607a      	str	r2, [r7, #4]
 800588a:	461a      	mov	r2, r3
 800588c:	460b      	mov	r3, r1
 800588e:	817b      	strh	r3, [r7, #10]
 8005890:	4613      	mov	r3, r2
 8005892:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8005894:	2300      	movs	r3, #0
 8005896:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005898:	f7ff fa3c 	bl	8004d14 <HAL_GetTick>
 800589c:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80058a4:	b2db      	uxtb	r3, r3
 80058a6:	2b20      	cmp	r3, #32
 80058a8:	f040 823f 	bne.w	8005d2a <HAL_I2C_Master_Receive+0x4aa>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80058ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058ae:	9300      	str	r3, [sp, #0]
 80058b0:	2319      	movs	r3, #25
 80058b2:	2201      	movs	r2, #1
 80058b4:	497f      	ldr	r1, [pc, #508]	; (8005ab4 <HAL_I2C_Master_Receive+0x234>)
 80058b6:	68f8      	ldr	r0, [r7, #12]
 80058b8:	f000 fb92 	bl	8005fe0 <I2C_WaitOnFlagUntilTimeout>
 80058bc:	4603      	mov	r3, r0
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d001      	beq.n	80058c6 <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 80058c2:	2302      	movs	r3, #2
 80058c4:	e232      	b.n	8005d2c <HAL_I2C_Master_Receive+0x4ac>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80058cc:	2b01      	cmp	r3, #1
 80058ce:	d101      	bne.n	80058d4 <HAL_I2C_Master_Receive+0x54>
 80058d0:	2302      	movs	r3, #2
 80058d2:	e22b      	b.n	8005d2c <HAL_I2C_Master_Receive+0x4ac>
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	2201      	movs	r2, #1
 80058d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	f003 0301 	and.w	r3, r3, #1
 80058e6:	2b01      	cmp	r3, #1
 80058e8:	d007      	beq.n	80058fa <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	681a      	ldr	r2, [r3, #0]
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	f042 0201 	orr.w	r2, r2, #1
 80058f8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	681a      	ldr	r2, [r3, #0]
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005908:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	2222      	movs	r2, #34	; 0x22
 800590e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	2210      	movs	r2, #16
 8005916:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	2200      	movs	r2, #0
 800591e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	687a      	ldr	r2, [r7, #4]
 8005924:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	893a      	ldrh	r2, [r7, #8]
 800592a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005930:	b29a      	uxth	r2, r3
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	4a5f      	ldr	r2, [pc, #380]	; (8005ab8 <HAL_I2C_Master_Receive+0x238>)
 800593a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800593c:	8979      	ldrh	r1, [r7, #10]
 800593e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005940:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005942:	68f8      	ldr	r0, [r7, #12]
 8005944:	f000 fa7e 	bl	8005e44 <I2C_MasterRequestRead>
 8005948:	4603      	mov	r3, r0
 800594a:	2b00      	cmp	r3, #0
 800594c:	d001      	beq.n	8005952 <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 800594e:	2301      	movs	r3, #1
 8005950:	e1ec      	b.n	8005d2c <HAL_I2C_Master_Receive+0x4ac>
    }

    if (hi2c->XferSize == 0U)
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005956:	2b00      	cmp	r3, #0
 8005958:	d113      	bne.n	8005982 <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800595a:	2300      	movs	r3, #0
 800595c:	61fb      	str	r3, [r7, #28]
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	695b      	ldr	r3, [r3, #20]
 8005964:	61fb      	str	r3, [r7, #28]
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	699b      	ldr	r3, [r3, #24]
 800596c:	61fb      	str	r3, [r7, #28]
 800596e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	681a      	ldr	r2, [r3, #0]
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800597e:	601a      	str	r2, [r3, #0]
 8005980:	e1c0      	b.n	8005d04 <HAL_I2C_Master_Receive+0x484>
    }
    else if (hi2c->XferSize == 1U)
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005986:	2b01      	cmp	r3, #1
 8005988:	d11e      	bne.n	80059c8 <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	681a      	ldr	r2, [r3, #0]
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005998:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800599a:	b672      	cpsid	i
}
 800599c:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800599e:	2300      	movs	r3, #0
 80059a0:	61bb      	str	r3, [r7, #24]
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	695b      	ldr	r3, [r3, #20]
 80059a8:	61bb      	str	r3, [r7, #24]
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	699b      	ldr	r3, [r3, #24]
 80059b0:	61bb      	str	r3, [r7, #24]
 80059b2:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	681a      	ldr	r2, [r3, #0]
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80059c2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80059c4:	b662      	cpsie	i
}
 80059c6:	e035      	b.n	8005a34 <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80059cc:	2b02      	cmp	r3, #2
 80059ce:	d11e      	bne.n	8005a0e <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	681a      	ldr	r2, [r3, #0]
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80059de:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80059e0:	b672      	cpsid	i
}
 80059e2:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80059e4:	2300      	movs	r3, #0
 80059e6:	617b      	str	r3, [r7, #20]
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	695b      	ldr	r3, [r3, #20]
 80059ee:	617b      	str	r3, [r7, #20]
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	699b      	ldr	r3, [r3, #24]
 80059f6:	617b      	str	r3, [r7, #20]
 80059f8:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	681a      	ldr	r2, [r3, #0]
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005a08:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8005a0a:	b662      	cpsie	i
}
 8005a0c:	e012      	b.n	8005a34 <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	681a      	ldr	r2, [r3, #0]
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005a1c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005a1e:	2300      	movs	r3, #0
 8005a20:	613b      	str	r3, [r7, #16]
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	695b      	ldr	r3, [r3, #20]
 8005a28:	613b      	str	r3, [r7, #16]
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	699b      	ldr	r3, [r3, #24]
 8005a30:	613b      	str	r3, [r7, #16]
 8005a32:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8005a34:	e166      	b.n	8005d04 <HAL_I2C_Master_Receive+0x484>
    {
      if (hi2c->XferSize <= 3U)
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a3a:	2b03      	cmp	r3, #3
 8005a3c:	f200 811f 	bhi.w	8005c7e <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a44:	2b01      	cmp	r3, #1
 8005a46:	d123      	bne.n	8005a90 <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005a48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a4a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005a4c:	68f8      	ldr	r0, [r7, #12]
 8005a4e:	f000 fc1f 	bl	8006290 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005a52:	4603      	mov	r3, r0
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d001      	beq.n	8005a5c <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 8005a58:	2301      	movs	r3, #1
 8005a5a:	e167      	b.n	8005d2c <HAL_I2C_Master_Receive+0x4ac>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	691a      	ldr	r2, [r3, #16]
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a66:	b2d2      	uxtb	r2, r2
 8005a68:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a6e:	1c5a      	adds	r2, r3, #1
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a78:	3b01      	subs	r3, #1
 8005a7a:	b29a      	uxth	r2, r3
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a84:	b29b      	uxth	r3, r3
 8005a86:	3b01      	subs	r3, #1
 8005a88:	b29a      	uxth	r2, r3
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005a8e:	e139      	b.n	8005d04 <HAL_I2C_Master_Receive+0x484>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a94:	2b02      	cmp	r3, #2
 8005a96:	d152      	bne.n	8005b3e <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a9a:	9300      	str	r3, [sp, #0]
 8005a9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a9e:	2200      	movs	r2, #0
 8005aa0:	4906      	ldr	r1, [pc, #24]	; (8005abc <HAL_I2C_Master_Receive+0x23c>)
 8005aa2:	68f8      	ldr	r0, [r7, #12]
 8005aa4:	f000 fa9c 	bl	8005fe0 <I2C_WaitOnFlagUntilTimeout>
 8005aa8:	4603      	mov	r3, r0
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d008      	beq.n	8005ac0 <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 8005aae:	2301      	movs	r3, #1
 8005ab0:	e13c      	b.n	8005d2c <HAL_I2C_Master_Receive+0x4ac>
 8005ab2:	bf00      	nop
 8005ab4:	00100002 	.word	0x00100002
 8005ab8:	ffff0000 	.word	0xffff0000
 8005abc:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8005ac0:	b672      	cpsid	i
}
 8005ac2:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	681a      	ldr	r2, [r3, #0]
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005ad2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	691a      	ldr	r2, [r3, #16]
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ade:	b2d2      	uxtb	r2, r2
 8005ae0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ae6:	1c5a      	adds	r2, r3, #1
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005af0:	3b01      	subs	r3, #1
 8005af2:	b29a      	uxth	r2, r3
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005afc:	b29b      	uxth	r3, r3
 8005afe:	3b01      	subs	r3, #1
 8005b00:	b29a      	uxth	r2, r3
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8005b06:	b662      	cpsie	i
}
 8005b08:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	691a      	ldr	r2, [r3, #16]
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b14:	b2d2      	uxtb	r2, r2
 8005b16:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b1c:	1c5a      	adds	r2, r3, #1
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b26:	3b01      	subs	r3, #1
 8005b28:	b29a      	uxth	r2, r3
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b32:	b29b      	uxth	r3, r3
 8005b34:	3b01      	subs	r3, #1
 8005b36:	b29a      	uxth	r2, r3
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005b3c:	e0e2      	b.n	8005d04 <HAL_I2C_Master_Receive+0x484>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b40:	9300      	str	r3, [sp, #0]
 8005b42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b44:	2200      	movs	r2, #0
 8005b46:	497b      	ldr	r1, [pc, #492]	; (8005d34 <HAL_I2C_Master_Receive+0x4b4>)
 8005b48:	68f8      	ldr	r0, [r7, #12]
 8005b4a:	f000 fa49 	bl	8005fe0 <I2C_WaitOnFlagUntilTimeout>
 8005b4e:	4603      	mov	r3, r0
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d001      	beq.n	8005b58 <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 8005b54:	2301      	movs	r3, #1
 8005b56:	e0e9      	b.n	8005d2c <HAL_I2C_Master_Receive+0x4ac>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	681a      	ldr	r2, [r3, #0]
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005b66:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8005b68:	b672      	cpsid	i
}
 8005b6a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	691a      	ldr	r2, [r3, #16]
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b76:	b2d2      	uxtb	r2, r2
 8005b78:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b7e:	1c5a      	adds	r2, r3, #1
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b88:	3b01      	subs	r3, #1
 8005b8a:	b29a      	uxth	r2, r3
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b94:	b29b      	uxth	r3, r3
 8005b96:	3b01      	subs	r3, #1
 8005b98:	b29a      	uxth	r2, r3
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8005b9e:	4b66      	ldr	r3, [pc, #408]	; (8005d38 <HAL_I2C_Master_Receive+0x4b8>)
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	08db      	lsrs	r3, r3, #3
 8005ba4:	4a65      	ldr	r2, [pc, #404]	; (8005d3c <HAL_I2C_Master_Receive+0x4bc>)
 8005ba6:	fba2 2303 	umull	r2, r3, r2, r3
 8005baa:	0a1a      	lsrs	r2, r3, #8
 8005bac:	4613      	mov	r3, r2
 8005bae:	009b      	lsls	r3, r3, #2
 8005bb0:	4413      	add	r3, r2
 8005bb2:	00da      	lsls	r2, r3, #3
 8005bb4:	1ad3      	subs	r3, r2, r3
 8005bb6:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8005bb8:	6a3b      	ldr	r3, [r7, #32]
 8005bba:	3b01      	subs	r3, #1
 8005bbc:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8005bbe:	6a3b      	ldr	r3, [r7, #32]
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d118      	bne.n	8005bf6 <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	2200      	movs	r2, #0
 8005bc8:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	2220      	movs	r2, #32
 8005bce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	2200      	movs	r2, #0
 8005bd6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bde:	f043 0220 	orr.w	r2, r3, #32
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8005be6:	b662      	cpsie	i
}
 8005be8:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	2200      	movs	r2, #0
 8005bee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8005bf2:	2301      	movs	r3, #1
 8005bf4:	e09a      	b.n	8005d2c <HAL_I2C_Master_Receive+0x4ac>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	695b      	ldr	r3, [r3, #20]
 8005bfc:	f003 0304 	and.w	r3, r3, #4
 8005c00:	2b04      	cmp	r3, #4
 8005c02:	d1d9      	bne.n	8005bb8 <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	681a      	ldr	r2, [r3, #0]
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005c12:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	691a      	ldr	r2, [r3, #16]
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c1e:	b2d2      	uxtb	r2, r2
 8005c20:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c26:	1c5a      	adds	r2, r3, #1
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c30:	3b01      	subs	r3, #1
 8005c32:	b29a      	uxth	r2, r3
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c3c:	b29b      	uxth	r3, r3
 8005c3e:	3b01      	subs	r3, #1
 8005c40:	b29a      	uxth	r2, r3
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8005c46:	b662      	cpsie	i
}
 8005c48:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	691a      	ldr	r2, [r3, #16]
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c54:	b2d2      	uxtb	r2, r2
 8005c56:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c5c:	1c5a      	adds	r2, r3, #1
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c66:	3b01      	subs	r3, #1
 8005c68:	b29a      	uxth	r2, r3
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c72:	b29b      	uxth	r3, r3
 8005c74:	3b01      	subs	r3, #1
 8005c76:	b29a      	uxth	r2, r3
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005c7c:	e042      	b.n	8005d04 <HAL_I2C_Master_Receive+0x484>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005c7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c80:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005c82:	68f8      	ldr	r0, [r7, #12]
 8005c84:	f000 fb04 	bl	8006290 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005c88:	4603      	mov	r3, r0
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d001      	beq.n	8005c92 <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 8005c8e:	2301      	movs	r3, #1
 8005c90:	e04c      	b.n	8005d2c <HAL_I2C_Master_Receive+0x4ac>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	691a      	ldr	r2, [r3, #16]
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c9c:	b2d2      	uxtb	r2, r2
 8005c9e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ca4:	1c5a      	adds	r2, r3, #1
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005cae:	3b01      	subs	r3, #1
 8005cb0:	b29a      	uxth	r2, r3
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005cba:	b29b      	uxth	r3, r3
 8005cbc:	3b01      	subs	r3, #1
 8005cbe:	b29a      	uxth	r2, r3
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	695b      	ldr	r3, [r3, #20]
 8005cca:	f003 0304 	and.w	r3, r3, #4
 8005cce:	2b04      	cmp	r3, #4
 8005cd0:	d118      	bne.n	8005d04 <HAL_I2C_Master_Receive+0x484>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	691a      	ldr	r2, [r3, #16]
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cdc:	b2d2      	uxtb	r2, r2
 8005cde:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ce4:	1c5a      	adds	r2, r3, #1
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005cee:	3b01      	subs	r3, #1
 8005cf0:	b29a      	uxth	r2, r3
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005cfa:	b29b      	uxth	r3, r3
 8005cfc:	3b01      	subs	r3, #1
 8005cfe:	b29a      	uxth	r2, r3
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	f47f ae94 	bne.w	8005a36 <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	2220      	movs	r2, #32
 8005d12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	2200      	movs	r2, #0
 8005d1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	2200      	movs	r2, #0
 8005d22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005d26:	2300      	movs	r3, #0
 8005d28:	e000      	b.n	8005d2c <HAL_I2C_Master_Receive+0x4ac>
  }
  else
  {
    return HAL_BUSY;
 8005d2a:	2302      	movs	r3, #2
  }
}
 8005d2c:	4618      	mov	r0, r3
 8005d2e:	3728      	adds	r7, #40	; 0x28
 8005d30:	46bd      	mov	sp, r7
 8005d32:	bd80      	pop	{r7, pc}
 8005d34:	00010004 	.word	0x00010004
 8005d38:	2000000c 	.word	0x2000000c
 8005d3c:	14f8b589 	.word	0x14f8b589

08005d40 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005d40:	b580      	push	{r7, lr}
 8005d42:	b088      	sub	sp, #32
 8005d44:	af02      	add	r7, sp, #8
 8005d46:	60f8      	str	r0, [r7, #12]
 8005d48:	607a      	str	r2, [r7, #4]
 8005d4a:	603b      	str	r3, [r7, #0]
 8005d4c:	460b      	mov	r3, r1
 8005d4e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d54:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005d56:	697b      	ldr	r3, [r7, #20]
 8005d58:	2b08      	cmp	r3, #8
 8005d5a:	d006      	beq.n	8005d6a <I2C_MasterRequestWrite+0x2a>
 8005d5c:	697b      	ldr	r3, [r7, #20]
 8005d5e:	2b01      	cmp	r3, #1
 8005d60:	d003      	beq.n	8005d6a <I2C_MasterRequestWrite+0x2a>
 8005d62:	697b      	ldr	r3, [r7, #20]
 8005d64:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005d68:	d108      	bne.n	8005d7c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	681a      	ldr	r2, [r3, #0]
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005d78:	601a      	str	r2, [r3, #0]
 8005d7a:	e00b      	b.n	8005d94 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d80:	2b12      	cmp	r3, #18
 8005d82:	d107      	bne.n	8005d94 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	681a      	ldr	r2, [r3, #0]
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005d92:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005d94:	683b      	ldr	r3, [r7, #0]
 8005d96:	9300      	str	r3, [sp, #0]
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	2200      	movs	r2, #0
 8005d9c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005da0:	68f8      	ldr	r0, [r7, #12]
 8005da2:	f000 f91d 	bl	8005fe0 <I2C_WaitOnFlagUntilTimeout>
 8005da6:	4603      	mov	r3, r0
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d00d      	beq.n	8005dc8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005db6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005dba:	d103      	bne.n	8005dc4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005dc2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005dc4:	2303      	movs	r3, #3
 8005dc6:	e035      	b.n	8005e34 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	691b      	ldr	r3, [r3, #16]
 8005dcc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005dd0:	d108      	bne.n	8005de4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005dd2:	897b      	ldrh	r3, [r7, #10]
 8005dd4:	b2db      	uxtb	r3, r3
 8005dd6:	461a      	mov	r2, r3
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005de0:	611a      	str	r2, [r3, #16]
 8005de2:	e01b      	b.n	8005e1c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005de4:	897b      	ldrh	r3, [r7, #10]
 8005de6:	11db      	asrs	r3, r3, #7
 8005de8:	b2db      	uxtb	r3, r3
 8005dea:	f003 0306 	and.w	r3, r3, #6
 8005dee:	b2db      	uxtb	r3, r3
 8005df0:	f063 030f 	orn	r3, r3, #15
 8005df4:	b2da      	uxtb	r2, r3
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005dfc:	683b      	ldr	r3, [r7, #0]
 8005dfe:	687a      	ldr	r2, [r7, #4]
 8005e00:	490e      	ldr	r1, [pc, #56]	; (8005e3c <I2C_MasterRequestWrite+0xfc>)
 8005e02:	68f8      	ldr	r0, [r7, #12]
 8005e04:	f000 f943 	bl	800608e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005e08:	4603      	mov	r3, r0
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d001      	beq.n	8005e12 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8005e0e:	2301      	movs	r3, #1
 8005e10:	e010      	b.n	8005e34 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005e12:	897b      	ldrh	r3, [r7, #10]
 8005e14:	b2da      	uxtb	r2, r3
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005e1c:	683b      	ldr	r3, [r7, #0]
 8005e1e:	687a      	ldr	r2, [r7, #4]
 8005e20:	4907      	ldr	r1, [pc, #28]	; (8005e40 <I2C_MasterRequestWrite+0x100>)
 8005e22:	68f8      	ldr	r0, [r7, #12]
 8005e24:	f000 f933 	bl	800608e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005e28:	4603      	mov	r3, r0
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d001      	beq.n	8005e32 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8005e2e:	2301      	movs	r3, #1
 8005e30:	e000      	b.n	8005e34 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8005e32:	2300      	movs	r3, #0
}
 8005e34:	4618      	mov	r0, r3
 8005e36:	3718      	adds	r7, #24
 8005e38:	46bd      	mov	sp, r7
 8005e3a:	bd80      	pop	{r7, pc}
 8005e3c:	00010008 	.word	0x00010008
 8005e40:	00010002 	.word	0x00010002

08005e44 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005e44:	b580      	push	{r7, lr}
 8005e46:	b088      	sub	sp, #32
 8005e48:	af02      	add	r7, sp, #8
 8005e4a:	60f8      	str	r0, [r7, #12]
 8005e4c:	607a      	str	r2, [r7, #4]
 8005e4e:	603b      	str	r3, [r7, #0]
 8005e50:	460b      	mov	r3, r1
 8005e52:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e58:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	681a      	ldr	r2, [r3, #0]
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005e68:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005e6a:	697b      	ldr	r3, [r7, #20]
 8005e6c:	2b08      	cmp	r3, #8
 8005e6e:	d006      	beq.n	8005e7e <I2C_MasterRequestRead+0x3a>
 8005e70:	697b      	ldr	r3, [r7, #20]
 8005e72:	2b01      	cmp	r3, #1
 8005e74:	d003      	beq.n	8005e7e <I2C_MasterRequestRead+0x3a>
 8005e76:	697b      	ldr	r3, [r7, #20]
 8005e78:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005e7c:	d108      	bne.n	8005e90 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	681a      	ldr	r2, [r3, #0]
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005e8c:	601a      	str	r2, [r3, #0]
 8005e8e:	e00b      	b.n	8005ea8 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e94:	2b11      	cmp	r3, #17
 8005e96:	d107      	bne.n	8005ea8 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	681a      	ldr	r2, [r3, #0]
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005ea6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005ea8:	683b      	ldr	r3, [r7, #0]
 8005eaa:	9300      	str	r3, [sp, #0]
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	2200      	movs	r2, #0
 8005eb0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005eb4:	68f8      	ldr	r0, [r7, #12]
 8005eb6:	f000 f893 	bl	8005fe0 <I2C_WaitOnFlagUntilTimeout>
 8005eba:	4603      	mov	r3, r0
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d00d      	beq.n	8005edc <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005eca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005ece:	d103      	bne.n	8005ed8 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005ed6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005ed8:	2303      	movs	r3, #3
 8005eda:	e079      	b.n	8005fd0 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	691b      	ldr	r3, [r3, #16]
 8005ee0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005ee4:	d108      	bne.n	8005ef8 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005ee6:	897b      	ldrh	r3, [r7, #10]
 8005ee8:	b2db      	uxtb	r3, r3
 8005eea:	f043 0301 	orr.w	r3, r3, #1
 8005eee:	b2da      	uxtb	r2, r3
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	611a      	str	r2, [r3, #16]
 8005ef6:	e05f      	b.n	8005fb8 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005ef8:	897b      	ldrh	r3, [r7, #10]
 8005efa:	11db      	asrs	r3, r3, #7
 8005efc:	b2db      	uxtb	r3, r3
 8005efe:	f003 0306 	and.w	r3, r3, #6
 8005f02:	b2db      	uxtb	r3, r3
 8005f04:	f063 030f 	orn	r3, r3, #15
 8005f08:	b2da      	uxtb	r2, r3
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005f10:	683b      	ldr	r3, [r7, #0]
 8005f12:	687a      	ldr	r2, [r7, #4]
 8005f14:	4930      	ldr	r1, [pc, #192]	; (8005fd8 <I2C_MasterRequestRead+0x194>)
 8005f16:	68f8      	ldr	r0, [r7, #12]
 8005f18:	f000 f8b9 	bl	800608e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005f1c:	4603      	mov	r3, r0
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d001      	beq.n	8005f26 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8005f22:	2301      	movs	r3, #1
 8005f24:	e054      	b.n	8005fd0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005f26:	897b      	ldrh	r3, [r7, #10]
 8005f28:	b2da      	uxtb	r2, r3
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005f30:	683b      	ldr	r3, [r7, #0]
 8005f32:	687a      	ldr	r2, [r7, #4]
 8005f34:	4929      	ldr	r1, [pc, #164]	; (8005fdc <I2C_MasterRequestRead+0x198>)
 8005f36:	68f8      	ldr	r0, [r7, #12]
 8005f38:	f000 f8a9 	bl	800608e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005f3c:	4603      	mov	r3, r0
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d001      	beq.n	8005f46 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8005f42:	2301      	movs	r3, #1
 8005f44:	e044      	b.n	8005fd0 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005f46:	2300      	movs	r3, #0
 8005f48:	613b      	str	r3, [r7, #16]
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	695b      	ldr	r3, [r3, #20]
 8005f50:	613b      	str	r3, [r7, #16]
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	699b      	ldr	r3, [r3, #24]
 8005f58:	613b      	str	r3, [r7, #16]
 8005f5a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	681a      	ldr	r2, [r3, #0]
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005f6a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005f6c:	683b      	ldr	r3, [r7, #0]
 8005f6e:	9300      	str	r3, [sp, #0]
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	2200      	movs	r2, #0
 8005f74:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005f78:	68f8      	ldr	r0, [r7, #12]
 8005f7a:	f000 f831 	bl	8005fe0 <I2C_WaitOnFlagUntilTimeout>
 8005f7e:	4603      	mov	r3, r0
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d00d      	beq.n	8005fa0 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f8e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005f92:	d103      	bne.n	8005f9c <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005f9a:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8005f9c:	2303      	movs	r3, #3
 8005f9e:	e017      	b.n	8005fd0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8005fa0:	897b      	ldrh	r3, [r7, #10]
 8005fa2:	11db      	asrs	r3, r3, #7
 8005fa4:	b2db      	uxtb	r3, r3
 8005fa6:	f003 0306 	and.w	r3, r3, #6
 8005faa:	b2db      	uxtb	r3, r3
 8005fac:	f063 030e 	orn	r3, r3, #14
 8005fb0:	b2da      	uxtb	r2, r3
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005fb8:	683b      	ldr	r3, [r7, #0]
 8005fba:	687a      	ldr	r2, [r7, #4]
 8005fbc:	4907      	ldr	r1, [pc, #28]	; (8005fdc <I2C_MasterRequestRead+0x198>)
 8005fbe:	68f8      	ldr	r0, [r7, #12]
 8005fc0:	f000 f865 	bl	800608e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005fc4:	4603      	mov	r3, r0
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d001      	beq.n	8005fce <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8005fca:	2301      	movs	r3, #1
 8005fcc:	e000      	b.n	8005fd0 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8005fce:	2300      	movs	r3, #0
}
 8005fd0:	4618      	mov	r0, r3
 8005fd2:	3718      	adds	r7, #24
 8005fd4:	46bd      	mov	sp, r7
 8005fd6:	bd80      	pop	{r7, pc}
 8005fd8:	00010008 	.word	0x00010008
 8005fdc:	00010002 	.word	0x00010002

08005fe0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005fe0:	b580      	push	{r7, lr}
 8005fe2:	b084      	sub	sp, #16
 8005fe4:	af00      	add	r7, sp, #0
 8005fe6:	60f8      	str	r0, [r7, #12]
 8005fe8:	60b9      	str	r1, [r7, #8]
 8005fea:	603b      	str	r3, [r7, #0]
 8005fec:	4613      	mov	r3, r2
 8005fee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005ff0:	e025      	b.n	800603e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005ff2:	683b      	ldr	r3, [r7, #0]
 8005ff4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ff8:	d021      	beq.n	800603e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ffa:	f7fe fe8b 	bl	8004d14 <HAL_GetTick>
 8005ffe:	4602      	mov	r2, r0
 8006000:	69bb      	ldr	r3, [r7, #24]
 8006002:	1ad3      	subs	r3, r2, r3
 8006004:	683a      	ldr	r2, [r7, #0]
 8006006:	429a      	cmp	r2, r3
 8006008:	d302      	bcc.n	8006010 <I2C_WaitOnFlagUntilTimeout+0x30>
 800600a:	683b      	ldr	r3, [r7, #0]
 800600c:	2b00      	cmp	r3, #0
 800600e:	d116      	bne.n	800603e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	2200      	movs	r2, #0
 8006014:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	2220      	movs	r2, #32
 800601a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	2200      	movs	r2, #0
 8006022:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800602a:	f043 0220 	orr.w	r2, r3, #32
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	2200      	movs	r2, #0
 8006036:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800603a:	2301      	movs	r3, #1
 800603c:	e023      	b.n	8006086 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800603e:	68bb      	ldr	r3, [r7, #8]
 8006040:	0c1b      	lsrs	r3, r3, #16
 8006042:	b2db      	uxtb	r3, r3
 8006044:	2b01      	cmp	r3, #1
 8006046:	d10d      	bne.n	8006064 <I2C_WaitOnFlagUntilTimeout+0x84>
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	695b      	ldr	r3, [r3, #20]
 800604e:	43da      	mvns	r2, r3
 8006050:	68bb      	ldr	r3, [r7, #8]
 8006052:	4013      	ands	r3, r2
 8006054:	b29b      	uxth	r3, r3
 8006056:	2b00      	cmp	r3, #0
 8006058:	bf0c      	ite	eq
 800605a:	2301      	moveq	r3, #1
 800605c:	2300      	movne	r3, #0
 800605e:	b2db      	uxtb	r3, r3
 8006060:	461a      	mov	r2, r3
 8006062:	e00c      	b.n	800607e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	699b      	ldr	r3, [r3, #24]
 800606a:	43da      	mvns	r2, r3
 800606c:	68bb      	ldr	r3, [r7, #8]
 800606e:	4013      	ands	r3, r2
 8006070:	b29b      	uxth	r3, r3
 8006072:	2b00      	cmp	r3, #0
 8006074:	bf0c      	ite	eq
 8006076:	2301      	moveq	r3, #1
 8006078:	2300      	movne	r3, #0
 800607a:	b2db      	uxtb	r3, r3
 800607c:	461a      	mov	r2, r3
 800607e:	79fb      	ldrb	r3, [r7, #7]
 8006080:	429a      	cmp	r2, r3
 8006082:	d0b6      	beq.n	8005ff2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006084:	2300      	movs	r3, #0
}
 8006086:	4618      	mov	r0, r3
 8006088:	3710      	adds	r7, #16
 800608a:	46bd      	mov	sp, r7
 800608c:	bd80      	pop	{r7, pc}

0800608e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800608e:	b580      	push	{r7, lr}
 8006090:	b084      	sub	sp, #16
 8006092:	af00      	add	r7, sp, #0
 8006094:	60f8      	str	r0, [r7, #12]
 8006096:	60b9      	str	r1, [r7, #8]
 8006098:	607a      	str	r2, [r7, #4]
 800609a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800609c:	e051      	b.n	8006142 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	695b      	ldr	r3, [r3, #20]
 80060a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80060a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80060ac:	d123      	bne.n	80060f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	681a      	ldr	r2, [r3, #0]
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80060bc:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80060c6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	2200      	movs	r2, #0
 80060cc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	2220      	movs	r2, #32
 80060d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	2200      	movs	r2, #0
 80060da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060e2:	f043 0204 	orr.w	r2, r3, #4
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	2200      	movs	r2, #0
 80060ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80060f2:	2301      	movs	r3, #1
 80060f4:	e046      	b.n	8006184 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060fc:	d021      	beq.n	8006142 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80060fe:	f7fe fe09 	bl	8004d14 <HAL_GetTick>
 8006102:	4602      	mov	r2, r0
 8006104:	683b      	ldr	r3, [r7, #0]
 8006106:	1ad3      	subs	r3, r2, r3
 8006108:	687a      	ldr	r2, [r7, #4]
 800610a:	429a      	cmp	r2, r3
 800610c:	d302      	bcc.n	8006114 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	2b00      	cmp	r3, #0
 8006112:	d116      	bne.n	8006142 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	2200      	movs	r2, #0
 8006118:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	2220      	movs	r2, #32
 800611e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	2200      	movs	r2, #0
 8006126:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800612e:	f043 0220 	orr.w	r2, r3, #32
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	2200      	movs	r2, #0
 800613a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800613e:	2301      	movs	r3, #1
 8006140:	e020      	b.n	8006184 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006142:	68bb      	ldr	r3, [r7, #8]
 8006144:	0c1b      	lsrs	r3, r3, #16
 8006146:	b2db      	uxtb	r3, r3
 8006148:	2b01      	cmp	r3, #1
 800614a:	d10c      	bne.n	8006166 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	695b      	ldr	r3, [r3, #20]
 8006152:	43da      	mvns	r2, r3
 8006154:	68bb      	ldr	r3, [r7, #8]
 8006156:	4013      	ands	r3, r2
 8006158:	b29b      	uxth	r3, r3
 800615a:	2b00      	cmp	r3, #0
 800615c:	bf14      	ite	ne
 800615e:	2301      	movne	r3, #1
 8006160:	2300      	moveq	r3, #0
 8006162:	b2db      	uxtb	r3, r3
 8006164:	e00b      	b.n	800617e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	699b      	ldr	r3, [r3, #24]
 800616c:	43da      	mvns	r2, r3
 800616e:	68bb      	ldr	r3, [r7, #8]
 8006170:	4013      	ands	r3, r2
 8006172:	b29b      	uxth	r3, r3
 8006174:	2b00      	cmp	r3, #0
 8006176:	bf14      	ite	ne
 8006178:	2301      	movne	r3, #1
 800617a:	2300      	moveq	r3, #0
 800617c:	b2db      	uxtb	r3, r3
 800617e:	2b00      	cmp	r3, #0
 8006180:	d18d      	bne.n	800609e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8006182:	2300      	movs	r3, #0
}
 8006184:	4618      	mov	r0, r3
 8006186:	3710      	adds	r7, #16
 8006188:	46bd      	mov	sp, r7
 800618a:	bd80      	pop	{r7, pc}

0800618c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800618c:	b580      	push	{r7, lr}
 800618e:	b084      	sub	sp, #16
 8006190:	af00      	add	r7, sp, #0
 8006192:	60f8      	str	r0, [r7, #12]
 8006194:	60b9      	str	r1, [r7, #8]
 8006196:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006198:	e02d      	b.n	80061f6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800619a:	68f8      	ldr	r0, [r7, #12]
 800619c:	f000 f8ce 	bl	800633c <I2C_IsAcknowledgeFailed>
 80061a0:	4603      	mov	r3, r0
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d001      	beq.n	80061aa <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80061a6:	2301      	movs	r3, #1
 80061a8:	e02d      	b.n	8006206 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80061aa:	68bb      	ldr	r3, [r7, #8]
 80061ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061b0:	d021      	beq.n	80061f6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80061b2:	f7fe fdaf 	bl	8004d14 <HAL_GetTick>
 80061b6:	4602      	mov	r2, r0
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	1ad3      	subs	r3, r2, r3
 80061bc:	68ba      	ldr	r2, [r7, #8]
 80061be:	429a      	cmp	r2, r3
 80061c0:	d302      	bcc.n	80061c8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80061c2:	68bb      	ldr	r3, [r7, #8]
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d116      	bne.n	80061f6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	2200      	movs	r2, #0
 80061cc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	2220      	movs	r2, #32
 80061d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	2200      	movs	r2, #0
 80061da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061e2:	f043 0220 	orr.w	r2, r3, #32
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	2200      	movs	r2, #0
 80061ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80061f2:	2301      	movs	r3, #1
 80061f4:	e007      	b.n	8006206 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	695b      	ldr	r3, [r3, #20]
 80061fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006200:	2b80      	cmp	r3, #128	; 0x80
 8006202:	d1ca      	bne.n	800619a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006204:	2300      	movs	r3, #0
}
 8006206:	4618      	mov	r0, r3
 8006208:	3710      	adds	r7, #16
 800620a:	46bd      	mov	sp, r7
 800620c:	bd80      	pop	{r7, pc}

0800620e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800620e:	b580      	push	{r7, lr}
 8006210:	b084      	sub	sp, #16
 8006212:	af00      	add	r7, sp, #0
 8006214:	60f8      	str	r0, [r7, #12]
 8006216:	60b9      	str	r1, [r7, #8]
 8006218:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800621a:	e02d      	b.n	8006278 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800621c:	68f8      	ldr	r0, [r7, #12]
 800621e:	f000 f88d 	bl	800633c <I2C_IsAcknowledgeFailed>
 8006222:	4603      	mov	r3, r0
 8006224:	2b00      	cmp	r3, #0
 8006226:	d001      	beq.n	800622c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006228:	2301      	movs	r3, #1
 800622a:	e02d      	b.n	8006288 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800622c:	68bb      	ldr	r3, [r7, #8]
 800622e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006232:	d021      	beq.n	8006278 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006234:	f7fe fd6e 	bl	8004d14 <HAL_GetTick>
 8006238:	4602      	mov	r2, r0
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	1ad3      	subs	r3, r2, r3
 800623e:	68ba      	ldr	r2, [r7, #8]
 8006240:	429a      	cmp	r2, r3
 8006242:	d302      	bcc.n	800624a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006244:	68bb      	ldr	r3, [r7, #8]
 8006246:	2b00      	cmp	r3, #0
 8006248:	d116      	bne.n	8006278 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	2200      	movs	r2, #0
 800624e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	2220      	movs	r2, #32
 8006254:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	2200      	movs	r2, #0
 800625c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006264:	f043 0220 	orr.w	r2, r3, #32
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	2200      	movs	r2, #0
 8006270:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006274:	2301      	movs	r3, #1
 8006276:	e007      	b.n	8006288 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	695b      	ldr	r3, [r3, #20]
 800627e:	f003 0304 	and.w	r3, r3, #4
 8006282:	2b04      	cmp	r3, #4
 8006284:	d1ca      	bne.n	800621c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006286:	2300      	movs	r3, #0
}
 8006288:	4618      	mov	r0, r3
 800628a:	3710      	adds	r7, #16
 800628c:	46bd      	mov	sp, r7
 800628e:	bd80      	pop	{r7, pc}

08006290 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006290:	b580      	push	{r7, lr}
 8006292:	b084      	sub	sp, #16
 8006294:	af00      	add	r7, sp, #0
 8006296:	60f8      	str	r0, [r7, #12]
 8006298:	60b9      	str	r1, [r7, #8]
 800629a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800629c:	e042      	b.n	8006324 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	695b      	ldr	r3, [r3, #20]
 80062a4:	f003 0310 	and.w	r3, r3, #16
 80062a8:	2b10      	cmp	r3, #16
 80062aa:	d119      	bne.n	80062e0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	f06f 0210 	mvn.w	r2, #16
 80062b4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	2200      	movs	r2, #0
 80062ba:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	2220      	movs	r2, #32
 80062c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	2200      	movs	r2, #0
 80062c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	2200      	movs	r2, #0
 80062d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80062dc:	2301      	movs	r3, #1
 80062de:	e029      	b.n	8006334 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80062e0:	f7fe fd18 	bl	8004d14 <HAL_GetTick>
 80062e4:	4602      	mov	r2, r0
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	1ad3      	subs	r3, r2, r3
 80062ea:	68ba      	ldr	r2, [r7, #8]
 80062ec:	429a      	cmp	r2, r3
 80062ee:	d302      	bcc.n	80062f6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80062f0:	68bb      	ldr	r3, [r7, #8]
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d116      	bne.n	8006324 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	2200      	movs	r2, #0
 80062fa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	2220      	movs	r2, #32
 8006300:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	2200      	movs	r2, #0
 8006308:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006310:	f043 0220 	orr.w	r2, r3, #32
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	2200      	movs	r2, #0
 800631c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006320:	2301      	movs	r3, #1
 8006322:	e007      	b.n	8006334 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	695b      	ldr	r3, [r3, #20]
 800632a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800632e:	2b40      	cmp	r3, #64	; 0x40
 8006330:	d1b5      	bne.n	800629e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006332:	2300      	movs	r3, #0
}
 8006334:	4618      	mov	r0, r3
 8006336:	3710      	adds	r7, #16
 8006338:	46bd      	mov	sp, r7
 800633a:	bd80      	pop	{r7, pc}

0800633c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800633c:	b480      	push	{r7}
 800633e:	b083      	sub	sp, #12
 8006340:	af00      	add	r7, sp, #0
 8006342:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	695b      	ldr	r3, [r3, #20]
 800634a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800634e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006352:	d11b      	bne.n	800638c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800635c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	2200      	movs	r2, #0
 8006362:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	2220      	movs	r2, #32
 8006368:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	2200      	movs	r2, #0
 8006370:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006378:	f043 0204 	orr.w	r2, r3, #4
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	2200      	movs	r2, #0
 8006384:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8006388:	2301      	movs	r3, #1
 800638a:	e000      	b.n	800638e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800638c:	2300      	movs	r3, #0
}
 800638e:	4618      	mov	r0, r3
 8006390:	370c      	adds	r7, #12
 8006392:	46bd      	mov	sp, r7
 8006394:	bc80      	pop	{r7}
 8006396:	4770      	bx	lr

08006398 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006398:	b580      	push	{r7, lr}
 800639a:	b086      	sub	sp, #24
 800639c:	af00      	add	r7, sp, #0
 800639e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d101      	bne.n	80063aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80063a6:	2301      	movs	r3, #1
 80063a8:	e272      	b.n	8006890 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	f003 0301 	and.w	r3, r3, #1
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	f000 8087 	beq.w	80064c6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80063b8:	4b92      	ldr	r3, [pc, #584]	; (8006604 <HAL_RCC_OscConfig+0x26c>)
 80063ba:	685b      	ldr	r3, [r3, #4]
 80063bc:	f003 030c 	and.w	r3, r3, #12
 80063c0:	2b04      	cmp	r3, #4
 80063c2:	d00c      	beq.n	80063de <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80063c4:	4b8f      	ldr	r3, [pc, #572]	; (8006604 <HAL_RCC_OscConfig+0x26c>)
 80063c6:	685b      	ldr	r3, [r3, #4]
 80063c8:	f003 030c 	and.w	r3, r3, #12
 80063cc:	2b08      	cmp	r3, #8
 80063ce:	d112      	bne.n	80063f6 <HAL_RCC_OscConfig+0x5e>
 80063d0:	4b8c      	ldr	r3, [pc, #560]	; (8006604 <HAL_RCC_OscConfig+0x26c>)
 80063d2:	685b      	ldr	r3, [r3, #4]
 80063d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80063d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80063dc:	d10b      	bne.n	80063f6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80063de:	4b89      	ldr	r3, [pc, #548]	; (8006604 <HAL_RCC_OscConfig+0x26c>)
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d06c      	beq.n	80064c4 <HAL_RCC_OscConfig+0x12c>
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	685b      	ldr	r3, [r3, #4]
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d168      	bne.n	80064c4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80063f2:	2301      	movs	r3, #1
 80063f4:	e24c      	b.n	8006890 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	685b      	ldr	r3, [r3, #4]
 80063fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80063fe:	d106      	bne.n	800640e <HAL_RCC_OscConfig+0x76>
 8006400:	4b80      	ldr	r3, [pc, #512]	; (8006604 <HAL_RCC_OscConfig+0x26c>)
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	4a7f      	ldr	r2, [pc, #508]	; (8006604 <HAL_RCC_OscConfig+0x26c>)
 8006406:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800640a:	6013      	str	r3, [r2, #0]
 800640c:	e02e      	b.n	800646c <HAL_RCC_OscConfig+0xd4>
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	685b      	ldr	r3, [r3, #4]
 8006412:	2b00      	cmp	r3, #0
 8006414:	d10c      	bne.n	8006430 <HAL_RCC_OscConfig+0x98>
 8006416:	4b7b      	ldr	r3, [pc, #492]	; (8006604 <HAL_RCC_OscConfig+0x26c>)
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	4a7a      	ldr	r2, [pc, #488]	; (8006604 <HAL_RCC_OscConfig+0x26c>)
 800641c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006420:	6013      	str	r3, [r2, #0]
 8006422:	4b78      	ldr	r3, [pc, #480]	; (8006604 <HAL_RCC_OscConfig+0x26c>)
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	4a77      	ldr	r2, [pc, #476]	; (8006604 <HAL_RCC_OscConfig+0x26c>)
 8006428:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800642c:	6013      	str	r3, [r2, #0]
 800642e:	e01d      	b.n	800646c <HAL_RCC_OscConfig+0xd4>
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	685b      	ldr	r3, [r3, #4]
 8006434:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006438:	d10c      	bne.n	8006454 <HAL_RCC_OscConfig+0xbc>
 800643a:	4b72      	ldr	r3, [pc, #456]	; (8006604 <HAL_RCC_OscConfig+0x26c>)
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	4a71      	ldr	r2, [pc, #452]	; (8006604 <HAL_RCC_OscConfig+0x26c>)
 8006440:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006444:	6013      	str	r3, [r2, #0]
 8006446:	4b6f      	ldr	r3, [pc, #444]	; (8006604 <HAL_RCC_OscConfig+0x26c>)
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	4a6e      	ldr	r2, [pc, #440]	; (8006604 <HAL_RCC_OscConfig+0x26c>)
 800644c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006450:	6013      	str	r3, [r2, #0]
 8006452:	e00b      	b.n	800646c <HAL_RCC_OscConfig+0xd4>
 8006454:	4b6b      	ldr	r3, [pc, #428]	; (8006604 <HAL_RCC_OscConfig+0x26c>)
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	4a6a      	ldr	r2, [pc, #424]	; (8006604 <HAL_RCC_OscConfig+0x26c>)
 800645a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800645e:	6013      	str	r3, [r2, #0]
 8006460:	4b68      	ldr	r3, [pc, #416]	; (8006604 <HAL_RCC_OscConfig+0x26c>)
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	4a67      	ldr	r2, [pc, #412]	; (8006604 <HAL_RCC_OscConfig+0x26c>)
 8006466:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800646a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	685b      	ldr	r3, [r3, #4]
 8006470:	2b00      	cmp	r3, #0
 8006472:	d013      	beq.n	800649c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006474:	f7fe fc4e 	bl	8004d14 <HAL_GetTick>
 8006478:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800647a:	e008      	b.n	800648e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800647c:	f7fe fc4a 	bl	8004d14 <HAL_GetTick>
 8006480:	4602      	mov	r2, r0
 8006482:	693b      	ldr	r3, [r7, #16]
 8006484:	1ad3      	subs	r3, r2, r3
 8006486:	2b64      	cmp	r3, #100	; 0x64
 8006488:	d901      	bls.n	800648e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800648a:	2303      	movs	r3, #3
 800648c:	e200      	b.n	8006890 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800648e:	4b5d      	ldr	r3, [pc, #372]	; (8006604 <HAL_RCC_OscConfig+0x26c>)
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006496:	2b00      	cmp	r3, #0
 8006498:	d0f0      	beq.n	800647c <HAL_RCC_OscConfig+0xe4>
 800649a:	e014      	b.n	80064c6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800649c:	f7fe fc3a 	bl	8004d14 <HAL_GetTick>
 80064a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80064a2:	e008      	b.n	80064b6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80064a4:	f7fe fc36 	bl	8004d14 <HAL_GetTick>
 80064a8:	4602      	mov	r2, r0
 80064aa:	693b      	ldr	r3, [r7, #16]
 80064ac:	1ad3      	subs	r3, r2, r3
 80064ae:	2b64      	cmp	r3, #100	; 0x64
 80064b0:	d901      	bls.n	80064b6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80064b2:	2303      	movs	r3, #3
 80064b4:	e1ec      	b.n	8006890 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80064b6:	4b53      	ldr	r3, [pc, #332]	; (8006604 <HAL_RCC_OscConfig+0x26c>)
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d1f0      	bne.n	80064a4 <HAL_RCC_OscConfig+0x10c>
 80064c2:	e000      	b.n	80064c6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80064c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	f003 0302 	and.w	r3, r3, #2
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d063      	beq.n	800659a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80064d2:	4b4c      	ldr	r3, [pc, #304]	; (8006604 <HAL_RCC_OscConfig+0x26c>)
 80064d4:	685b      	ldr	r3, [r3, #4]
 80064d6:	f003 030c 	and.w	r3, r3, #12
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d00b      	beq.n	80064f6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80064de:	4b49      	ldr	r3, [pc, #292]	; (8006604 <HAL_RCC_OscConfig+0x26c>)
 80064e0:	685b      	ldr	r3, [r3, #4]
 80064e2:	f003 030c 	and.w	r3, r3, #12
 80064e6:	2b08      	cmp	r3, #8
 80064e8:	d11c      	bne.n	8006524 <HAL_RCC_OscConfig+0x18c>
 80064ea:	4b46      	ldr	r3, [pc, #280]	; (8006604 <HAL_RCC_OscConfig+0x26c>)
 80064ec:	685b      	ldr	r3, [r3, #4]
 80064ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d116      	bne.n	8006524 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80064f6:	4b43      	ldr	r3, [pc, #268]	; (8006604 <HAL_RCC_OscConfig+0x26c>)
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	f003 0302 	and.w	r3, r3, #2
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d005      	beq.n	800650e <HAL_RCC_OscConfig+0x176>
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	691b      	ldr	r3, [r3, #16]
 8006506:	2b01      	cmp	r3, #1
 8006508:	d001      	beq.n	800650e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800650a:	2301      	movs	r3, #1
 800650c:	e1c0      	b.n	8006890 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800650e:	4b3d      	ldr	r3, [pc, #244]	; (8006604 <HAL_RCC_OscConfig+0x26c>)
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	695b      	ldr	r3, [r3, #20]
 800651a:	00db      	lsls	r3, r3, #3
 800651c:	4939      	ldr	r1, [pc, #228]	; (8006604 <HAL_RCC_OscConfig+0x26c>)
 800651e:	4313      	orrs	r3, r2
 8006520:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006522:	e03a      	b.n	800659a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	691b      	ldr	r3, [r3, #16]
 8006528:	2b00      	cmp	r3, #0
 800652a:	d020      	beq.n	800656e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800652c:	4b36      	ldr	r3, [pc, #216]	; (8006608 <HAL_RCC_OscConfig+0x270>)
 800652e:	2201      	movs	r2, #1
 8006530:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006532:	f7fe fbef 	bl	8004d14 <HAL_GetTick>
 8006536:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006538:	e008      	b.n	800654c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800653a:	f7fe fbeb 	bl	8004d14 <HAL_GetTick>
 800653e:	4602      	mov	r2, r0
 8006540:	693b      	ldr	r3, [r7, #16]
 8006542:	1ad3      	subs	r3, r2, r3
 8006544:	2b02      	cmp	r3, #2
 8006546:	d901      	bls.n	800654c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8006548:	2303      	movs	r3, #3
 800654a:	e1a1      	b.n	8006890 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800654c:	4b2d      	ldr	r3, [pc, #180]	; (8006604 <HAL_RCC_OscConfig+0x26c>)
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	f003 0302 	and.w	r3, r3, #2
 8006554:	2b00      	cmp	r3, #0
 8006556:	d0f0      	beq.n	800653a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006558:	4b2a      	ldr	r3, [pc, #168]	; (8006604 <HAL_RCC_OscConfig+0x26c>)
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	695b      	ldr	r3, [r3, #20]
 8006564:	00db      	lsls	r3, r3, #3
 8006566:	4927      	ldr	r1, [pc, #156]	; (8006604 <HAL_RCC_OscConfig+0x26c>)
 8006568:	4313      	orrs	r3, r2
 800656a:	600b      	str	r3, [r1, #0]
 800656c:	e015      	b.n	800659a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800656e:	4b26      	ldr	r3, [pc, #152]	; (8006608 <HAL_RCC_OscConfig+0x270>)
 8006570:	2200      	movs	r2, #0
 8006572:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006574:	f7fe fbce 	bl	8004d14 <HAL_GetTick>
 8006578:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800657a:	e008      	b.n	800658e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800657c:	f7fe fbca 	bl	8004d14 <HAL_GetTick>
 8006580:	4602      	mov	r2, r0
 8006582:	693b      	ldr	r3, [r7, #16]
 8006584:	1ad3      	subs	r3, r2, r3
 8006586:	2b02      	cmp	r3, #2
 8006588:	d901      	bls.n	800658e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800658a:	2303      	movs	r3, #3
 800658c:	e180      	b.n	8006890 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800658e:	4b1d      	ldr	r3, [pc, #116]	; (8006604 <HAL_RCC_OscConfig+0x26c>)
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	f003 0302 	and.w	r3, r3, #2
 8006596:	2b00      	cmp	r3, #0
 8006598:	d1f0      	bne.n	800657c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	f003 0308 	and.w	r3, r3, #8
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d03a      	beq.n	800661c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	699b      	ldr	r3, [r3, #24]
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d019      	beq.n	80065e2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80065ae:	4b17      	ldr	r3, [pc, #92]	; (800660c <HAL_RCC_OscConfig+0x274>)
 80065b0:	2201      	movs	r2, #1
 80065b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80065b4:	f7fe fbae 	bl	8004d14 <HAL_GetTick>
 80065b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80065ba:	e008      	b.n	80065ce <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80065bc:	f7fe fbaa 	bl	8004d14 <HAL_GetTick>
 80065c0:	4602      	mov	r2, r0
 80065c2:	693b      	ldr	r3, [r7, #16]
 80065c4:	1ad3      	subs	r3, r2, r3
 80065c6:	2b02      	cmp	r3, #2
 80065c8:	d901      	bls.n	80065ce <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80065ca:	2303      	movs	r3, #3
 80065cc:	e160      	b.n	8006890 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80065ce:	4b0d      	ldr	r3, [pc, #52]	; (8006604 <HAL_RCC_OscConfig+0x26c>)
 80065d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065d2:	f003 0302 	and.w	r3, r3, #2
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d0f0      	beq.n	80065bc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80065da:	2001      	movs	r0, #1
 80065dc:	f000 fb08 	bl	8006bf0 <RCC_Delay>
 80065e0:	e01c      	b.n	800661c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80065e2:	4b0a      	ldr	r3, [pc, #40]	; (800660c <HAL_RCC_OscConfig+0x274>)
 80065e4:	2200      	movs	r2, #0
 80065e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80065e8:	f7fe fb94 	bl	8004d14 <HAL_GetTick>
 80065ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80065ee:	e00f      	b.n	8006610 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80065f0:	f7fe fb90 	bl	8004d14 <HAL_GetTick>
 80065f4:	4602      	mov	r2, r0
 80065f6:	693b      	ldr	r3, [r7, #16]
 80065f8:	1ad3      	subs	r3, r2, r3
 80065fa:	2b02      	cmp	r3, #2
 80065fc:	d908      	bls.n	8006610 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80065fe:	2303      	movs	r3, #3
 8006600:	e146      	b.n	8006890 <HAL_RCC_OscConfig+0x4f8>
 8006602:	bf00      	nop
 8006604:	40021000 	.word	0x40021000
 8006608:	42420000 	.word	0x42420000
 800660c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006610:	4b92      	ldr	r3, [pc, #584]	; (800685c <HAL_RCC_OscConfig+0x4c4>)
 8006612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006614:	f003 0302 	and.w	r3, r3, #2
 8006618:	2b00      	cmp	r3, #0
 800661a:	d1e9      	bne.n	80065f0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	f003 0304 	and.w	r3, r3, #4
 8006624:	2b00      	cmp	r3, #0
 8006626:	f000 80a6 	beq.w	8006776 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800662a:	2300      	movs	r3, #0
 800662c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800662e:	4b8b      	ldr	r3, [pc, #556]	; (800685c <HAL_RCC_OscConfig+0x4c4>)
 8006630:	69db      	ldr	r3, [r3, #28]
 8006632:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006636:	2b00      	cmp	r3, #0
 8006638:	d10d      	bne.n	8006656 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800663a:	4b88      	ldr	r3, [pc, #544]	; (800685c <HAL_RCC_OscConfig+0x4c4>)
 800663c:	69db      	ldr	r3, [r3, #28]
 800663e:	4a87      	ldr	r2, [pc, #540]	; (800685c <HAL_RCC_OscConfig+0x4c4>)
 8006640:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006644:	61d3      	str	r3, [r2, #28]
 8006646:	4b85      	ldr	r3, [pc, #532]	; (800685c <HAL_RCC_OscConfig+0x4c4>)
 8006648:	69db      	ldr	r3, [r3, #28]
 800664a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800664e:	60bb      	str	r3, [r7, #8]
 8006650:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006652:	2301      	movs	r3, #1
 8006654:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006656:	4b82      	ldr	r3, [pc, #520]	; (8006860 <HAL_RCC_OscConfig+0x4c8>)
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800665e:	2b00      	cmp	r3, #0
 8006660:	d118      	bne.n	8006694 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006662:	4b7f      	ldr	r3, [pc, #508]	; (8006860 <HAL_RCC_OscConfig+0x4c8>)
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	4a7e      	ldr	r2, [pc, #504]	; (8006860 <HAL_RCC_OscConfig+0x4c8>)
 8006668:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800666c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800666e:	f7fe fb51 	bl	8004d14 <HAL_GetTick>
 8006672:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006674:	e008      	b.n	8006688 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006676:	f7fe fb4d 	bl	8004d14 <HAL_GetTick>
 800667a:	4602      	mov	r2, r0
 800667c:	693b      	ldr	r3, [r7, #16]
 800667e:	1ad3      	subs	r3, r2, r3
 8006680:	2b64      	cmp	r3, #100	; 0x64
 8006682:	d901      	bls.n	8006688 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8006684:	2303      	movs	r3, #3
 8006686:	e103      	b.n	8006890 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006688:	4b75      	ldr	r3, [pc, #468]	; (8006860 <HAL_RCC_OscConfig+0x4c8>)
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006690:	2b00      	cmp	r3, #0
 8006692:	d0f0      	beq.n	8006676 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	68db      	ldr	r3, [r3, #12]
 8006698:	2b01      	cmp	r3, #1
 800669a:	d106      	bne.n	80066aa <HAL_RCC_OscConfig+0x312>
 800669c:	4b6f      	ldr	r3, [pc, #444]	; (800685c <HAL_RCC_OscConfig+0x4c4>)
 800669e:	6a1b      	ldr	r3, [r3, #32]
 80066a0:	4a6e      	ldr	r2, [pc, #440]	; (800685c <HAL_RCC_OscConfig+0x4c4>)
 80066a2:	f043 0301 	orr.w	r3, r3, #1
 80066a6:	6213      	str	r3, [r2, #32]
 80066a8:	e02d      	b.n	8006706 <HAL_RCC_OscConfig+0x36e>
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	68db      	ldr	r3, [r3, #12]
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d10c      	bne.n	80066cc <HAL_RCC_OscConfig+0x334>
 80066b2:	4b6a      	ldr	r3, [pc, #424]	; (800685c <HAL_RCC_OscConfig+0x4c4>)
 80066b4:	6a1b      	ldr	r3, [r3, #32]
 80066b6:	4a69      	ldr	r2, [pc, #420]	; (800685c <HAL_RCC_OscConfig+0x4c4>)
 80066b8:	f023 0301 	bic.w	r3, r3, #1
 80066bc:	6213      	str	r3, [r2, #32]
 80066be:	4b67      	ldr	r3, [pc, #412]	; (800685c <HAL_RCC_OscConfig+0x4c4>)
 80066c0:	6a1b      	ldr	r3, [r3, #32]
 80066c2:	4a66      	ldr	r2, [pc, #408]	; (800685c <HAL_RCC_OscConfig+0x4c4>)
 80066c4:	f023 0304 	bic.w	r3, r3, #4
 80066c8:	6213      	str	r3, [r2, #32]
 80066ca:	e01c      	b.n	8006706 <HAL_RCC_OscConfig+0x36e>
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	68db      	ldr	r3, [r3, #12]
 80066d0:	2b05      	cmp	r3, #5
 80066d2:	d10c      	bne.n	80066ee <HAL_RCC_OscConfig+0x356>
 80066d4:	4b61      	ldr	r3, [pc, #388]	; (800685c <HAL_RCC_OscConfig+0x4c4>)
 80066d6:	6a1b      	ldr	r3, [r3, #32]
 80066d8:	4a60      	ldr	r2, [pc, #384]	; (800685c <HAL_RCC_OscConfig+0x4c4>)
 80066da:	f043 0304 	orr.w	r3, r3, #4
 80066de:	6213      	str	r3, [r2, #32]
 80066e0:	4b5e      	ldr	r3, [pc, #376]	; (800685c <HAL_RCC_OscConfig+0x4c4>)
 80066e2:	6a1b      	ldr	r3, [r3, #32]
 80066e4:	4a5d      	ldr	r2, [pc, #372]	; (800685c <HAL_RCC_OscConfig+0x4c4>)
 80066e6:	f043 0301 	orr.w	r3, r3, #1
 80066ea:	6213      	str	r3, [r2, #32]
 80066ec:	e00b      	b.n	8006706 <HAL_RCC_OscConfig+0x36e>
 80066ee:	4b5b      	ldr	r3, [pc, #364]	; (800685c <HAL_RCC_OscConfig+0x4c4>)
 80066f0:	6a1b      	ldr	r3, [r3, #32]
 80066f2:	4a5a      	ldr	r2, [pc, #360]	; (800685c <HAL_RCC_OscConfig+0x4c4>)
 80066f4:	f023 0301 	bic.w	r3, r3, #1
 80066f8:	6213      	str	r3, [r2, #32]
 80066fa:	4b58      	ldr	r3, [pc, #352]	; (800685c <HAL_RCC_OscConfig+0x4c4>)
 80066fc:	6a1b      	ldr	r3, [r3, #32]
 80066fe:	4a57      	ldr	r2, [pc, #348]	; (800685c <HAL_RCC_OscConfig+0x4c4>)
 8006700:	f023 0304 	bic.w	r3, r3, #4
 8006704:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	68db      	ldr	r3, [r3, #12]
 800670a:	2b00      	cmp	r3, #0
 800670c:	d015      	beq.n	800673a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800670e:	f7fe fb01 	bl	8004d14 <HAL_GetTick>
 8006712:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006714:	e00a      	b.n	800672c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006716:	f7fe fafd 	bl	8004d14 <HAL_GetTick>
 800671a:	4602      	mov	r2, r0
 800671c:	693b      	ldr	r3, [r7, #16]
 800671e:	1ad3      	subs	r3, r2, r3
 8006720:	f241 3288 	movw	r2, #5000	; 0x1388
 8006724:	4293      	cmp	r3, r2
 8006726:	d901      	bls.n	800672c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8006728:	2303      	movs	r3, #3
 800672a:	e0b1      	b.n	8006890 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800672c:	4b4b      	ldr	r3, [pc, #300]	; (800685c <HAL_RCC_OscConfig+0x4c4>)
 800672e:	6a1b      	ldr	r3, [r3, #32]
 8006730:	f003 0302 	and.w	r3, r3, #2
 8006734:	2b00      	cmp	r3, #0
 8006736:	d0ee      	beq.n	8006716 <HAL_RCC_OscConfig+0x37e>
 8006738:	e014      	b.n	8006764 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800673a:	f7fe faeb 	bl	8004d14 <HAL_GetTick>
 800673e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006740:	e00a      	b.n	8006758 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006742:	f7fe fae7 	bl	8004d14 <HAL_GetTick>
 8006746:	4602      	mov	r2, r0
 8006748:	693b      	ldr	r3, [r7, #16]
 800674a:	1ad3      	subs	r3, r2, r3
 800674c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006750:	4293      	cmp	r3, r2
 8006752:	d901      	bls.n	8006758 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8006754:	2303      	movs	r3, #3
 8006756:	e09b      	b.n	8006890 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006758:	4b40      	ldr	r3, [pc, #256]	; (800685c <HAL_RCC_OscConfig+0x4c4>)
 800675a:	6a1b      	ldr	r3, [r3, #32]
 800675c:	f003 0302 	and.w	r3, r3, #2
 8006760:	2b00      	cmp	r3, #0
 8006762:	d1ee      	bne.n	8006742 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8006764:	7dfb      	ldrb	r3, [r7, #23]
 8006766:	2b01      	cmp	r3, #1
 8006768:	d105      	bne.n	8006776 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800676a:	4b3c      	ldr	r3, [pc, #240]	; (800685c <HAL_RCC_OscConfig+0x4c4>)
 800676c:	69db      	ldr	r3, [r3, #28]
 800676e:	4a3b      	ldr	r2, [pc, #236]	; (800685c <HAL_RCC_OscConfig+0x4c4>)
 8006770:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006774:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	69db      	ldr	r3, [r3, #28]
 800677a:	2b00      	cmp	r3, #0
 800677c:	f000 8087 	beq.w	800688e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006780:	4b36      	ldr	r3, [pc, #216]	; (800685c <HAL_RCC_OscConfig+0x4c4>)
 8006782:	685b      	ldr	r3, [r3, #4]
 8006784:	f003 030c 	and.w	r3, r3, #12
 8006788:	2b08      	cmp	r3, #8
 800678a:	d061      	beq.n	8006850 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	69db      	ldr	r3, [r3, #28]
 8006790:	2b02      	cmp	r3, #2
 8006792:	d146      	bne.n	8006822 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006794:	4b33      	ldr	r3, [pc, #204]	; (8006864 <HAL_RCC_OscConfig+0x4cc>)
 8006796:	2200      	movs	r2, #0
 8006798:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800679a:	f7fe fabb 	bl	8004d14 <HAL_GetTick>
 800679e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80067a0:	e008      	b.n	80067b4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80067a2:	f7fe fab7 	bl	8004d14 <HAL_GetTick>
 80067a6:	4602      	mov	r2, r0
 80067a8:	693b      	ldr	r3, [r7, #16]
 80067aa:	1ad3      	subs	r3, r2, r3
 80067ac:	2b02      	cmp	r3, #2
 80067ae:	d901      	bls.n	80067b4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80067b0:	2303      	movs	r3, #3
 80067b2:	e06d      	b.n	8006890 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80067b4:	4b29      	ldr	r3, [pc, #164]	; (800685c <HAL_RCC_OscConfig+0x4c4>)
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d1f0      	bne.n	80067a2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	6a1b      	ldr	r3, [r3, #32]
 80067c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80067c8:	d108      	bne.n	80067dc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80067ca:	4b24      	ldr	r3, [pc, #144]	; (800685c <HAL_RCC_OscConfig+0x4c4>)
 80067cc:	685b      	ldr	r3, [r3, #4]
 80067ce:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	689b      	ldr	r3, [r3, #8]
 80067d6:	4921      	ldr	r1, [pc, #132]	; (800685c <HAL_RCC_OscConfig+0x4c4>)
 80067d8:	4313      	orrs	r3, r2
 80067da:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80067dc:	4b1f      	ldr	r3, [pc, #124]	; (800685c <HAL_RCC_OscConfig+0x4c4>)
 80067de:	685b      	ldr	r3, [r3, #4]
 80067e0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	6a19      	ldr	r1, [r3, #32]
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067ec:	430b      	orrs	r3, r1
 80067ee:	491b      	ldr	r1, [pc, #108]	; (800685c <HAL_RCC_OscConfig+0x4c4>)
 80067f0:	4313      	orrs	r3, r2
 80067f2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80067f4:	4b1b      	ldr	r3, [pc, #108]	; (8006864 <HAL_RCC_OscConfig+0x4cc>)
 80067f6:	2201      	movs	r2, #1
 80067f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80067fa:	f7fe fa8b 	bl	8004d14 <HAL_GetTick>
 80067fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006800:	e008      	b.n	8006814 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006802:	f7fe fa87 	bl	8004d14 <HAL_GetTick>
 8006806:	4602      	mov	r2, r0
 8006808:	693b      	ldr	r3, [r7, #16]
 800680a:	1ad3      	subs	r3, r2, r3
 800680c:	2b02      	cmp	r3, #2
 800680e:	d901      	bls.n	8006814 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8006810:	2303      	movs	r3, #3
 8006812:	e03d      	b.n	8006890 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006814:	4b11      	ldr	r3, [pc, #68]	; (800685c <HAL_RCC_OscConfig+0x4c4>)
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800681c:	2b00      	cmp	r3, #0
 800681e:	d0f0      	beq.n	8006802 <HAL_RCC_OscConfig+0x46a>
 8006820:	e035      	b.n	800688e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006822:	4b10      	ldr	r3, [pc, #64]	; (8006864 <HAL_RCC_OscConfig+0x4cc>)
 8006824:	2200      	movs	r2, #0
 8006826:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006828:	f7fe fa74 	bl	8004d14 <HAL_GetTick>
 800682c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800682e:	e008      	b.n	8006842 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006830:	f7fe fa70 	bl	8004d14 <HAL_GetTick>
 8006834:	4602      	mov	r2, r0
 8006836:	693b      	ldr	r3, [r7, #16]
 8006838:	1ad3      	subs	r3, r2, r3
 800683a:	2b02      	cmp	r3, #2
 800683c:	d901      	bls.n	8006842 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800683e:	2303      	movs	r3, #3
 8006840:	e026      	b.n	8006890 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006842:	4b06      	ldr	r3, [pc, #24]	; (800685c <HAL_RCC_OscConfig+0x4c4>)
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800684a:	2b00      	cmp	r3, #0
 800684c:	d1f0      	bne.n	8006830 <HAL_RCC_OscConfig+0x498>
 800684e:	e01e      	b.n	800688e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	69db      	ldr	r3, [r3, #28]
 8006854:	2b01      	cmp	r3, #1
 8006856:	d107      	bne.n	8006868 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8006858:	2301      	movs	r3, #1
 800685a:	e019      	b.n	8006890 <HAL_RCC_OscConfig+0x4f8>
 800685c:	40021000 	.word	0x40021000
 8006860:	40007000 	.word	0x40007000
 8006864:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8006868:	4b0b      	ldr	r3, [pc, #44]	; (8006898 <HAL_RCC_OscConfig+0x500>)
 800686a:	685b      	ldr	r3, [r3, #4]
 800686c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	6a1b      	ldr	r3, [r3, #32]
 8006878:	429a      	cmp	r2, r3
 800687a:	d106      	bne.n	800688a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006886:	429a      	cmp	r2, r3
 8006888:	d001      	beq.n	800688e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800688a:	2301      	movs	r3, #1
 800688c:	e000      	b.n	8006890 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800688e:	2300      	movs	r3, #0
}
 8006890:	4618      	mov	r0, r3
 8006892:	3718      	adds	r7, #24
 8006894:	46bd      	mov	sp, r7
 8006896:	bd80      	pop	{r7, pc}
 8006898:	40021000 	.word	0x40021000

0800689c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800689c:	b580      	push	{r7, lr}
 800689e:	b084      	sub	sp, #16
 80068a0:	af00      	add	r7, sp, #0
 80068a2:	6078      	str	r0, [r7, #4]
 80068a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d101      	bne.n	80068b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80068ac:	2301      	movs	r3, #1
 80068ae:	e0d0      	b.n	8006a52 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80068b0:	4b6a      	ldr	r3, [pc, #424]	; (8006a5c <HAL_RCC_ClockConfig+0x1c0>)
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	f003 0307 	and.w	r3, r3, #7
 80068b8:	683a      	ldr	r2, [r7, #0]
 80068ba:	429a      	cmp	r2, r3
 80068bc:	d910      	bls.n	80068e0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80068be:	4b67      	ldr	r3, [pc, #412]	; (8006a5c <HAL_RCC_ClockConfig+0x1c0>)
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	f023 0207 	bic.w	r2, r3, #7
 80068c6:	4965      	ldr	r1, [pc, #404]	; (8006a5c <HAL_RCC_ClockConfig+0x1c0>)
 80068c8:	683b      	ldr	r3, [r7, #0]
 80068ca:	4313      	orrs	r3, r2
 80068cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80068ce:	4b63      	ldr	r3, [pc, #396]	; (8006a5c <HAL_RCC_ClockConfig+0x1c0>)
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	f003 0307 	and.w	r3, r3, #7
 80068d6:	683a      	ldr	r2, [r7, #0]
 80068d8:	429a      	cmp	r2, r3
 80068da:	d001      	beq.n	80068e0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80068dc:	2301      	movs	r3, #1
 80068de:	e0b8      	b.n	8006a52 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	f003 0302 	and.w	r3, r3, #2
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d020      	beq.n	800692e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	f003 0304 	and.w	r3, r3, #4
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d005      	beq.n	8006904 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80068f8:	4b59      	ldr	r3, [pc, #356]	; (8006a60 <HAL_RCC_ClockConfig+0x1c4>)
 80068fa:	685b      	ldr	r3, [r3, #4]
 80068fc:	4a58      	ldr	r2, [pc, #352]	; (8006a60 <HAL_RCC_ClockConfig+0x1c4>)
 80068fe:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8006902:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	f003 0308 	and.w	r3, r3, #8
 800690c:	2b00      	cmp	r3, #0
 800690e:	d005      	beq.n	800691c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006910:	4b53      	ldr	r3, [pc, #332]	; (8006a60 <HAL_RCC_ClockConfig+0x1c4>)
 8006912:	685b      	ldr	r3, [r3, #4]
 8006914:	4a52      	ldr	r2, [pc, #328]	; (8006a60 <HAL_RCC_ClockConfig+0x1c4>)
 8006916:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800691a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800691c:	4b50      	ldr	r3, [pc, #320]	; (8006a60 <HAL_RCC_ClockConfig+0x1c4>)
 800691e:	685b      	ldr	r3, [r3, #4]
 8006920:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	689b      	ldr	r3, [r3, #8]
 8006928:	494d      	ldr	r1, [pc, #308]	; (8006a60 <HAL_RCC_ClockConfig+0x1c4>)
 800692a:	4313      	orrs	r3, r2
 800692c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	f003 0301 	and.w	r3, r3, #1
 8006936:	2b00      	cmp	r3, #0
 8006938:	d040      	beq.n	80069bc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	685b      	ldr	r3, [r3, #4]
 800693e:	2b01      	cmp	r3, #1
 8006940:	d107      	bne.n	8006952 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006942:	4b47      	ldr	r3, [pc, #284]	; (8006a60 <HAL_RCC_ClockConfig+0x1c4>)
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800694a:	2b00      	cmp	r3, #0
 800694c:	d115      	bne.n	800697a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800694e:	2301      	movs	r3, #1
 8006950:	e07f      	b.n	8006a52 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	685b      	ldr	r3, [r3, #4]
 8006956:	2b02      	cmp	r3, #2
 8006958:	d107      	bne.n	800696a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800695a:	4b41      	ldr	r3, [pc, #260]	; (8006a60 <HAL_RCC_ClockConfig+0x1c4>)
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006962:	2b00      	cmp	r3, #0
 8006964:	d109      	bne.n	800697a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006966:	2301      	movs	r3, #1
 8006968:	e073      	b.n	8006a52 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800696a:	4b3d      	ldr	r3, [pc, #244]	; (8006a60 <HAL_RCC_ClockConfig+0x1c4>)
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	f003 0302 	and.w	r3, r3, #2
 8006972:	2b00      	cmp	r3, #0
 8006974:	d101      	bne.n	800697a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006976:	2301      	movs	r3, #1
 8006978:	e06b      	b.n	8006a52 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800697a:	4b39      	ldr	r3, [pc, #228]	; (8006a60 <HAL_RCC_ClockConfig+0x1c4>)
 800697c:	685b      	ldr	r3, [r3, #4]
 800697e:	f023 0203 	bic.w	r2, r3, #3
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	685b      	ldr	r3, [r3, #4]
 8006986:	4936      	ldr	r1, [pc, #216]	; (8006a60 <HAL_RCC_ClockConfig+0x1c4>)
 8006988:	4313      	orrs	r3, r2
 800698a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800698c:	f7fe f9c2 	bl	8004d14 <HAL_GetTick>
 8006990:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006992:	e00a      	b.n	80069aa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006994:	f7fe f9be 	bl	8004d14 <HAL_GetTick>
 8006998:	4602      	mov	r2, r0
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	1ad3      	subs	r3, r2, r3
 800699e:	f241 3288 	movw	r2, #5000	; 0x1388
 80069a2:	4293      	cmp	r3, r2
 80069a4:	d901      	bls.n	80069aa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80069a6:	2303      	movs	r3, #3
 80069a8:	e053      	b.n	8006a52 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80069aa:	4b2d      	ldr	r3, [pc, #180]	; (8006a60 <HAL_RCC_ClockConfig+0x1c4>)
 80069ac:	685b      	ldr	r3, [r3, #4]
 80069ae:	f003 020c 	and.w	r2, r3, #12
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	685b      	ldr	r3, [r3, #4]
 80069b6:	009b      	lsls	r3, r3, #2
 80069b8:	429a      	cmp	r2, r3
 80069ba:	d1eb      	bne.n	8006994 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80069bc:	4b27      	ldr	r3, [pc, #156]	; (8006a5c <HAL_RCC_ClockConfig+0x1c0>)
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	f003 0307 	and.w	r3, r3, #7
 80069c4:	683a      	ldr	r2, [r7, #0]
 80069c6:	429a      	cmp	r2, r3
 80069c8:	d210      	bcs.n	80069ec <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80069ca:	4b24      	ldr	r3, [pc, #144]	; (8006a5c <HAL_RCC_ClockConfig+0x1c0>)
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	f023 0207 	bic.w	r2, r3, #7
 80069d2:	4922      	ldr	r1, [pc, #136]	; (8006a5c <HAL_RCC_ClockConfig+0x1c0>)
 80069d4:	683b      	ldr	r3, [r7, #0]
 80069d6:	4313      	orrs	r3, r2
 80069d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80069da:	4b20      	ldr	r3, [pc, #128]	; (8006a5c <HAL_RCC_ClockConfig+0x1c0>)
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	f003 0307 	and.w	r3, r3, #7
 80069e2:	683a      	ldr	r2, [r7, #0]
 80069e4:	429a      	cmp	r2, r3
 80069e6:	d001      	beq.n	80069ec <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80069e8:	2301      	movs	r3, #1
 80069ea:	e032      	b.n	8006a52 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	f003 0304 	and.w	r3, r3, #4
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d008      	beq.n	8006a0a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80069f8:	4b19      	ldr	r3, [pc, #100]	; (8006a60 <HAL_RCC_ClockConfig+0x1c4>)
 80069fa:	685b      	ldr	r3, [r3, #4]
 80069fc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	68db      	ldr	r3, [r3, #12]
 8006a04:	4916      	ldr	r1, [pc, #88]	; (8006a60 <HAL_RCC_ClockConfig+0x1c4>)
 8006a06:	4313      	orrs	r3, r2
 8006a08:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	f003 0308 	and.w	r3, r3, #8
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d009      	beq.n	8006a2a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006a16:	4b12      	ldr	r3, [pc, #72]	; (8006a60 <HAL_RCC_ClockConfig+0x1c4>)
 8006a18:	685b      	ldr	r3, [r3, #4]
 8006a1a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	691b      	ldr	r3, [r3, #16]
 8006a22:	00db      	lsls	r3, r3, #3
 8006a24:	490e      	ldr	r1, [pc, #56]	; (8006a60 <HAL_RCC_ClockConfig+0x1c4>)
 8006a26:	4313      	orrs	r3, r2
 8006a28:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006a2a:	f000 f821 	bl	8006a70 <HAL_RCC_GetSysClockFreq>
 8006a2e:	4602      	mov	r2, r0
 8006a30:	4b0b      	ldr	r3, [pc, #44]	; (8006a60 <HAL_RCC_ClockConfig+0x1c4>)
 8006a32:	685b      	ldr	r3, [r3, #4]
 8006a34:	091b      	lsrs	r3, r3, #4
 8006a36:	f003 030f 	and.w	r3, r3, #15
 8006a3a:	490a      	ldr	r1, [pc, #40]	; (8006a64 <HAL_RCC_ClockConfig+0x1c8>)
 8006a3c:	5ccb      	ldrb	r3, [r1, r3]
 8006a3e:	fa22 f303 	lsr.w	r3, r2, r3
 8006a42:	4a09      	ldr	r2, [pc, #36]	; (8006a68 <HAL_RCC_ClockConfig+0x1cc>)
 8006a44:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8006a46:	4b09      	ldr	r3, [pc, #36]	; (8006a6c <HAL_RCC_ClockConfig+0x1d0>)
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	4618      	mov	r0, r3
 8006a4c:	f7fd ff9e 	bl	800498c <HAL_InitTick>

  return HAL_OK;
 8006a50:	2300      	movs	r3, #0
}
 8006a52:	4618      	mov	r0, r3
 8006a54:	3710      	adds	r7, #16
 8006a56:	46bd      	mov	sp, r7
 8006a58:	bd80      	pop	{r7, pc}
 8006a5a:	bf00      	nop
 8006a5c:	40022000 	.word	0x40022000
 8006a60:	40021000 	.word	0x40021000
 8006a64:	0800d23c 	.word	0x0800d23c
 8006a68:	2000000c 	.word	0x2000000c
 8006a6c:	20000010 	.word	0x20000010

08006a70 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006a70:	b490      	push	{r4, r7}
 8006a72:	b08a      	sub	sp, #40	; 0x28
 8006a74:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8006a76:	4b29      	ldr	r3, [pc, #164]	; (8006b1c <HAL_RCC_GetSysClockFreq+0xac>)
 8006a78:	1d3c      	adds	r4, r7, #4
 8006a7a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006a7c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8006a80:	f240 2301 	movw	r3, #513	; 0x201
 8006a84:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8006a86:	2300      	movs	r3, #0
 8006a88:	61fb      	str	r3, [r7, #28]
 8006a8a:	2300      	movs	r3, #0
 8006a8c:	61bb      	str	r3, [r7, #24]
 8006a8e:	2300      	movs	r3, #0
 8006a90:	627b      	str	r3, [r7, #36]	; 0x24
 8006a92:	2300      	movs	r3, #0
 8006a94:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8006a96:	2300      	movs	r3, #0
 8006a98:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8006a9a:	4b21      	ldr	r3, [pc, #132]	; (8006b20 <HAL_RCC_GetSysClockFreq+0xb0>)
 8006a9c:	685b      	ldr	r3, [r3, #4]
 8006a9e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8006aa0:	69fb      	ldr	r3, [r7, #28]
 8006aa2:	f003 030c 	and.w	r3, r3, #12
 8006aa6:	2b04      	cmp	r3, #4
 8006aa8:	d002      	beq.n	8006ab0 <HAL_RCC_GetSysClockFreq+0x40>
 8006aaa:	2b08      	cmp	r3, #8
 8006aac:	d003      	beq.n	8006ab6 <HAL_RCC_GetSysClockFreq+0x46>
 8006aae:	e02b      	b.n	8006b08 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8006ab0:	4b1c      	ldr	r3, [pc, #112]	; (8006b24 <HAL_RCC_GetSysClockFreq+0xb4>)
 8006ab2:	623b      	str	r3, [r7, #32]
      break;
 8006ab4:	e02b      	b.n	8006b0e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8006ab6:	69fb      	ldr	r3, [r7, #28]
 8006ab8:	0c9b      	lsrs	r3, r3, #18
 8006aba:	f003 030f 	and.w	r3, r3, #15
 8006abe:	3328      	adds	r3, #40	; 0x28
 8006ac0:	443b      	add	r3, r7
 8006ac2:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8006ac6:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006ac8:	69fb      	ldr	r3, [r7, #28]
 8006aca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d012      	beq.n	8006af8 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8006ad2:	4b13      	ldr	r3, [pc, #76]	; (8006b20 <HAL_RCC_GetSysClockFreq+0xb0>)
 8006ad4:	685b      	ldr	r3, [r3, #4]
 8006ad6:	0c5b      	lsrs	r3, r3, #17
 8006ad8:	f003 0301 	and.w	r3, r3, #1
 8006adc:	3328      	adds	r3, #40	; 0x28
 8006ade:	443b      	add	r3, r7
 8006ae0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8006ae4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8006ae6:	697b      	ldr	r3, [r7, #20]
 8006ae8:	4a0e      	ldr	r2, [pc, #56]	; (8006b24 <HAL_RCC_GetSysClockFreq+0xb4>)
 8006aea:	fb03 f202 	mul.w	r2, r3, r2
 8006aee:	69bb      	ldr	r3, [r7, #24]
 8006af0:	fbb2 f3f3 	udiv	r3, r2, r3
 8006af4:	627b      	str	r3, [r7, #36]	; 0x24
 8006af6:	e004      	b.n	8006b02 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8006af8:	697b      	ldr	r3, [r7, #20]
 8006afa:	4a0b      	ldr	r2, [pc, #44]	; (8006b28 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006afc:	fb02 f303 	mul.w	r3, r2, r3
 8006b00:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8006b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b04:	623b      	str	r3, [r7, #32]
      break;
 8006b06:	e002      	b.n	8006b0e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8006b08:	4b06      	ldr	r3, [pc, #24]	; (8006b24 <HAL_RCC_GetSysClockFreq+0xb4>)
 8006b0a:	623b      	str	r3, [r7, #32]
      break;
 8006b0c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006b0e:	6a3b      	ldr	r3, [r7, #32]
}
 8006b10:	4618      	mov	r0, r3
 8006b12:	3728      	adds	r7, #40	; 0x28
 8006b14:	46bd      	mov	sp, r7
 8006b16:	bc90      	pop	{r4, r7}
 8006b18:	4770      	bx	lr
 8006b1a:	bf00      	nop
 8006b1c:	0800d224 	.word	0x0800d224
 8006b20:	40021000 	.word	0x40021000
 8006b24:	007a1200 	.word	0x007a1200
 8006b28:	003d0900 	.word	0x003d0900

08006b2c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006b2c:	b480      	push	{r7}
 8006b2e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006b30:	4b02      	ldr	r3, [pc, #8]	; (8006b3c <HAL_RCC_GetHCLKFreq+0x10>)
 8006b32:	681b      	ldr	r3, [r3, #0]
}
 8006b34:	4618      	mov	r0, r3
 8006b36:	46bd      	mov	sp, r7
 8006b38:	bc80      	pop	{r7}
 8006b3a:	4770      	bx	lr
 8006b3c:	2000000c 	.word	0x2000000c

08006b40 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006b40:	b580      	push	{r7, lr}
 8006b42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006b44:	f7ff fff2 	bl	8006b2c <HAL_RCC_GetHCLKFreq>
 8006b48:	4602      	mov	r2, r0
 8006b4a:	4b05      	ldr	r3, [pc, #20]	; (8006b60 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006b4c:	685b      	ldr	r3, [r3, #4]
 8006b4e:	0a1b      	lsrs	r3, r3, #8
 8006b50:	f003 0307 	and.w	r3, r3, #7
 8006b54:	4903      	ldr	r1, [pc, #12]	; (8006b64 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006b56:	5ccb      	ldrb	r3, [r1, r3]
 8006b58:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006b5c:	4618      	mov	r0, r3
 8006b5e:	bd80      	pop	{r7, pc}
 8006b60:	40021000 	.word	0x40021000
 8006b64:	0800d24c 	.word	0x0800d24c

08006b68 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006b68:	b580      	push	{r7, lr}
 8006b6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006b6c:	f7ff ffde 	bl	8006b2c <HAL_RCC_GetHCLKFreq>
 8006b70:	4602      	mov	r2, r0
 8006b72:	4b05      	ldr	r3, [pc, #20]	; (8006b88 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006b74:	685b      	ldr	r3, [r3, #4]
 8006b76:	0adb      	lsrs	r3, r3, #11
 8006b78:	f003 0307 	and.w	r3, r3, #7
 8006b7c:	4903      	ldr	r1, [pc, #12]	; (8006b8c <HAL_RCC_GetPCLK2Freq+0x24>)
 8006b7e:	5ccb      	ldrb	r3, [r1, r3]
 8006b80:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006b84:	4618      	mov	r0, r3
 8006b86:	bd80      	pop	{r7, pc}
 8006b88:	40021000 	.word	0x40021000
 8006b8c:	0800d24c 	.word	0x0800d24c

08006b90 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006b90:	b480      	push	{r7}
 8006b92:	b083      	sub	sp, #12
 8006b94:	af00      	add	r7, sp, #0
 8006b96:	6078      	str	r0, [r7, #4]
 8006b98:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	220f      	movs	r2, #15
 8006b9e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006ba0:	4b11      	ldr	r3, [pc, #68]	; (8006be8 <HAL_RCC_GetClockConfig+0x58>)
 8006ba2:	685b      	ldr	r3, [r3, #4]
 8006ba4:	f003 0203 	and.w	r2, r3, #3
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8006bac:	4b0e      	ldr	r3, [pc, #56]	; (8006be8 <HAL_RCC_GetClockConfig+0x58>)
 8006bae:	685b      	ldr	r3, [r3, #4]
 8006bb0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8006bb8:	4b0b      	ldr	r3, [pc, #44]	; (8006be8 <HAL_RCC_GetClockConfig+0x58>)
 8006bba:	685b      	ldr	r3, [r3, #4]
 8006bbc:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8006bc4:	4b08      	ldr	r3, [pc, #32]	; (8006be8 <HAL_RCC_GetClockConfig+0x58>)
 8006bc6:	685b      	ldr	r3, [r3, #4]
 8006bc8:	08db      	lsrs	r3, r3, #3
 8006bca:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006bd2:	4b06      	ldr	r3, [pc, #24]	; (8006bec <HAL_RCC_GetClockConfig+0x5c>)
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	f003 0207 	and.w	r2, r3, #7
 8006bda:	683b      	ldr	r3, [r7, #0]
 8006bdc:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8006bde:	bf00      	nop
 8006be0:	370c      	adds	r7, #12
 8006be2:	46bd      	mov	sp, r7
 8006be4:	bc80      	pop	{r7}
 8006be6:	4770      	bx	lr
 8006be8:	40021000 	.word	0x40021000
 8006bec:	40022000 	.word	0x40022000

08006bf0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8006bf0:	b480      	push	{r7}
 8006bf2:	b085      	sub	sp, #20
 8006bf4:	af00      	add	r7, sp, #0
 8006bf6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8006bf8:	4b0a      	ldr	r3, [pc, #40]	; (8006c24 <RCC_Delay+0x34>)
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	4a0a      	ldr	r2, [pc, #40]	; (8006c28 <RCC_Delay+0x38>)
 8006bfe:	fba2 2303 	umull	r2, r3, r2, r3
 8006c02:	0a5b      	lsrs	r3, r3, #9
 8006c04:	687a      	ldr	r2, [r7, #4]
 8006c06:	fb02 f303 	mul.w	r3, r2, r3
 8006c0a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8006c0c:	bf00      	nop
  }
  while (Delay --);
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	1e5a      	subs	r2, r3, #1
 8006c12:	60fa      	str	r2, [r7, #12]
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d1f9      	bne.n	8006c0c <RCC_Delay+0x1c>
}
 8006c18:	bf00      	nop
 8006c1a:	bf00      	nop
 8006c1c:	3714      	adds	r7, #20
 8006c1e:	46bd      	mov	sp, r7
 8006c20:	bc80      	pop	{r7}
 8006c22:	4770      	bx	lr
 8006c24:	2000000c 	.word	0x2000000c
 8006c28:	10624dd3 	.word	0x10624dd3

08006c2c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006c2c:	b580      	push	{r7, lr}
 8006c2e:	b082      	sub	sp, #8
 8006c30:	af00      	add	r7, sp, #0
 8006c32:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d101      	bne.n	8006c3e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006c3a:	2301      	movs	r3, #1
 8006c3c:	e041      	b.n	8006cc2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c44:	b2db      	uxtb	r3, r3
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d106      	bne.n	8006c58 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	2200      	movs	r2, #0
 8006c4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006c52:	6878      	ldr	r0, [r7, #4]
 8006c54:	f7fd fd58 	bl	8004708 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	2202      	movs	r2, #2
 8006c5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681a      	ldr	r2, [r3, #0]
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	3304      	adds	r3, #4
 8006c68:	4619      	mov	r1, r3
 8006c6a:	4610      	mov	r0, r2
 8006c6c:	f000 fc28 	bl	80074c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	2201      	movs	r2, #1
 8006c74:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	2201      	movs	r2, #1
 8006c7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	2201      	movs	r2, #1
 8006c84:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	2201      	movs	r2, #1
 8006c8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	2201      	movs	r2, #1
 8006c94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	2201      	movs	r2, #1
 8006c9c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	2201      	movs	r2, #1
 8006ca4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	2201      	movs	r2, #1
 8006cac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	2201      	movs	r2, #1
 8006cb4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	2201      	movs	r2, #1
 8006cbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006cc0:	2300      	movs	r3, #0
}
 8006cc2:	4618      	mov	r0, r3
 8006cc4:	3708      	adds	r7, #8
 8006cc6:	46bd      	mov	sp, r7
 8006cc8:	bd80      	pop	{r7, pc}
	...

08006ccc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006ccc:	b480      	push	{r7}
 8006cce:	b085      	sub	sp, #20
 8006cd0:	af00      	add	r7, sp, #0
 8006cd2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006cda:	b2db      	uxtb	r3, r3
 8006cdc:	2b01      	cmp	r3, #1
 8006cde:	d001      	beq.n	8006ce4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006ce0:	2301      	movs	r3, #1
 8006ce2:	e03a      	b.n	8006d5a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	2202      	movs	r2, #2
 8006ce8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	68da      	ldr	r2, [r3, #12]
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	f042 0201 	orr.w	r2, r2, #1
 8006cfa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	4a18      	ldr	r2, [pc, #96]	; (8006d64 <HAL_TIM_Base_Start_IT+0x98>)
 8006d02:	4293      	cmp	r3, r2
 8006d04:	d00e      	beq.n	8006d24 <HAL_TIM_Base_Start_IT+0x58>
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d0e:	d009      	beq.n	8006d24 <HAL_TIM_Base_Start_IT+0x58>
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	4a14      	ldr	r2, [pc, #80]	; (8006d68 <HAL_TIM_Base_Start_IT+0x9c>)
 8006d16:	4293      	cmp	r3, r2
 8006d18:	d004      	beq.n	8006d24 <HAL_TIM_Base_Start_IT+0x58>
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	4a13      	ldr	r2, [pc, #76]	; (8006d6c <HAL_TIM_Base_Start_IT+0xa0>)
 8006d20:	4293      	cmp	r3, r2
 8006d22:	d111      	bne.n	8006d48 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	689b      	ldr	r3, [r3, #8]
 8006d2a:	f003 0307 	and.w	r3, r3, #7
 8006d2e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	2b06      	cmp	r3, #6
 8006d34:	d010      	beq.n	8006d58 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	681a      	ldr	r2, [r3, #0]
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	f042 0201 	orr.w	r2, r2, #1
 8006d44:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d46:	e007      	b.n	8006d58 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	681a      	ldr	r2, [r3, #0]
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	f042 0201 	orr.w	r2, r2, #1
 8006d56:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006d58:	2300      	movs	r3, #0
}
 8006d5a:	4618      	mov	r0, r3
 8006d5c:	3714      	adds	r7, #20
 8006d5e:	46bd      	mov	sp, r7
 8006d60:	bc80      	pop	{r7}
 8006d62:	4770      	bx	lr
 8006d64:	40012c00 	.word	0x40012c00
 8006d68:	40000400 	.word	0x40000400
 8006d6c:	40000800 	.word	0x40000800

08006d70 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006d70:	b580      	push	{r7, lr}
 8006d72:	b082      	sub	sp, #8
 8006d74:	af00      	add	r7, sp, #0
 8006d76:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d101      	bne.n	8006d82 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006d7e:	2301      	movs	r3, #1
 8006d80:	e041      	b.n	8006e06 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006d88:	b2db      	uxtb	r3, r3
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d106      	bne.n	8006d9c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	2200      	movs	r2, #0
 8006d92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006d96:	6878      	ldr	r0, [r7, #4]
 8006d98:	f000 f839 	bl	8006e0e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	2202      	movs	r2, #2
 8006da0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681a      	ldr	r2, [r3, #0]
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	3304      	adds	r3, #4
 8006dac:	4619      	mov	r1, r3
 8006dae:	4610      	mov	r0, r2
 8006db0:	f000 fb86 	bl	80074c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	2201      	movs	r2, #1
 8006db8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	2201      	movs	r2, #1
 8006dc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	2201      	movs	r2, #1
 8006dc8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	2201      	movs	r2, #1
 8006dd0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	2201      	movs	r2, #1
 8006dd8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	2201      	movs	r2, #1
 8006de0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	2201      	movs	r2, #1
 8006de8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	2201      	movs	r2, #1
 8006df0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	2201      	movs	r2, #1
 8006df8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	2201      	movs	r2, #1
 8006e00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006e04:	2300      	movs	r3, #0
}
 8006e06:	4618      	mov	r0, r3
 8006e08:	3708      	adds	r7, #8
 8006e0a:	46bd      	mov	sp, r7
 8006e0c:	bd80      	pop	{r7, pc}

08006e0e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006e0e:	b480      	push	{r7}
 8006e10:	b083      	sub	sp, #12
 8006e12:	af00      	add	r7, sp, #0
 8006e14:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006e16:	bf00      	nop
 8006e18:	370c      	adds	r7, #12
 8006e1a:	46bd      	mov	sp, r7
 8006e1c:	bc80      	pop	{r7}
 8006e1e:	4770      	bx	lr

08006e20 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006e20:	b580      	push	{r7, lr}
 8006e22:	b084      	sub	sp, #16
 8006e24:	af00      	add	r7, sp, #0
 8006e26:	6078      	str	r0, [r7, #4]
 8006e28:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006e2a:	683b      	ldr	r3, [r7, #0]
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d109      	bne.n	8006e44 <HAL_TIM_PWM_Start+0x24>
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006e36:	b2db      	uxtb	r3, r3
 8006e38:	2b01      	cmp	r3, #1
 8006e3a:	bf14      	ite	ne
 8006e3c:	2301      	movne	r3, #1
 8006e3e:	2300      	moveq	r3, #0
 8006e40:	b2db      	uxtb	r3, r3
 8006e42:	e022      	b.n	8006e8a <HAL_TIM_PWM_Start+0x6a>
 8006e44:	683b      	ldr	r3, [r7, #0]
 8006e46:	2b04      	cmp	r3, #4
 8006e48:	d109      	bne.n	8006e5e <HAL_TIM_PWM_Start+0x3e>
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006e50:	b2db      	uxtb	r3, r3
 8006e52:	2b01      	cmp	r3, #1
 8006e54:	bf14      	ite	ne
 8006e56:	2301      	movne	r3, #1
 8006e58:	2300      	moveq	r3, #0
 8006e5a:	b2db      	uxtb	r3, r3
 8006e5c:	e015      	b.n	8006e8a <HAL_TIM_PWM_Start+0x6a>
 8006e5e:	683b      	ldr	r3, [r7, #0]
 8006e60:	2b08      	cmp	r3, #8
 8006e62:	d109      	bne.n	8006e78 <HAL_TIM_PWM_Start+0x58>
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006e6a:	b2db      	uxtb	r3, r3
 8006e6c:	2b01      	cmp	r3, #1
 8006e6e:	bf14      	ite	ne
 8006e70:	2301      	movne	r3, #1
 8006e72:	2300      	moveq	r3, #0
 8006e74:	b2db      	uxtb	r3, r3
 8006e76:	e008      	b.n	8006e8a <HAL_TIM_PWM_Start+0x6a>
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006e7e:	b2db      	uxtb	r3, r3
 8006e80:	2b01      	cmp	r3, #1
 8006e82:	bf14      	ite	ne
 8006e84:	2301      	movne	r3, #1
 8006e86:	2300      	moveq	r3, #0
 8006e88:	b2db      	uxtb	r3, r3
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d001      	beq.n	8006e92 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8006e8e:	2301      	movs	r3, #1
 8006e90:	e05e      	b.n	8006f50 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006e92:	683b      	ldr	r3, [r7, #0]
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d104      	bne.n	8006ea2 <HAL_TIM_PWM_Start+0x82>
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	2202      	movs	r2, #2
 8006e9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006ea0:	e013      	b.n	8006eca <HAL_TIM_PWM_Start+0xaa>
 8006ea2:	683b      	ldr	r3, [r7, #0]
 8006ea4:	2b04      	cmp	r3, #4
 8006ea6:	d104      	bne.n	8006eb2 <HAL_TIM_PWM_Start+0x92>
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	2202      	movs	r2, #2
 8006eac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006eb0:	e00b      	b.n	8006eca <HAL_TIM_PWM_Start+0xaa>
 8006eb2:	683b      	ldr	r3, [r7, #0]
 8006eb4:	2b08      	cmp	r3, #8
 8006eb6:	d104      	bne.n	8006ec2 <HAL_TIM_PWM_Start+0xa2>
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	2202      	movs	r2, #2
 8006ebc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006ec0:	e003      	b.n	8006eca <HAL_TIM_PWM_Start+0xaa>
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	2202      	movs	r2, #2
 8006ec6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	2201      	movs	r2, #1
 8006ed0:	6839      	ldr	r1, [r7, #0]
 8006ed2:	4618      	mov	r0, r3
 8006ed4:	f000 fd74 	bl	80079c0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	4a1e      	ldr	r2, [pc, #120]	; (8006f58 <HAL_TIM_PWM_Start+0x138>)
 8006ede:	4293      	cmp	r3, r2
 8006ee0:	d107      	bne.n	8006ef2 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006ef0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	4a18      	ldr	r2, [pc, #96]	; (8006f58 <HAL_TIM_PWM_Start+0x138>)
 8006ef8:	4293      	cmp	r3, r2
 8006efa:	d00e      	beq.n	8006f1a <HAL_TIM_PWM_Start+0xfa>
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f04:	d009      	beq.n	8006f1a <HAL_TIM_PWM_Start+0xfa>
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	4a14      	ldr	r2, [pc, #80]	; (8006f5c <HAL_TIM_PWM_Start+0x13c>)
 8006f0c:	4293      	cmp	r3, r2
 8006f0e:	d004      	beq.n	8006f1a <HAL_TIM_PWM_Start+0xfa>
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	4a12      	ldr	r2, [pc, #72]	; (8006f60 <HAL_TIM_PWM_Start+0x140>)
 8006f16:	4293      	cmp	r3, r2
 8006f18:	d111      	bne.n	8006f3e <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	689b      	ldr	r3, [r3, #8]
 8006f20:	f003 0307 	and.w	r3, r3, #7
 8006f24:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	2b06      	cmp	r3, #6
 8006f2a:	d010      	beq.n	8006f4e <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	681a      	ldr	r2, [r3, #0]
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	f042 0201 	orr.w	r2, r2, #1
 8006f3a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006f3c:	e007      	b.n	8006f4e <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	681a      	ldr	r2, [r3, #0]
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	f042 0201 	orr.w	r2, r2, #1
 8006f4c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006f4e:	2300      	movs	r3, #0
}
 8006f50:	4618      	mov	r0, r3
 8006f52:	3710      	adds	r7, #16
 8006f54:	46bd      	mov	sp, r7
 8006f56:	bd80      	pop	{r7, pc}
 8006f58:	40012c00 	.word	0x40012c00
 8006f5c:	40000400 	.word	0x40000400
 8006f60:	40000800 	.word	0x40000800

08006f64 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006f64:	b580      	push	{r7, lr}
 8006f66:	b082      	sub	sp, #8
 8006f68:	af00      	add	r7, sp, #0
 8006f6a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	691b      	ldr	r3, [r3, #16]
 8006f72:	f003 0302 	and.w	r3, r3, #2
 8006f76:	2b02      	cmp	r3, #2
 8006f78:	d122      	bne.n	8006fc0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	68db      	ldr	r3, [r3, #12]
 8006f80:	f003 0302 	and.w	r3, r3, #2
 8006f84:	2b02      	cmp	r3, #2
 8006f86:	d11b      	bne.n	8006fc0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	f06f 0202 	mvn.w	r2, #2
 8006f90:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	2201      	movs	r2, #1
 8006f96:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	699b      	ldr	r3, [r3, #24]
 8006f9e:	f003 0303 	and.w	r3, r3, #3
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d003      	beq.n	8006fae <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006fa6:	6878      	ldr	r0, [r7, #4]
 8006fa8:	f000 fa6f 	bl	800748a <HAL_TIM_IC_CaptureCallback>
 8006fac:	e005      	b.n	8006fba <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006fae:	6878      	ldr	r0, [r7, #4]
 8006fb0:	f000 fa62 	bl	8007478 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006fb4:	6878      	ldr	r0, [r7, #4]
 8006fb6:	f000 fa71 	bl	800749c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	2200      	movs	r2, #0
 8006fbe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	691b      	ldr	r3, [r3, #16]
 8006fc6:	f003 0304 	and.w	r3, r3, #4
 8006fca:	2b04      	cmp	r3, #4
 8006fcc:	d122      	bne.n	8007014 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	68db      	ldr	r3, [r3, #12]
 8006fd4:	f003 0304 	and.w	r3, r3, #4
 8006fd8:	2b04      	cmp	r3, #4
 8006fda:	d11b      	bne.n	8007014 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	f06f 0204 	mvn.w	r2, #4
 8006fe4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	2202      	movs	r2, #2
 8006fea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	699b      	ldr	r3, [r3, #24]
 8006ff2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d003      	beq.n	8007002 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006ffa:	6878      	ldr	r0, [r7, #4]
 8006ffc:	f000 fa45 	bl	800748a <HAL_TIM_IC_CaptureCallback>
 8007000:	e005      	b.n	800700e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007002:	6878      	ldr	r0, [r7, #4]
 8007004:	f000 fa38 	bl	8007478 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007008:	6878      	ldr	r0, [r7, #4]
 800700a:	f000 fa47 	bl	800749c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	2200      	movs	r2, #0
 8007012:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	691b      	ldr	r3, [r3, #16]
 800701a:	f003 0308 	and.w	r3, r3, #8
 800701e:	2b08      	cmp	r3, #8
 8007020:	d122      	bne.n	8007068 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	68db      	ldr	r3, [r3, #12]
 8007028:	f003 0308 	and.w	r3, r3, #8
 800702c:	2b08      	cmp	r3, #8
 800702e:	d11b      	bne.n	8007068 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	f06f 0208 	mvn.w	r2, #8
 8007038:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	2204      	movs	r2, #4
 800703e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	69db      	ldr	r3, [r3, #28]
 8007046:	f003 0303 	and.w	r3, r3, #3
 800704a:	2b00      	cmp	r3, #0
 800704c:	d003      	beq.n	8007056 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800704e:	6878      	ldr	r0, [r7, #4]
 8007050:	f000 fa1b 	bl	800748a <HAL_TIM_IC_CaptureCallback>
 8007054:	e005      	b.n	8007062 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007056:	6878      	ldr	r0, [r7, #4]
 8007058:	f000 fa0e 	bl	8007478 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800705c:	6878      	ldr	r0, [r7, #4]
 800705e:	f000 fa1d 	bl	800749c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	2200      	movs	r2, #0
 8007066:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	691b      	ldr	r3, [r3, #16]
 800706e:	f003 0310 	and.w	r3, r3, #16
 8007072:	2b10      	cmp	r3, #16
 8007074:	d122      	bne.n	80070bc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	68db      	ldr	r3, [r3, #12]
 800707c:	f003 0310 	and.w	r3, r3, #16
 8007080:	2b10      	cmp	r3, #16
 8007082:	d11b      	bne.n	80070bc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	f06f 0210 	mvn.w	r2, #16
 800708c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	2208      	movs	r2, #8
 8007092:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	69db      	ldr	r3, [r3, #28]
 800709a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d003      	beq.n	80070aa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80070a2:	6878      	ldr	r0, [r7, #4]
 80070a4:	f000 f9f1 	bl	800748a <HAL_TIM_IC_CaptureCallback>
 80070a8:	e005      	b.n	80070b6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80070aa:	6878      	ldr	r0, [r7, #4]
 80070ac:	f000 f9e4 	bl	8007478 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80070b0:	6878      	ldr	r0, [r7, #4]
 80070b2:	f000 f9f3 	bl	800749c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	2200      	movs	r2, #0
 80070ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	691b      	ldr	r3, [r3, #16]
 80070c2:	f003 0301 	and.w	r3, r3, #1
 80070c6:	2b01      	cmp	r3, #1
 80070c8:	d10e      	bne.n	80070e8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	68db      	ldr	r3, [r3, #12]
 80070d0:	f003 0301 	and.w	r3, r3, #1
 80070d4:	2b01      	cmp	r3, #1
 80070d6:	d107      	bne.n	80070e8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	f06f 0201 	mvn.w	r2, #1
 80070e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80070e2:	6878      	ldr	r0, [r7, #4]
 80070e4:	f7fd fa68 	bl	80045b8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	691b      	ldr	r3, [r3, #16]
 80070ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80070f2:	2b80      	cmp	r3, #128	; 0x80
 80070f4:	d10e      	bne.n	8007114 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	68db      	ldr	r3, [r3, #12]
 80070fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007100:	2b80      	cmp	r3, #128	; 0x80
 8007102:	d107      	bne.n	8007114 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800710c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800710e:	6878      	ldr	r0, [r7, #4]
 8007110:	f000 fce1 	bl	8007ad6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	691b      	ldr	r3, [r3, #16]
 800711a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800711e:	2b40      	cmp	r3, #64	; 0x40
 8007120:	d10e      	bne.n	8007140 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	68db      	ldr	r3, [r3, #12]
 8007128:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800712c:	2b40      	cmp	r3, #64	; 0x40
 800712e:	d107      	bne.n	8007140 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007138:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800713a:	6878      	ldr	r0, [r7, #4]
 800713c:	f000 f9b7 	bl	80074ae <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	691b      	ldr	r3, [r3, #16]
 8007146:	f003 0320 	and.w	r3, r3, #32
 800714a:	2b20      	cmp	r3, #32
 800714c:	d10e      	bne.n	800716c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	68db      	ldr	r3, [r3, #12]
 8007154:	f003 0320 	and.w	r3, r3, #32
 8007158:	2b20      	cmp	r3, #32
 800715a:	d107      	bne.n	800716c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	f06f 0220 	mvn.w	r2, #32
 8007164:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007166:	6878      	ldr	r0, [r7, #4]
 8007168:	f000 fcac 	bl	8007ac4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800716c:	bf00      	nop
 800716e:	3708      	adds	r7, #8
 8007170:	46bd      	mov	sp, r7
 8007172:	bd80      	pop	{r7, pc}

08007174 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007174:	b580      	push	{r7, lr}
 8007176:	b084      	sub	sp, #16
 8007178:	af00      	add	r7, sp, #0
 800717a:	60f8      	str	r0, [r7, #12]
 800717c:	60b9      	str	r1, [r7, #8]
 800717e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007186:	2b01      	cmp	r3, #1
 8007188:	d101      	bne.n	800718e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800718a:	2302      	movs	r3, #2
 800718c:	e0ac      	b.n	80072e8 <HAL_TIM_PWM_ConfigChannel+0x174>
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	2201      	movs	r2, #1
 8007192:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	2b0c      	cmp	r3, #12
 800719a:	f200 809f 	bhi.w	80072dc <HAL_TIM_PWM_ConfigChannel+0x168>
 800719e:	a201      	add	r2, pc, #4	; (adr r2, 80071a4 <HAL_TIM_PWM_ConfigChannel+0x30>)
 80071a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071a4:	080071d9 	.word	0x080071d9
 80071a8:	080072dd 	.word	0x080072dd
 80071ac:	080072dd 	.word	0x080072dd
 80071b0:	080072dd 	.word	0x080072dd
 80071b4:	08007219 	.word	0x08007219
 80071b8:	080072dd 	.word	0x080072dd
 80071bc:	080072dd 	.word	0x080072dd
 80071c0:	080072dd 	.word	0x080072dd
 80071c4:	0800725b 	.word	0x0800725b
 80071c8:	080072dd 	.word	0x080072dd
 80071cc:	080072dd 	.word	0x080072dd
 80071d0:	080072dd 	.word	0x080072dd
 80071d4:	0800729b 	.word	0x0800729b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	68b9      	ldr	r1, [r7, #8]
 80071de:	4618      	mov	r0, r3
 80071e0:	f000 f9d0 	bl	8007584 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	699a      	ldr	r2, [r3, #24]
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	f042 0208 	orr.w	r2, r2, #8
 80071f2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	699a      	ldr	r2, [r3, #24]
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	f022 0204 	bic.w	r2, r2, #4
 8007202:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	6999      	ldr	r1, [r3, #24]
 800720a:	68bb      	ldr	r3, [r7, #8]
 800720c:	691a      	ldr	r2, [r3, #16]
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	430a      	orrs	r2, r1
 8007214:	619a      	str	r2, [r3, #24]
      break;
 8007216:	e062      	b.n	80072de <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	68b9      	ldr	r1, [r7, #8]
 800721e:	4618      	mov	r0, r3
 8007220:	f000 fa16 	bl	8007650 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	699a      	ldr	r2, [r3, #24]
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007232:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	699a      	ldr	r2, [r3, #24]
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007242:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	6999      	ldr	r1, [r3, #24]
 800724a:	68bb      	ldr	r3, [r7, #8]
 800724c:	691b      	ldr	r3, [r3, #16]
 800724e:	021a      	lsls	r2, r3, #8
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	430a      	orrs	r2, r1
 8007256:	619a      	str	r2, [r3, #24]
      break;
 8007258:	e041      	b.n	80072de <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	68b9      	ldr	r1, [r7, #8]
 8007260:	4618      	mov	r0, r3
 8007262:	f000 fa5f 	bl	8007724 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	69da      	ldr	r2, [r3, #28]
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	f042 0208 	orr.w	r2, r2, #8
 8007274:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	69da      	ldr	r2, [r3, #28]
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	f022 0204 	bic.w	r2, r2, #4
 8007284:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	69d9      	ldr	r1, [r3, #28]
 800728c:	68bb      	ldr	r3, [r7, #8]
 800728e:	691a      	ldr	r2, [r3, #16]
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	430a      	orrs	r2, r1
 8007296:	61da      	str	r2, [r3, #28]
      break;
 8007298:	e021      	b.n	80072de <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	68b9      	ldr	r1, [r7, #8]
 80072a0:	4618      	mov	r0, r3
 80072a2:	f000 faa9 	bl	80077f8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	69da      	ldr	r2, [r3, #28]
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80072b4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	69da      	ldr	r2, [r3, #28]
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80072c4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	69d9      	ldr	r1, [r3, #28]
 80072cc:	68bb      	ldr	r3, [r7, #8]
 80072ce:	691b      	ldr	r3, [r3, #16]
 80072d0:	021a      	lsls	r2, r3, #8
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	430a      	orrs	r2, r1
 80072d8:	61da      	str	r2, [r3, #28]
      break;
 80072da:	e000      	b.n	80072de <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 80072dc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	2200      	movs	r2, #0
 80072e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80072e6:	2300      	movs	r3, #0
}
 80072e8:	4618      	mov	r0, r3
 80072ea:	3710      	adds	r7, #16
 80072ec:	46bd      	mov	sp, r7
 80072ee:	bd80      	pop	{r7, pc}

080072f0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80072f0:	b580      	push	{r7, lr}
 80072f2:	b084      	sub	sp, #16
 80072f4:	af00      	add	r7, sp, #0
 80072f6:	6078      	str	r0, [r7, #4]
 80072f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007300:	2b01      	cmp	r3, #1
 8007302:	d101      	bne.n	8007308 <HAL_TIM_ConfigClockSource+0x18>
 8007304:	2302      	movs	r3, #2
 8007306:	e0b3      	b.n	8007470 <HAL_TIM_ConfigClockSource+0x180>
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	2201      	movs	r2, #1
 800730c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	2202      	movs	r2, #2
 8007314:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	689b      	ldr	r3, [r3, #8]
 800731e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007326:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800732e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	68fa      	ldr	r2, [r7, #12]
 8007336:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007338:	683b      	ldr	r3, [r7, #0]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007340:	d03e      	beq.n	80073c0 <HAL_TIM_ConfigClockSource+0xd0>
 8007342:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007346:	f200 8087 	bhi.w	8007458 <HAL_TIM_ConfigClockSource+0x168>
 800734a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800734e:	f000 8085 	beq.w	800745c <HAL_TIM_ConfigClockSource+0x16c>
 8007352:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007356:	d87f      	bhi.n	8007458 <HAL_TIM_ConfigClockSource+0x168>
 8007358:	2b70      	cmp	r3, #112	; 0x70
 800735a:	d01a      	beq.n	8007392 <HAL_TIM_ConfigClockSource+0xa2>
 800735c:	2b70      	cmp	r3, #112	; 0x70
 800735e:	d87b      	bhi.n	8007458 <HAL_TIM_ConfigClockSource+0x168>
 8007360:	2b60      	cmp	r3, #96	; 0x60
 8007362:	d050      	beq.n	8007406 <HAL_TIM_ConfigClockSource+0x116>
 8007364:	2b60      	cmp	r3, #96	; 0x60
 8007366:	d877      	bhi.n	8007458 <HAL_TIM_ConfigClockSource+0x168>
 8007368:	2b50      	cmp	r3, #80	; 0x50
 800736a:	d03c      	beq.n	80073e6 <HAL_TIM_ConfigClockSource+0xf6>
 800736c:	2b50      	cmp	r3, #80	; 0x50
 800736e:	d873      	bhi.n	8007458 <HAL_TIM_ConfigClockSource+0x168>
 8007370:	2b40      	cmp	r3, #64	; 0x40
 8007372:	d058      	beq.n	8007426 <HAL_TIM_ConfigClockSource+0x136>
 8007374:	2b40      	cmp	r3, #64	; 0x40
 8007376:	d86f      	bhi.n	8007458 <HAL_TIM_ConfigClockSource+0x168>
 8007378:	2b30      	cmp	r3, #48	; 0x30
 800737a:	d064      	beq.n	8007446 <HAL_TIM_ConfigClockSource+0x156>
 800737c:	2b30      	cmp	r3, #48	; 0x30
 800737e:	d86b      	bhi.n	8007458 <HAL_TIM_ConfigClockSource+0x168>
 8007380:	2b20      	cmp	r3, #32
 8007382:	d060      	beq.n	8007446 <HAL_TIM_ConfigClockSource+0x156>
 8007384:	2b20      	cmp	r3, #32
 8007386:	d867      	bhi.n	8007458 <HAL_TIM_ConfigClockSource+0x168>
 8007388:	2b00      	cmp	r3, #0
 800738a:	d05c      	beq.n	8007446 <HAL_TIM_ConfigClockSource+0x156>
 800738c:	2b10      	cmp	r3, #16
 800738e:	d05a      	beq.n	8007446 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8007390:	e062      	b.n	8007458 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	6818      	ldr	r0, [r3, #0]
 8007396:	683b      	ldr	r3, [r7, #0]
 8007398:	6899      	ldr	r1, [r3, #8]
 800739a:	683b      	ldr	r3, [r7, #0]
 800739c:	685a      	ldr	r2, [r3, #4]
 800739e:	683b      	ldr	r3, [r7, #0]
 80073a0:	68db      	ldr	r3, [r3, #12]
 80073a2:	f000 faee 	bl	8007982 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	689b      	ldr	r3, [r3, #8]
 80073ac:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80073b4:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	68fa      	ldr	r2, [r7, #12]
 80073bc:	609a      	str	r2, [r3, #8]
      break;
 80073be:	e04e      	b.n	800745e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	6818      	ldr	r0, [r3, #0]
 80073c4:	683b      	ldr	r3, [r7, #0]
 80073c6:	6899      	ldr	r1, [r3, #8]
 80073c8:	683b      	ldr	r3, [r7, #0]
 80073ca:	685a      	ldr	r2, [r3, #4]
 80073cc:	683b      	ldr	r3, [r7, #0]
 80073ce:	68db      	ldr	r3, [r3, #12]
 80073d0:	f000 fad7 	bl	8007982 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	689a      	ldr	r2, [r3, #8]
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80073e2:	609a      	str	r2, [r3, #8]
      break;
 80073e4:	e03b      	b.n	800745e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	6818      	ldr	r0, [r3, #0]
 80073ea:	683b      	ldr	r3, [r7, #0]
 80073ec:	6859      	ldr	r1, [r3, #4]
 80073ee:	683b      	ldr	r3, [r7, #0]
 80073f0:	68db      	ldr	r3, [r3, #12]
 80073f2:	461a      	mov	r2, r3
 80073f4:	f000 fa4e 	bl	8007894 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	2150      	movs	r1, #80	; 0x50
 80073fe:	4618      	mov	r0, r3
 8007400:	f000 faa5 	bl	800794e <TIM_ITRx_SetConfig>
      break;
 8007404:	e02b      	b.n	800745e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	6818      	ldr	r0, [r3, #0]
 800740a:	683b      	ldr	r3, [r7, #0]
 800740c:	6859      	ldr	r1, [r3, #4]
 800740e:	683b      	ldr	r3, [r7, #0]
 8007410:	68db      	ldr	r3, [r3, #12]
 8007412:	461a      	mov	r2, r3
 8007414:	f000 fa6c 	bl	80078f0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	2160      	movs	r1, #96	; 0x60
 800741e:	4618      	mov	r0, r3
 8007420:	f000 fa95 	bl	800794e <TIM_ITRx_SetConfig>
      break;
 8007424:	e01b      	b.n	800745e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	6818      	ldr	r0, [r3, #0]
 800742a:	683b      	ldr	r3, [r7, #0]
 800742c:	6859      	ldr	r1, [r3, #4]
 800742e:	683b      	ldr	r3, [r7, #0]
 8007430:	68db      	ldr	r3, [r3, #12]
 8007432:	461a      	mov	r2, r3
 8007434:	f000 fa2e 	bl	8007894 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	2140      	movs	r1, #64	; 0x40
 800743e:	4618      	mov	r0, r3
 8007440:	f000 fa85 	bl	800794e <TIM_ITRx_SetConfig>
      break;
 8007444:	e00b      	b.n	800745e <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	681a      	ldr	r2, [r3, #0]
 800744a:	683b      	ldr	r3, [r7, #0]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	4619      	mov	r1, r3
 8007450:	4610      	mov	r0, r2
 8007452:	f000 fa7c 	bl	800794e <TIM_ITRx_SetConfig>
        break;
 8007456:	e002      	b.n	800745e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8007458:	bf00      	nop
 800745a:	e000      	b.n	800745e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800745c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	2201      	movs	r2, #1
 8007462:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	2200      	movs	r2, #0
 800746a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800746e:	2300      	movs	r3, #0
}
 8007470:	4618      	mov	r0, r3
 8007472:	3710      	adds	r7, #16
 8007474:	46bd      	mov	sp, r7
 8007476:	bd80      	pop	{r7, pc}

08007478 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007478:	b480      	push	{r7}
 800747a:	b083      	sub	sp, #12
 800747c:	af00      	add	r7, sp, #0
 800747e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007480:	bf00      	nop
 8007482:	370c      	adds	r7, #12
 8007484:	46bd      	mov	sp, r7
 8007486:	bc80      	pop	{r7}
 8007488:	4770      	bx	lr

0800748a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800748a:	b480      	push	{r7}
 800748c:	b083      	sub	sp, #12
 800748e:	af00      	add	r7, sp, #0
 8007490:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007492:	bf00      	nop
 8007494:	370c      	adds	r7, #12
 8007496:	46bd      	mov	sp, r7
 8007498:	bc80      	pop	{r7}
 800749a:	4770      	bx	lr

0800749c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800749c:	b480      	push	{r7}
 800749e:	b083      	sub	sp, #12
 80074a0:	af00      	add	r7, sp, #0
 80074a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80074a4:	bf00      	nop
 80074a6:	370c      	adds	r7, #12
 80074a8:	46bd      	mov	sp, r7
 80074aa:	bc80      	pop	{r7}
 80074ac:	4770      	bx	lr

080074ae <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80074ae:	b480      	push	{r7}
 80074b0:	b083      	sub	sp, #12
 80074b2:	af00      	add	r7, sp, #0
 80074b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80074b6:	bf00      	nop
 80074b8:	370c      	adds	r7, #12
 80074ba:	46bd      	mov	sp, r7
 80074bc:	bc80      	pop	{r7}
 80074be:	4770      	bx	lr

080074c0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80074c0:	b480      	push	{r7}
 80074c2:	b085      	sub	sp, #20
 80074c4:	af00      	add	r7, sp, #0
 80074c6:	6078      	str	r0, [r7, #4]
 80074c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	4a29      	ldr	r2, [pc, #164]	; (8007578 <TIM_Base_SetConfig+0xb8>)
 80074d4:	4293      	cmp	r3, r2
 80074d6:	d00b      	beq.n	80074f0 <TIM_Base_SetConfig+0x30>
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80074de:	d007      	beq.n	80074f0 <TIM_Base_SetConfig+0x30>
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	4a26      	ldr	r2, [pc, #152]	; (800757c <TIM_Base_SetConfig+0xbc>)
 80074e4:	4293      	cmp	r3, r2
 80074e6:	d003      	beq.n	80074f0 <TIM_Base_SetConfig+0x30>
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	4a25      	ldr	r2, [pc, #148]	; (8007580 <TIM_Base_SetConfig+0xc0>)
 80074ec:	4293      	cmp	r3, r2
 80074ee:	d108      	bne.n	8007502 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80074f6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80074f8:	683b      	ldr	r3, [r7, #0]
 80074fa:	685b      	ldr	r3, [r3, #4]
 80074fc:	68fa      	ldr	r2, [r7, #12]
 80074fe:	4313      	orrs	r3, r2
 8007500:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	4a1c      	ldr	r2, [pc, #112]	; (8007578 <TIM_Base_SetConfig+0xb8>)
 8007506:	4293      	cmp	r3, r2
 8007508:	d00b      	beq.n	8007522 <TIM_Base_SetConfig+0x62>
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007510:	d007      	beq.n	8007522 <TIM_Base_SetConfig+0x62>
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	4a19      	ldr	r2, [pc, #100]	; (800757c <TIM_Base_SetConfig+0xbc>)
 8007516:	4293      	cmp	r3, r2
 8007518:	d003      	beq.n	8007522 <TIM_Base_SetConfig+0x62>
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	4a18      	ldr	r2, [pc, #96]	; (8007580 <TIM_Base_SetConfig+0xc0>)
 800751e:	4293      	cmp	r3, r2
 8007520:	d108      	bne.n	8007534 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007528:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800752a:	683b      	ldr	r3, [r7, #0]
 800752c:	68db      	ldr	r3, [r3, #12]
 800752e:	68fa      	ldr	r2, [r7, #12]
 8007530:	4313      	orrs	r3, r2
 8007532:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800753a:	683b      	ldr	r3, [r7, #0]
 800753c:	695b      	ldr	r3, [r3, #20]
 800753e:	4313      	orrs	r3, r2
 8007540:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	68fa      	ldr	r2, [r7, #12]
 8007546:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007548:	683b      	ldr	r3, [r7, #0]
 800754a:	689a      	ldr	r2, [r3, #8]
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007550:	683b      	ldr	r3, [r7, #0]
 8007552:	681a      	ldr	r2, [r3, #0]
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	4a07      	ldr	r2, [pc, #28]	; (8007578 <TIM_Base_SetConfig+0xb8>)
 800755c:	4293      	cmp	r3, r2
 800755e:	d103      	bne.n	8007568 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007560:	683b      	ldr	r3, [r7, #0]
 8007562:	691a      	ldr	r2, [r3, #16]
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	2201      	movs	r2, #1
 800756c:	615a      	str	r2, [r3, #20]
}
 800756e:	bf00      	nop
 8007570:	3714      	adds	r7, #20
 8007572:	46bd      	mov	sp, r7
 8007574:	bc80      	pop	{r7}
 8007576:	4770      	bx	lr
 8007578:	40012c00 	.word	0x40012c00
 800757c:	40000400 	.word	0x40000400
 8007580:	40000800 	.word	0x40000800

08007584 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007584:	b480      	push	{r7}
 8007586:	b087      	sub	sp, #28
 8007588:	af00      	add	r7, sp, #0
 800758a:	6078      	str	r0, [r7, #4]
 800758c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	6a1b      	ldr	r3, [r3, #32]
 8007592:	f023 0201 	bic.w	r2, r3, #1
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	6a1b      	ldr	r3, [r3, #32]
 800759e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	685b      	ldr	r3, [r3, #4]
 80075a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	699b      	ldr	r3, [r3, #24]
 80075aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80075b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	f023 0303 	bic.w	r3, r3, #3
 80075ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80075bc:	683b      	ldr	r3, [r7, #0]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	68fa      	ldr	r2, [r7, #12]
 80075c2:	4313      	orrs	r3, r2
 80075c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80075c6:	697b      	ldr	r3, [r7, #20]
 80075c8:	f023 0302 	bic.w	r3, r3, #2
 80075cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80075ce:	683b      	ldr	r3, [r7, #0]
 80075d0:	689b      	ldr	r3, [r3, #8]
 80075d2:	697a      	ldr	r2, [r7, #20]
 80075d4:	4313      	orrs	r3, r2
 80075d6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	4a1c      	ldr	r2, [pc, #112]	; (800764c <TIM_OC1_SetConfig+0xc8>)
 80075dc:	4293      	cmp	r3, r2
 80075de:	d10c      	bne.n	80075fa <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80075e0:	697b      	ldr	r3, [r7, #20]
 80075e2:	f023 0308 	bic.w	r3, r3, #8
 80075e6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80075e8:	683b      	ldr	r3, [r7, #0]
 80075ea:	68db      	ldr	r3, [r3, #12]
 80075ec:	697a      	ldr	r2, [r7, #20]
 80075ee:	4313      	orrs	r3, r2
 80075f0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80075f2:	697b      	ldr	r3, [r7, #20]
 80075f4:	f023 0304 	bic.w	r3, r3, #4
 80075f8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	4a13      	ldr	r2, [pc, #76]	; (800764c <TIM_OC1_SetConfig+0xc8>)
 80075fe:	4293      	cmp	r3, r2
 8007600:	d111      	bne.n	8007626 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007602:	693b      	ldr	r3, [r7, #16]
 8007604:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007608:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800760a:	693b      	ldr	r3, [r7, #16]
 800760c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007610:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007612:	683b      	ldr	r3, [r7, #0]
 8007614:	695b      	ldr	r3, [r3, #20]
 8007616:	693a      	ldr	r2, [r7, #16]
 8007618:	4313      	orrs	r3, r2
 800761a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800761c:	683b      	ldr	r3, [r7, #0]
 800761e:	699b      	ldr	r3, [r3, #24]
 8007620:	693a      	ldr	r2, [r7, #16]
 8007622:	4313      	orrs	r3, r2
 8007624:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	693a      	ldr	r2, [r7, #16]
 800762a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	68fa      	ldr	r2, [r7, #12]
 8007630:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007632:	683b      	ldr	r3, [r7, #0]
 8007634:	685a      	ldr	r2, [r3, #4]
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	697a      	ldr	r2, [r7, #20]
 800763e:	621a      	str	r2, [r3, #32]
}
 8007640:	bf00      	nop
 8007642:	371c      	adds	r7, #28
 8007644:	46bd      	mov	sp, r7
 8007646:	bc80      	pop	{r7}
 8007648:	4770      	bx	lr
 800764a:	bf00      	nop
 800764c:	40012c00 	.word	0x40012c00

08007650 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007650:	b480      	push	{r7}
 8007652:	b087      	sub	sp, #28
 8007654:	af00      	add	r7, sp, #0
 8007656:	6078      	str	r0, [r7, #4]
 8007658:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	6a1b      	ldr	r3, [r3, #32]
 800765e:	f023 0210 	bic.w	r2, r3, #16
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	6a1b      	ldr	r3, [r3, #32]
 800766a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	685b      	ldr	r3, [r3, #4]
 8007670:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	699b      	ldr	r3, [r3, #24]
 8007676:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800767e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007686:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007688:	683b      	ldr	r3, [r7, #0]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	021b      	lsls	r3, r3, #8
 800768e:	68fa      	ldr	r2, [r7, #12]
 8007690:	4313      	orrs	r3, r2
 8007692:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007694:	697b      	ldr	r3, [r7, #20]
 8007696:	f023 0320 	bic.w	r3, r3, #32
 800769a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800769c:	683b      	ldr	r3, [r7, #0]
 800769e:	689b      	ldr	r3, [r3, #8]
 80076a0:	011b      	lsls	r3, r3, #4
 80076a2:	697a      	ldr	r2, [r7, #20]
 80076a4:	4313      	orrs	r3, r2
 80076a6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	4a1d      	ldr	r2, [pc, #116]	; (8007720 <TIM_OC2_SetConfig+0xd0>)
 80076ac:	4293      	cmp	r3, r2
 80076ae:	d10d      	bne.n	80076cc <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80076b0:	697b      	ldr	r3, [r7, #20]
 80076b2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80076b6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80076b8:	683b      	ldr	r3, [r7, #0]
 80076ba:	68db      	ldr	r3, [r3, #12]
 80076bc:	011b      	lsls	r3, r3, #4
 80076be:	697a      	ldr	r2, [r7, #20]
 80076c0:	4313      	orrs	r3, r2
 80076c2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80076c4:	697b      	ldr	r3, [r7, #20]
 80076c6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80076ca:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	4a14      	ldr	r2, [pc, #80]	; (8007720 <TIM_OC2_SetConfig+0xd0>)
 80076d0:	4293      	cmp	r3, r2
 80076d2:	d113      	bne.n	80076fc <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80076d4:	693b      	ldr	r3, [r7, #16]
 80076d6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80076da:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80076dc:	693b      	ldr	r3, [r7, #16]
 80076de:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80076e2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80076e4:	683b      	ldr	r3, [r7, #0]
 80076e6:	695b      	ldr	r3, [r3, #20]
 80076e8:	009b      	lsls	r3, r3, #2
 80076ea:	693a      	ldr	r2, [r7, #16]
 80076ec:	4313      	orrs	r3, r2
 80076ee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80076f0:	683b      	ldr	r3, [r7, #0]
 80076f2:	699b      	ldr	r3, [r3, #24]
 80076f4:	009b      	lsls	r3, r3, #2
 80076f6:	693a      	ldr	r2, [r7, #16]
 80076f8:	4313      	orrs	r3, r2
 80076fa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	693a      	ldr	r2, [r7, #16]
 8007700:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	68fa      	ldr	r2, [r7, #12]
 8007706:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007708:	683b      	ldr	r3, [r7, #0]
 800770a:	685a      	ldr	r2, [r3, #4]
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	697a      	ldr	r2, [r7, #20]
 8007714:	621a      	str	r2, [r3, #32]
}
 8007716:	bf00      	nop
 8007718:	371c      	adds	r7, #28
 800771a:	46bd      	mov	sp, r7
 800771c:	bc80      	pop	{r7}
 800771e:	4770      	bx	lr
 8007720:	40012c00 	.word	0x40012c00

08007724 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007724:	b480      	push	{r7}
 8007726:	b087      	sub	sp, #28
 8007728:	af00      	add	r7, sp, #0
 800772a:	6078      	str	r0, [r7, #4]
 800772c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	6a1b      	ldr	r3, [r3, #32]
 8007732:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	6a1b      	ldr	r3, [r3, #32]
 800773e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	685b      	ldr	r3, [r3, #4]
 8007744:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	69db      	ldr	r3, [r3, #28]
 800774a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007752:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	f023 0303 	bic.w	r3, r3, #3
 800775a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800775c:	683b      	ldr	r3, [r7, #0]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	68fa      	ldr	r2, [r7, #12]
 8007762:	4313      	orrs	r3, r2
 8007764:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007766:	697b      	ldr	r3, [r7, #20]
 8007768:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800776c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800776e:	683b      	ldr	r3, [r7, #0]
 8007770:	689b      	ldr	r3, [r3, #8]
 8007772:	021b      	lsls	r3, r3, #8
 8007774:	697a      	ldr	r2, [r7, #20]
 8007776:	4313      	orrs	r3, r2
 8007778:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	4a1d      	ldr	r2, [pc, #116]	; (80077f4 <TIM_OC3_SetConfig+0xd0>)
 800777e:	4293      	cmp	r3, r2
 8007780:	d10d      	bne.n	800779e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007782:	697b      	ldr	r3, [r7, #20]
 8007784:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007788:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800778a:	683b      	ldr	r3, [r7, #0]
 800778c:	68db      	ldr	r3, [r3, #12]
 800778e:	021b      	lsls	r3, r3, #8
 8007790:	697a      	ldr	r2, [r7, #20]
 8007792:	4313      	orrs	r3, r2
 8007794:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007796:	697b      	ldr	r3, [r7, #20]
 8007798:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800779c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	4a14      	ldr	r2, [pc, #80]	; (80077f4 <TIM_OC3_SetConfig+0xd0>)
 80077a2:	4293      	cmp	r3, r2
 80077a4:	d113      	bne.n	80077ce <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80077a6:	693b      	ldr	r3, [r7, #16]
 80077a8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80077ac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80077ae:	693b      	ldr	r3, [r7, #16]
 80077b0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80077b4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80077b6:	683b      	ldr	r3, [r7, #0]
 80077b8:	695b      	ldr	r3, [r3, #20]
 80077ba:	011b      	lsls	r3, r3, #4
 80077bc:	693a      	ldr	r2, [r7, #16]
 80077be:	4313      	orrs	r3, r2
 80077c0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80077c2:	683b      	ldr	r3, [r7, #0]
 80077c4:	699b      	ldr	r3, [r3, #24]
 80077c6:	011b      	lsls	r3, r3, #4
 80077c8:	693a      	ldr	r2, [r7, #16]
 80077ca:	4313      	orrs	r3, r2
 80077cc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	693a      	ldr	r2, [r7, #16]
 80077d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	68fa      	ldr	r2, [r7, #12]
 80077d8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80077da:	683b      	ldr	r3, [r7, #0]
 80077dc:	685a      	ldr	r2, [r3, #4]
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	697a      	ldr	r2, [r7, #20]
 80077e6:	621a      	str	r2, [r3, #32]
}
 80077e8:	bf00      	nop
 80077ea:	371c      	adds	r7, #28
 80077ec:	46bd      	mov	sp, r7
 80077ee:	bc80      	pop	{r7}
 80077f0:	4770      	bx	lr
 80077f2:	bf00      	nop
 80077f4:	40012c00 	.word	0x40012c00

080077f8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80077f8:	b480      	push	{r7}
 80077fa:	b087      	sub	sp, #28
 80077fc:	af00      	add	r7, sp, #0
 80077fe:	6078      	str	r0, [r7, #4]
 8007800:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	6a1b      	ldr	r3, [r3, #32]
 8007806:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	6a1b      	ldr	r3, [r3, #32]
 8007812:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	685b      	ldr	r3, [r3, #4]
 8007818:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	69db      	ldr	r3, [r3, #28]
 800781e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007826:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800782e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007830:	683b      	ldr	r3, [r7, #0]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	021b      	lsls	r3, r3, #8
 8007836:	68fa      	ldr	r2, [r7, #12]
 8007838:	4313      	orrs	r3, r2
 800783a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800783c:	693b      	ldr	r3, [r7, #16]
 800783e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007842:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007844:	683b      	ldr	r3, [r7, #0]
 8007846:	689b      	ldr	r3, [r3, #8]
 8007848:	031b      	lsls	r3, r3, #12
 800784a:	693a      	ldr	r2, [r7, #16]
 800784c:	4313      	orrs	r3, r2
 800784e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	4a0f      	ldr	r2, [pc, #60]	; (8007890 <TIM_OC4_SetConfig+0x98>)
 8007854:	4293      	cmp	r3, r2
 8007856:	d109      	bne.n	800786c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007858:	697b      	ldr	r3, [r7, #20]
 800785a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800785e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007860:	683b      	ldr	r3, [r7, #0]
 8007862:	695b      	ldr	r3, [r3, #20]
 8007864:	019b      	lsls	r3, r3, #6
 8007866:	697a      	ldr	r2, [r7, #20]
 8007868:	4313      	orrs	r3, r2
 800786a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	697a      	ldr	r2, [r7, #20]
 8007870:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	68fa      	ldr	r2, [r7, #12]
 8007876:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007878:	683b      	ldr	r3, [r7, #0]
 800787a:	685a      	ldr	r2, [r3, #4]
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	693a      	ldr	r2, [r7, #16]
 8007884:	621a      	str	r2, [r3, #32]
}
 8007886:	bf00      	nop
 8007888:	371c      	adds	r7, #28
 800788a:	46bd      	mov	sp, r7
 800788c:	bc80      	pop	{r7}
 800788e:	4770      	bx	lr
 8007890:	40012c00 	.word	0x40012c00

08007894 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007894:	b480      	push	{r7}
 8007896:	b087      	sub	sp, #28
 8007898:	af00      	add	r7, sp, #0
 800789a:	60f8      	str	r0, [r7, #12]
 800789c:	60b9      	str	r1, [r7, #8]
 800789e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	6a1b      	ldr	r3, [r3, #32]
 80078a4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	6a1b      	ldr	r3, [r3, #32]
 80078aa:	f023 0201 	bic.w	r2, r3, #1
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	699b      	ldr	r3, [r3, #24]
 80078b6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80078b8:	693b      	ldr	r3, [r7, #16]
 80078ba:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80078be:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	011b      	lsls	r3, r3, #4
 80078c4:	693a      	ldr	r2, [r7, #16]
 80078c6:	4313      	orrs	r3, r2
 80078c8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80078ca:	697b      	ldr	r3, [r7, #20]
 80078cc:	f023 030a 	bic.w	r3, r3, #10
 80078d0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80078d2:	697a      	ldr	r2, [r7, #20]
 80078d4:	68bb      	ldr	r3, [r7, #8]
 80078d6:	4313      	orrs	r3, r2
 80078d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	693a      	ldr	r2, [r7, #16]
 80078de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	697a      	ldr	r2, [r7, #20]
 80078e4:	621a      	str	r2, [r3, #32]
}
 80078e6:	bf00      	nop
 80078e8:	371c      	adds	r7, #28
 80078ea:	46bd      	mov	sp, r7
 80078ec:	bc80      	pop	{r7}
 80078ee:	4770      	bx	lr

080078f0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80078f0:	b480      	push	{r7}
 80078f2:	b087      	sub	sp, #28
 80078f4:	af00      	add	r7, sp, #0
 80078f6:	60f8      	str	r0, [r7, #12]
 80078f8:	60b9      	str	r1, [r7, #8]
 80078fa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	6a1b      	ldr	r3, [r3, #32]
 8007900:	f023 0210 	bic.w	r2, r3, #16
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	699b      	ldr	r3, [r3, #24]
 800790c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	6a1b      	ldr	r3, [r3, #32]
 8007912:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007914:	697b      	ldr	r3, [r7, #20]
 8007916:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800791a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	031b      	lsls	r3, r3, #12
 8007920:	697a      	ldr	r2, [r7, #20]
 8007922:	4313      	orrs	r3, r2
 8007924:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007926:	693b      	ldr	r3, [r7, #16]
 8007928:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800792c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800792e:	68bb      	ldr	r3, [r7, #8]
 8007930:	011b      	lsls	r3, r3, #4
 8007932:	693a      	ldr	r2, [r7, #16]
 8007934:	4313      	orrs	r3, r2
 8007936:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	697a      	ldr	r2, [r7, #20]
 800793c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	693a      	ldr	r2, [r7, #16]
 8007942:	621a      	str	r2, [r3, #32]
}
 8007944:	bf00      	nop
 8007946:	371c      	adds	r7, #28
 8007948:	46bd      	mov	sp, r7
 800794a:	bc80      	pop	{r7}
 800794c:	4770      	bx	lr

0800794e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800794e:	b480      	push	{r7}
 8007950:	b085      	sub	sp, #20
 8007952:	af00      	add	r7, sp, #0
 8007954:	6078      	str	r0, [r7, #4]
 8007956:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	689b      	ldr	r3, [r3, #8]
 800795c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007964:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007966:	683a      	ldr	r2, [r7, #0]
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	4313      	orrs	r3, r2
 800796c:	f043 0307 	orr.w	r3, r3, #7
 8007970:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	68fa      	ldr	r2, [r7, #12]
 8007976:	609a      	str	r2, [r3, #8]
}
 8007978:	bf00      	nop
 800797a:	3714      	adds	r7, #20
 800797c:	46bd      	mov	sp, r7
 800797e:	bc80      	pop	{r7}
 8007980:	4770      	bx	lr

08007982 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007982:	b480      	push	{r7}
 8007984:	b087      	sub	sp, #28
 8007986:	af00      	add	r7, sp, #0
 8007988:	60f8      	str	r0, [r7, #12]
 800798a:	60b9      	str	r1, [r7, #8]
 800798c:	607a      	str	r2, [r7, #4]
 800798e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	689b      	ldr	r3, [r3, #8]
 8007994:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007996:	697b      	ldr	r3, [r7, #20]
 8007998:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800799c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800799e:	683b      	ldr	r3, [r7, #0]
 80079a0:	021a      	lsls	r2, r3, #8
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	431a      	orrs	r2, r3
 80079a6:	68bb      	ldr	r3, [r7, #8]
 80079a8:	4313      	orrs	r3, r2
 80079aa:	697a      	ldr	r2, [r7, #20]
 80079ac:	4313      	orrs	r3, r2
 80079ae:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	697a      	ldr	r2, [r7, #20]
 80079b4:	609a      	str	r2, [r3, #8]
}
 80079b6:	bf00      	nop
 80079b8:	371c      	adds	r7, #28
 80079ba:	46bd      	mov	sp, r7
 80079bc:	bc80      	pop	{r7}
 80079be:	4770      	bx	lr

080079c0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80079c0:	b480      	push	{r7}
 80079c2:	b087      	sub	sp, #28
 80079c4:	af00      	add	r7, sp, #0
 80079c6:	60f8      	str	r0, [r7, #12]
 80079c8:	60b9      	str	r1, [r7, #8]
 80079ca:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80079cc:	68bb      	ldr	r3, [r7, #8]
 80079ce:	f003 031f 	and.w	r3, r3, #31
 80079d2:	2201      	movs	r2, #1
 80079d4:	fa02 f303 	lsl.w	r3, r2, r3
 80079d8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	6a1a      	ldr	r2, [r3, #32]
 80079de:	697b      	ldr	r3, [r7, #20]
 80079e0:	43db      	mvns	r3, r3
 80079e2:	401a      	ands	r2, r3
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	6a1a      	ldr	r2, [r3, #32]
 80079ec:	68bb      	ldr	r3, [r7, #8]
 80079ee:	f003 031f 	and.w	r3, r3, #31
 80079f2:	6879      	ldr	r1, [r7, #4]
 80079f4:	fa01 f303 	lsl.w	r3, r1, r3
 80079f8:	431a      	orrs	r2, r3
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	621a      	str	r2, [r3, #32]
}
 80079fe:	bf00      	nop
 8007a00:	371c      	adds	r7, #28
 8007a02:	46bd      	mov	sp, r7
 8007a04:	bc80      	pop	{r7}
 8007a06:	4770      	bx	lr

08007a08 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007a08:	b480      	push	{r7}
 8007a0a:	b085      	sub	sp, #20
 8007a0c:	af00      	add	r7, sp, #0
 8007a0e:	6078      	str	r0, [r7, #4]
 8007a10:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007a18:	2b01      	cmp	r3, #1
 8007a1a:	d101      	bne.n	8007a20 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007a1c:	2302      	movs	r3, #2
 8007a1e:	e046      	b.n	8007aae <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	2201      	movs	r2, #1
 8007a24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	2202      	movs	r2, #2
 8007a2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	685b      	ldr	r3, [r3, #4]
 8007a36:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	689b      	ldr	r3, [r3, #8]
 8007a3e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a46:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007a48:	683b      	ldr	r3, [r7, #0]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	68fa      	ldr	r2, [r7, #12]
 8007a4e:	4313      	orrs	r3, r2
 8007a50:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	68fa      	ldr	r2, [r7, #12]
 8007a58:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	4a16      	ldr	r2, [pc, #88]	; (8007ab8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8007a60:	4293      	cmp	r3, r2
 8007a62:	d00e      	beq.n	8007a82 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007a6c:	d009      	beq.n	8007a82 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	4a12      	ldr	r2, [pc, #72]	; (8007abc <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8007a74:	4293      	cmp	r3, r2
 8007a76:	d004      	beq.n	8007a82 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	4a10      	ldr	r2, [pc, #64]	; (8007ac0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8007a7e:	4293      	cmp	r3, r2
 8007a80:	d10c      	bne.n	8007a9c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007a82:	68bb      	ldr	r3, [r7, #8]
 8007a84:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007a88:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007a8a:	683b      	ldr	r3, [r7, #0]
 8007a8c:	685b      	ldr	r3, [r3, #4]
 8007a8e:	68ba      	ldr	r2, [r7, #8]
 8007a90:	4313      	orrs	r3, r2
 8007a92:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	68ba      	ldr	r2, [r7, #8]
 8007a9a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	2201      	movs	r2, #1
 8007aa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	2200      	movs	r2, #0
 8007aa8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007aac:	2300      	movs	r3, #0
}
 8007aae:	4618      	mov	r0, r3
 8007ab0:	3714      	adds	r7, #20
 8007ab2:	46bd      	mov	sp, r7
 8007ab4:	bc80      	pop	{r7}
 8007ab6:	4770      	bx	lr
 8007ab8:	40012c00 	.word	0x40012c00
 8007abc:	40000400 	.word	0x40000400
 8007ac0:	40000800 	.word	0x40000800

08007ac4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007ac4:	b480      	push	{r7}
 8007ac6:	b083      	sub	sp, #12
 8007ac8:	af00      	add	r7, sp, #0
 8007aca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007acc:	bf00      	nop
 8007ace:	370c      	adds	r7, #12
 8007ad0:	46bd      	mov	sp, r7
 8007ad2:	bc80      	pop	{r7}
 8007ad4:	4770      	bx	lr

08007ad6 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007ad6:	b480      	push	{r7}
 8007ad8:	b083      	sub	sp, #12
 8007ada:	af00      	add	r7, sp, #0
 8007adc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007ade:	bf00      	nop
 8007ae0:	370c      	adds	r7, #12
 8007ae2:	46bd      	mov	sp, r7
 8007ae4:	bc80      	pop	{r7}
 8007ae6:	4770      	bx	lr

08007ae8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007ae8:	b580      	push	{r7, lr}
 8007aea:	b082      	sub	sp, #8
 8007aec:	af00      	add	r7, sp, #0
 8007aee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d101      	bne.n	8007afa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007af6:	2301      	movs	r3, #1
 8007af8:	e03f      	b.n	8007b7a <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007b00:	b2db      	uxtb	r3, r3
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d106      	bne.n	8007b14 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	2200      	movs	r2, #0
 8007b0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007b0e:	6878      	ldr	r0, [r7, #4]
 8007b10:	f7fc fe64 	bl	80047dc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	2224      	movs	r2, #36	; 0x24
 8007b18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	68da      	ldr	r2, [r3, #12]
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007b2a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007b2c:	6878      	ldr	r0, [r7, #4]
 8007b2e:	f000 fc85 	bl	800843c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	691a      	ldr	r2, [r3, #16]
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007b40:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	695a      	ldr	r2, [r3, #20]
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007b50:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	68da      	ldr	r2, [r3, #12]
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007b60:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	2200      	movs	r2, #0
 8007b66:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	2220      	movs	r2, #32
 8007b6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	2220      	movs	r2, #32
 8007b74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007b78:	2300      	movs	r3, #0
}
 8007b7a:	4618      	mov	r0, r3
 8007b7c:	3708      	adds	r7, #8
 8007b7e:	46bd      	mov	sp, r7
 8007b80:	bd80      	pop	{r7, pc}

08007b82 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007b82:	b580      	push	{r7, lr}
 8007b84:	b08a      	sub	sp, #40	; 0x28
 8007b86:	af02      	add	r7, sp, #8
 8007b88:	60f8      	str	r0, [r7, #12]
 8007b8a:	60b9      	str	r1, [r7, #8]
 8007b8c:	603b      	str	r3, [r7, #0]
 8007b8e:	4613      	mov	r3, r2
 8007b90:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007b92:	2300      	movs	r3, #0
 8007b94:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007b9c:	b2db      	uxtb	r3, r3
 8007b9e:	2b20      	cmp	r3, #32
 8007ba0:	d17c      	bne.n	8007c9c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007ba2:	68bb      	ldr	r3, [r7, #8]
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d002      	beq.n	8007bae <HAL_UART_Transmit+0x2c>
 8007ba8:	88fb      	ldrh	r3, [r7, #6]
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d101      	bne.n	8007bb2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007bae:	2301      	movs	r3, #1
 8007bb0:	e075      	b.n	8007c9e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007bb8:	2b01      	cmp	r3, #1
 8007bba:	d101      	bne.n	8007bc0 <HAL_UART_Transmit+0x3e>
 8007bbc:	2302      	movs	r3, #2
 8007bbe:	e06e      	b.n	8007c9e <HAL_UART_Transmit+0x11c>
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	2201      	movs	r2, #1
 8007bc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	2200      	movs	r2, #0
 8007bcc:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	2221      	movs	r2, #33	; 0x21
 8007bd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007bd6:	f7fd f89d 	bl	8004d14 <HAL_GetTick>
 8007bda:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	88fa      	ldrh	r2, [r7, #6]
 8007be0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	88fa      	ldrh	r2, [r7, #6]
 8007be6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	689b      	ldr	r3, [r3, #8]
 8007bec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007bf0:	d108      	bne.n	8007c04 <HAL_UART_Transmit+0x82>
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	691b      	ldr	r3, [r3, #16]
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d104      	bne.n	8007c04 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8007bfa:	2300      	movs	r3, #0
 8007bfc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8007bfe:	68bb      	ldr	r3, [r7, #8]
 8007c00:	61bb      	str	r3, [r7, #24]
 8007c02:	e003      	b.n	8007c0c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8007c04:	68bb      	ldr	r3, [r7, #8]
 8007c06:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007c08:	2300      	movs	r3, #0
 8007c0a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	2200      	movs	r2, #0
 8007c10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8007c14:	e02a      	b.n	8007c6c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007c16:	683b      	ldr	r3, [r7, #0]
 8007c18:	9300      	str	r3, [sp, #0]
 8007c1a:	697b      	ldr	r3, [r7, #20]
 8007c1c:	2200      	movs	r2, #0
 8007c1e:	2180      	movs	r1, #128	; 0x80
 8007c20:	68f8      	ldr	r0, [r7, #12]
 8007c22:	f000 fa38 	bl	8008096 <UART_WaitOnFlagUntilTimeout>
 8007c26:	4603      	mov	r3, r0
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d001      	beq.n	8007c30 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8007c2c:	2303      	movs	r3, #3
 8007c2e:	e036      	b.n	8007c9e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8007c30:	69fb      	ldr	r3, [r7, #28]
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d10b      	bne.n	8007c4e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007c36:	69bb      	ldr	r3, [r7, #24]
 8007c38:	881b      	ldrh	r3, [r3, #0]
 8007c3a:	461a      	mov	r2, r3
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007c44:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8007c46:	69bb      	ldr	r3, [r7, #24]
 8007c48:	3302      	adds	r3, #2
 8007c4a:	61bb      	str	r3, [r7, #24]
 8007c4c:	e007      	b.n	8007c5e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007c4e:	69fb      	ldr	r3, [r7, #28]
 8007c50:	781a      	ldrb	r2, [r3, #0]
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007c58:	69fb      	ldr	r3, [r7, #28]
 8007c5a:	3301      	adds	r3, #1
 8007c5c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007c62:	b29b      	uxth	r3, r3
 8007c64:	3b01      	subs	r3, #1
 8007c66:	b29a      	uxth	r2, r3
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007c70:	b29b      	uxth	r3, r3
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d1cf      	bne.n	8007c16 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007c76:	683b      	ldr	r3, [r7, #0]
 8007c78:	9300      	str	r3, [sp, #0]
 8007c7a:	697b      	ldr	r3, [r7, #20]
 8007c7c:	2200      	movs	r2, #0
 8007c7e:	2140      	movs	r1, #64	; 0x40
 8007c80:	68f8      	ldr	r0, [r7, #12]
 8007c82:	f000 fa08 	bl	8008096 <UART_WaitOnFlagUntilTimeout>
 8007c86:	4603      	mov	r3, r0
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d001      	beq.n	8007c90 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8007c8c:	2303      	movs	r3, #3
 8007c8e:	e006      	b.n	8007c9e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	2220      	movs	r2, #32
 8007c94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8007c98:	2300      	movs	r3, #0
 8007c9a:	e000      	b.n	8007c9e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8007c9c:	2302      	movs	r3, #2
  }
}
 8007c9e:	4618      	mov	r0, r3
 8007ca0:	3720      	adds	r7, #32
 8007ca2:	46bd      	mov	sp, r7
 8007ca4:	bd80      	pop	{r7, pc}

08007ca6 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007ca6:	b580      	push	{r7, lr}
 8007ca8:	b084      	sub	sp, #16
 8007caa:	af00      	add	r7, sp, #0
 8007cac:	60f8      	str	r0, [r7, #12]
 8007cae:	60b9      	str	r1, [r7, #8]
 8007cb0:	4613      	mov	r3, r2
 8007cb2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007cba:	b2db      	uxtb	r3, r3
 8007cbc:	2b20      	cmp	r3, #32
 8007cbe:	d11d      	bne.n	8007cfc <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8007cc0:	68bb      	ldr	r3, [r7, #8]
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d002      	beq.n	8007ccc <HAL_UART_Receive_IT+0x26>
 8007cc6:	88fb      	ldrh	r3, [r7, #6]
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d101      	bne.n	8007cd0 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8007ccc:	2301      	movs	r3, #1
 8007cce:	e016      	b.n	8007cfe <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007cd6:	2b01      	cmp	r3, #1
 8007cd8:	d101      	bne.n	8007cde <HAL_UART_Receive_IT+0x38>
 8007cda:	2302      	movs	r3, #2
 8007cdc:	e00f      	b.n	8007cfe <HAL_UART_Receive_IT+0x58>
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	2201      	movs	r2, #1
 8007ce2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	2200      	movs	r2, #0
 8007cea:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8007cec:	88fb      	ldrh	r3, [r7, #6]
 8007cee:	461a      	mov	r2, r3
 8007cf0:	68b9      	ldr	r1, [r7, #8]
 8007cf2:	68f8      	ldr	r0, [r7, #12]
 8007cf4:	f000 fa19 	bl	800812a <UART_Start_Receive_IT>
 8007cf8:	4603      	mov	r3, r0
 8007cfa:	e000      	b.n	8007cfe <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8007cfc:	2302      	movs	r3, #2
  }
}
 8007cfe:	4618      	mov	r0, r3
 8007d00:	3710      	adds	r7, #16
 8007d02:	46bd      	mov	sp, r7
 8007d04:	bd80      	pop	{r7, pc}
	...

08007d08 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007d08:	b580      	push	{r7, lr}
 8007d0a:	b08a      	sub	sp, #40	; 0x28
 8007d0c:	af00      	add	r7, sp, #0
 8007d0e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	68db      	ldr	r3, [r3, #12]
 8007d1e:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	695b      	ldr	r3, [r3, #20]
 8007d26:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8007d28:	2300      	movs	r3, #0
 8007d2a:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8007d2c:	2300      	movs	r3, #0
 8007d2e:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d32:	f003 030f 	and.w	r3, r3, #15
 8007d36:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8007d38:	69bb      	ldr	r3, [r7, #24]
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d10d      	bne.n	8007d5a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d40:	f003 0320 	and.w	r3, r3, #32
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d008      	beq.n	8007d5a <HAL_UART_IRQHandler+0x52>
 8007d48:	6a3b      	ldr	r3, [r7, #32]
 8007d4a:	f003 0320 	and.w	r3, r3, #32
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d003      	beq.n	8007d5a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8007d52:	6878      	ldr	r0, [r7, #4]
 8007d54:	f000 fac9 	bl	80082ea <UART_Receive_IT>
      return;
 8007d58:	e17b      	b.n	8008052 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007d5a:	69bb      	ldr	r3, [r7, #24]
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	f000 80b1 	beq.w	8007ec4 <HAL_UART_IRQHandler+0x1bc>
 8007d62:	69fb      	ldr	r3, [r7, #28]
 8007d64:	f003 0301 	and.w	r3, r3, #1
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d105      	bne.n	8007d78 <HAL_UART_IRQHandler+0x70>
 8007d6c:	6a3b      	ldr	r3, [r7, #32]
 8007d6e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	f000 80a6 	beq.w	8007ec4 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007d78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d7a:	f003 0301 	and.w	r3, r3, #1
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d00a      	beq.n	8007d98 <HAL_UART_IRQHandler+0x90>
 8007d82:	6a3b      	ldr	r3, [r7, #32]
 8007d84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d005      	beq.n	8007d98 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d90:	f043 0201 	orr.w	r2, r3, #1
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d9a:	f003 0304 	and.w	r3, r3, #4
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d00a      	beq.n	8007db8 <HAL_UART_IRQHandler+0xb0>
 8007da2:	69fb      	ldr	r3, [r7, #28]
 8007da4:	f003 0301 	and.w	r3, r3, #1
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d005      	beq.n	8007db8 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007db0:	f043 0202 	orr.w	r2, r3, #2
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dba:	f003 0302 	and.w	r3, r3, #2
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d00a      	beq.n	8007dd8 <HAL_UART_IRQHandler+0xd0>
 8007dc2:	69fb      	ldr	r3, [r7, #28]
 8007dc4:	f003 0301 	and.w	r3, r3, #1
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d005      	beq.n	8007dd8 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007dd0:	f043 0204 	orr.w	r2, r3, #4
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8007dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dda:	f003 0308 	and.w	r3, r3, #8
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d00f      	beq.n	8007e02 <HAL_UART_IRQHandler+0xfa>
 8007de2:	6a3b      	ldr	r3, [r7, #32]
 8007de4:	f003 0320 	and.w	r3, r3, #32
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d104      	bne.n	8007df6 <HAL_UART_IRQHandler+0xee>
 8007dec:	69fb      	ldr	r3, [r7, #28]
 8007dee:	f003 0301 	and.w	r3, r3, #1
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d005      	beq.n	8007e02 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007dfa:	f043 0208 	orr.w	r2, r3, #8
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	f000 811e 	beq.w	8008048 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e0e:	f003 0320 	and.w	r3, r3, #32
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d007      	beq.n	8007e26 <HAL_UART_IRQHandler+0x11e>
 8007e16:	6a3b      	ldr	r3, [r7, #32]
 8007e18:	f003 0320 	and.w	r3, r3, #32
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d002      	beq.n	8007e26 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8007e20:	6878      	ldr	r0, [r7, #4]
 8007e22:	f000 fa62 	bl	80082ea <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	695b      	ldr	r3, [r3, #20]
 8007e2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	bf14      	ite	ne
 8007e34:	2301      	movne	r3, #1
 8007e36:	2300      	moveq	r3, #0
 8007e38:	b2db      	uxtb	r3, r3
 8007e3a:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e40:	f003 0308 	and.w	r3, r3, #8
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d102      	bne.n	8007e4e <HAL_UART_IRQHandler+0x146>
 8007e48:	697b      	ldr	r3, [r7, #20]
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d031      	beq.n	8007eb2 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007e4e:	6878      	ldr	r0, [r7, #4]
 8007e50:	f000 f9a4 	bl	800819c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	695b      	ldr	r3, [r3, #20]
 8007e5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d023      	beq.n	8007eaa <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	695a      	ldr	r2, [r3, #20]
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007e70:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d013      	beq.n	8007ea2 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e7e:	4a76      	ldr	r2, [pc, #472]	; (8008058 <HAL_UART_IRQHandler+0x350>)
 8007e80:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e86:	4618      	mov	r0, r3
 8007e88:	f7fd f88c 	bl	8004fa4 <HAL_DMA_Abort_IT>
 8007e8c:	4603      	mov	r3, r0
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d016      	beq.n	8007ec0 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e98:	687a      	ldr	r2, [r7, #4]
 8007e9a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007e9c:	4610      	mov	r0, r2
 8007e9e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007ea0:	e00e      	b.n	8007ec0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007ea2:	6878      	ldr	r0, [r7, #4]
 8007ea4:	f000 f8e3 	bl	800806e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007ea8:	e00a      	b.n	8007ec0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007eaa:	6878      	ldr	r0, [r7, #4]
 8007eac:	f000 f8df 	bl	800806e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007eb0:	e006      	b.n	8007ec0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007eb2:	6878      	ldr	r0, [r7, #4]
 8007eb4:	f000 f8db 	bl	800806e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	2200      	movs	r2, #0
 8007ebc:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8007ebe:	e0c3      	b.n	8008048 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007ec0:	bf00      	nop
    return;
 8007ec2:	e0c1      	b.n	8008048 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ec8:	2b01      	cmp	r3, #1
 8007eca:	f040 80a1 	bne.w	8008010 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8007ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ed0:	f003 0310 	and.w	r3, r3, #16
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	f000 809b 	beq.w	8008010 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8007eda:	6a3b      	ldr	r3, [r7, #32]
 8007edc:	f003 0310 	and.w	r3, r3, #16
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	f000 8095 	beq.w	8008010 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007ee6:	2300      	movs	r3, #0
 8007ee8:	60fb      	str	r3, [r7, #12]
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	60fb      	str	r3, [r7, #12]
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	685b      	ldr	r3, [r3, #4]
 8007ef8:	60fb      	str	r3, [r7, #12]
 8007efa:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	695b      	ldr	r3, [r3, #20]
 8007f02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d04e      	beq.n	8007fa8 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	685b      	ldr	r3, [r3, #4]
 8007f12:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8007f14:	8a3b      	ldrh	r3, [r7, #16]
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	f000 8098 	beq.w	800804c <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007f20:	8a3a      	ldrh	r2, [r7, #16]
 8007f22:	429a      	cmp	r2, r3
 8007f24:	f080 8092 	bcs.w	800804c <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	8a3a      	ldrh	r2, [r7, #16]
 8007f2c:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f32:	699b      	ldr	r3, [r3, #24]
 8007f34:	2b20      	cmp	r3, #32
 8007f36:	d02b      	beq.n	8007f90 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	68da      	ldr	r2, [r3, #12]
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007f46:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	695a      	ldr	r2, [r3, #20]
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	f022 0201 	bic.w	r2, r2, #1
 8007f56:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	695a      	ldr	r2, [r3, #20]
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007f66:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	2220      	movs	r2, #32
 8007f6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	2200      	movs	r2, #0
 8007f74:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	68da      	ldr	r2, [r3, #12]
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	f022 0210 	bic.w	r2, r2, #16
 8007f84:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f8a:	4618      	mov	r0, r3
 8007f8c:	f7fc ffcf 	bl	8004f2e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007f98:	b29b      	uxth	r3, r3
 8007f9a:	1ad3      	subs	r3, r2, r3
 8007f9c:	b29b      	uxth	r3, r3
 8007f9e:	4619      	mov	r1, r3
 8007fa0:	6878      	ldr	r0, [r7, #4]
 8007fa2:	f000 f86d 	bl	8008080 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8007fa6:	e051      	b.n	800804c <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007fb0:	b29b      	uxth	r3, r3
 8007fb2:	1ad3      	subs	r3, r2, r3
 8007fb4:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007fba:	b29b      	uxth	r3, r3
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d047      	beq.n	8008050 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8007fc0:	8a7b      	ldrh	r3, [r7, #18]
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d044      	beq.n	8008050 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	68da      	ldr	r2, [r3, #12]
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8007fd4:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	695a      	ldr	r2, [r3, #20]
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	f022 0201 	bic.w	r2, r2, #1
 8007fe4:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	2220      	movs	r2, #32
 8007fea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	2200      	movs	r2, #0
 8007ff2:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	68da      	ldr	r2, [r3, #12]
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	f022 0210 	bic.w	r2, r2, #16
 8008002:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008004:	8a7b      	ldrh	r3, [r7, #18]
 8008006:	4619      	mov	r1, r3
 8008008:	6878      	ldr	r0, [r7, #4]
 800800a:	f000 f839 	bl	8008080 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800800e:	e01f      	b.n	8008050 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008012:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008016:	2b00      	cmp	r3, #0
 8008018:	d008      	beq.n	800802c <HAL_UART_IRQHandler+0x324>
 800801a:	6a3b      	ldr	r3, [r7, #32]
 800801c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008020:	2b00      	cmp	r3, #0
 8008022:	d003      	beq.n	800802c <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8008024:	6878      	ldr	r0, [r7, #4]
 8008026:	f000 f8f9 	bl	800821c <UART_Transmit_IT>
    return;
 800802a:	e012      	b.n	8008052 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800802c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800802e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008032:	2b00      	cmp	r3, #0
 8008034:	d00d      	beq.n	8008052 <HAL_UART_IRQHandler+0x34a>
 8008036:	6a3b      	ldr	r3, [r7, #32]
 8008038:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800803c:	2b00      	cmp	r3, #0
 800803e:	d008      	beq.n	8008052 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8008040:	6878      	ldr	r0, [r7, #4]
 8008042:	f000 f93a 	bl	80082ba <UART_EndTransmit_IT>
    return;
 8008046:	e004      	b.n	8008052 <HAL_UART_IRQHandler+0x34a>
    return;
 8008048:	bf00      	nop
 800804a:	e002      	b.n	8008052 <HAL_UART_IRQHandler+0x34a>
      return;
 800804c:	bf00      	nop
 800804e:	e000      	b.n	8008052 <HAL_UART_IRQHandler+0x34a>
      return;
 8008050:	bf00      	nop
  }
}
 8008052:	3728      	adds	r7, #40	; 0x28
 8008054:	46bd      	mov	sp, r7
 8008056:	bd80      	pop	{r7, pc}
 8008058:	080081f5 	.word	0x080081f5

0800805c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800805c:	b480      	push	{r7}
 800805e:	b083      	sub	sp, #12
 8008060:	af00      	add	r7, sp, #0
 8008062:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8008064:	bf00      	nop
 8008066:	370c      	adds	r7, #12
 8008068:	46bd      	mov	sp, r7
 800806a:	bc80      	pop	{r7}
 800806c:	4770      	bx	lr

0800806e <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800806e:	b480      	push	{r7}
 8008070:	b083      	sub	sp, #12
 8008072:	af00      	add	r7, sp, #0
 8008074:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008076:	bf00      	nop
 8008078:	370c      	adds	r7, #12
 800807a:	46bd      	mov	sp, r7
 800807c:	bc80      	pop	{r7}
 800807e:	4770      	bx	lr

08008080 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008080:	b480      	push	{r7}
 8008082:	b083      	sub	sp, #12
 8008084:	af00      	add	r7, sp, #0
 8008086:	6078      	str	r0, [r7, #4]
 8008088:	460b      	mov	r3, r1
 800808a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800808c:	bf00      	nop
 800808e:	370c      	adds	r7, #12
 8008090:	46bd      	mov	sp, r7
 8008092:	bc80      	pop	{r7}
 8008094:	4770      	bx	lr

08008096 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8008096:	b580      	push	{r7, lr}
 8008098:	b084      	sub	sp, #16
 800809a:	af00      	add	r7, sp, #0
 800809c:	60f8      	str	r0, [r7, #12]
 800809e:	60b9      	str	r1, [r7, #8]
 80080a0:	603b      	str	r3, [r7, #0]
 80080a2:	4613      	mov	r3, r2
 80080a4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80080a6:	e02c      	b.n	8008102 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80080a8:	69bb      	ldr	r3, [r7, #24]
 80080aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080ae:	d028      	beq.n	8008102 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80080b0:	69bb      	ldr	r3, [r7, #24]
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d007      	beq.n	80080c6 <UART_WaitOnFlagUntilTimeout+0x30>
 80080b6:	f7fc fe2d 	bl	8004d14 <HAL_GetTick>
 80080ba:	4602      	mov	r2, r0
 80080bc:	683b      	ldr	r3, [r7, #0]
 80080be:	1ad3      	subs	r3, r2, r3
 80080c0:	69ba      	ldr	r2, [r7, #24]
 80080c2:	429a      	cmp	r2, r3
 80080c4:	d21d      	bcs.n	8008102 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	68da      	ldr	r2, [r3, #12]
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80080d4:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	695a      	ldr	r2, [r3, #20]
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	f022 0201 	bic.w	r2, r2, #1
 80080e4:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	2220      	movs	r2, #32
 80080ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	2220      	movs	r2, #32
 80080f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	2200      	movs	r2, #0
 80080fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80080fe:	2303      	movs	r3, #3
 8008100:	e00f      	b.n	8008122 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	681a      	ldr	r2, [r3, #0]
 8008108:	68bb      	ldr	r3, [r7, #8]
 800810a:	4013      	ands	r3, r2
 800810c:	68ba      	ldr	r2, [r7, #8]
 800810e:	429a      	cmp	r2, r3
 8008110:	bf0c      	ite	eq
 8008112:	2301      	moveq	r3, #1
 8008114:	2300      	movne	r3, #0
 8008116:	b2db      	uxtb	r3, r3
 8008118:	461a      	mov	r2, r3
 800811a:	79fb      	ldrb	r3, [r7, #7]
 800811c:	429a      	cmp	r2, r3
 800811e:	d0c3      	beq.n	80080a8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008120:	2300      	movs	r3, #0
}
 8008122:	4618      	mov	r0, r3
 8008124:	3710      	adds	r7, #16
 8008126:	46bd      	mov	sp, r7
 8008128:	bd80      	pop	{r7, pc}

0800812a <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800812a:	b480      	push	{r7}
 800812c:	b085      	sub	sp, #20
 800812e:	af00      	add	r7, sp, #0
 8008130:	60f8      	str	r0, [r7, #12]
 8008132:	60b9      	str	r1, [r7, #8]
 8008134:	4613      	mov	r3, r2
 8008136:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	68ba      	ldr	r2, [r7, #8]
 800813c:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	88fa      	ldrh	r2, [r7, #6]
 8008142:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	88fa      	ldrh	r2, [r7, #6]
 8008148:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	2200      	movs	r2, #0
 800814e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	2222      	movs	r2, #34	; 0x22
 8008154:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	2200      	movs	r2, #0
 800815c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	68da      	ldr	r2, [r3, #12]
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800816e:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	695a      	ldr	r2, [r3, #20]
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	f042 0201 	orr.w	r2, r2, #1
 800817e:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	68da      	ldr	r2, [r3, #12]
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	f042 0220 	orr.w	r2, r2, #32
 800818e:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008190:	2300      	movs	r3, #0
}
 8008192:	4618      	mov	r0, r3
 8008194:	3714      	adds	r7, #20
 8008196:	46bd      	mov	sp, r7
 8008198:	bc80      	pop	{r7}
 800819a:	4770      	bx	lr

0800819c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800819c:	b480      	push	{r7}
 800819e:	b083      	sub	sp, #12
 80081a0:	af00      	add	r7, sp, #0
 80081a2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	68da      	ldr	r2, [r3, #12]
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80081b2:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	695a      	ldr	r2, [r3, #20]
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	f022 0201 	bic.w	r2, r2, #1
 80081c2:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081c8:	2b01      	cmp	r3, #1
 80081ca:	d107      	bne.n	80081dc <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	68da      	ldr	r2, [r3, #12]
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	f022 0210 	bic.w	r2, r2, #16
 80081da:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	2220      	movs	r2, #32
 80081e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	2200      	movs	r2, #0
 80081e8:	631a      	str	r2, [r3, #48]	; 0x30
}
 80081ea:	bf00      	nop
 80081ec:	370c      	adds	r7, #12
 80081ee:	46bd      	mov	sp, r7
 80081f0:	bc80      	pop	{r7}
 80081f2:	4770      	bx	lr

080081f4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80081f4:	b580      	push	{r7, lr}
 80081f6:	b084      	sub	sp, #16
 80081f8:	af00      	add	r7, sp, #0
 80081fa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008200:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	2200      	movs	r2, #0
 8008206:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	2200      	movs	r2, #0
 800820c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800820e:	68f8      	ldr	r0, [r7, #12]
 8008210:	f7ff ff2d 	bl	800806e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008214:	bf00      	nop
 8008216:	3710      	adds	r7, #16
 8008218:	46bd      	mov	sp, r7
 800821a:	bd80      	pop	{r7, pc}

0800821c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800821c:	b480      	push	{r7}
 800821e:	b085      	sub	sp, #20
 8008220:	af00      	add	r7, sp, #0
 8008222:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800822a:	b2db      	uxtb	r3, r3
 800822c:	2b21      	cmp	r3, #33	; 0x21
 800822e:	d13e      	bne.n	80082ae <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	689b      	ldr	r3, [r3, #8]
 8008234:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008238:	d114      	bne.n	8008264 <UART_Transmit_IT+0x48>
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	691b      	ldr	r3, [r3, #16]
 800823e:	2b00      	cmp	r3, #0
 8008240:	d110      	bne.n	8008264 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	6a1b      	ldr	r3, [r3, #32]
 8008246:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	881b      	ldrh	r3, [r3, #0]
 800824c:	461a      	mov	r2, r3
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008256:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	6a1b      	ldr	r3, [r3, #32]
 800825c:	1c9a      	adds	r2, r3, #2
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	621a      	str	r2, [r3, #32]
 8008262:	e008      	b.n	8008276 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	6a1b      	ldr	r3, [r3, #32]
 8008268:	1c59      	adds	r1, r3, #1
 800826a:	687a      	ldr	r2, [r7, #4]
 800826c:	6211      	str	r1, [r2, #32]
 800826e:	781a      	ldrb	r2, [r3, #0]
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800827a:	b29b      	uxth	r3, r3
 800827c:	3b01      	subs	r3, #1
 800827e:	b29b      	uxth	r3, r3
 8008280:	687a      	ldr	r2, [r7, #4]
 8008282:	4619      	mov	r1, r3
 8008284:	84d1      	strh	r1, [r2, #38]	; 0x26
 8008286:	2b00      	cmp	r3, #0
 8008288:	d10f      	bne.n	80082aa <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	68da      	ldr	r2, [r3, #12]
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008298:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	68da      	ldr	r2, [r3, #12]
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80082a8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80082aa:	2300      	movs	r3, #0
 80082ac:	e000      	b.n	80082b0 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80082ae:	2302      	movs	r3, #2
  }
}
 80082b0:	4618      	mov	r0, r3
 80082b2:	3714      	adds	r7, #20
 80082b4:	46bd      	mov	sp, r7
 80082b6:	bc80      	pop	{r7}
 80082b8:	4770      	bx	lr

080082ba <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80082ba:	b580      	push	{r7, lr}
 80082bc:	b082      	sub	sp, #8
 80082be:	af00      	add	r7, sp, #0
 80082c0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	68da      	ldr	r2, [r3, #12]
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80082d0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	2220      	movs	r2, #32
 80082d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80082da:	6878      	ldr	r0, [r7, #4]
 80082dc:	f7ff febe 	bl	800805c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80082e0:	2300      	movs	r3, #0
}
 80082e2:	4618      	mov	r0, r3
 80082e4:	3708      	adds	r7, #8
 80082e6:	46bd      	mov	sp, r7
 80082e8:	bd80      	pop	{r7, pc}

080082ea <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80082ea:	b580      	push	{r7, lr}
 80082ec:	b086      	sub	sp, #24
 80082ee:	af00      	add	r7, sp, #0
 80082f0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80082f8:	b2db      	uxtb	r3, r3
 80082fa:	2b22      	cmp	r3, #34	; 0x22
 80082fc:	f040 8099 	bne.w	8008432 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	689b      	ldr	r3, [r3, #8]
 8008304:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008308:	d117      	bne.n	800833a <UART_Receive_IT+0x50>
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	691b      	ldr	r3, [r3, #16]
 800830e:	2b00      	cmp	r3, #0
 8008310:	d113      	bne.n	800833a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8008312:	2300      	movs	r3, #0
 8008314:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800831a:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	685b      	ldr	r3, [r3, #4]
 8008322:	b29b      	uxth	r3, r3
 8008324:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008328:	b29a      	uxth	r2, r3
 800832a:	693b      	ldr	r3, [r7, #16]
 800832c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008332:	1c9a      	adds	r2, r3, #2
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	629a      	str	r2, [r3, #40]	; 0x28
 8008338:	e026      	b.n	8008388 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800833e:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8008340:	2300      	movs	r3, #0
 8008342:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	689b      	ldr	r3, [r3, #8]
 8008348:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800834c:	d007      	beq.n	800835e <UART_Receive_IT+0x74>
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	689b      	ldr	r3, [r3, #8]
 8008352:	2b00      	cmp	r3, #0
 8008354:	d10a      	bne.n	800836c <UART_Receive_IT+0x82>
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	691b      	ldr	r3, [r3, #16]
 800835a:	2b00      	cmp	r3, #0
 800835c:	d106      	bne.n	800836c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	685b      	ldr	r3, [r3, #4]
 8008364:	b2da      	uxtb	r2, r3
 8008366:	697b      	ldr	r3, [r7, #20]
 8008368:	701a      	strb	r2, [r3, #0]
 800836a:	e008      	b.n	800837e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	685b      	ldr	r3, [r3, #4]
 8008372:	b2db      	uxtb	r3, r3
 8008374:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008378:	b2da      	uxtb	r2, r3
 800837a:	697b      	ldr	r3, [r7, #20]
 800837c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008382:	1c5a      	adds	r2, r3, #1
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800838c:	b29b      	uxth	r3, r3
 800838e:	3b01      	subs	r3, #1
 8008390:	b29b      	uxth	r3, r3
 8008392:	687a      	ldr	r2, [r7, #4]
 8008394:	4619      	mov	r1, r3
 8008396:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8008398:	2b00      	cmp	r3, #0
 800839a:	d148      	bne.n	800842e <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	68da      	ldr	r2, [r3, #12]
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	f022 0220 	bic.w	r2, r2, #32
 80083aa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	68da      	ldr	r2, [r3, #12]
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80083ba:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	695a      	ldr	r2, [r3, #20]
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	f022 0201 	bic.w	r2, r2, #1
 80083ca:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	2220      	movs	r2, #32
 80083d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083d8:	2b01      	cmp	r3, #1
 80083da:	d123      	bne.n	8008424 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	2200      	movs	r2, #0
 80083e0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	68da      	ldr	r2, [r3, #12]
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	f022 0210 	bic.w	r2, r2, #16
 80083f0:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	f003 0310 	and.w	r3, r3, #16
 80083fc:	2b10      	cmp	r3, #16
 80083fe:	d10a      	bne.n	8008416 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008400:	2300      	movs	r3, #0
 8008402:	60fb      	str	r3, [r7, #12]
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	60fb      	str	r3, [r7, #12]
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	685b      	ldr	r3, [r3, #4]
 8008412:	60fb      	str	r3, [r7, #12]
 8008414:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800841a:	4619      	mov	r1, r3
 800841c:	6878      	ldr	r0, [r7, #4]
 800841e:	f7ff fe2f 	bl	8008080 <HAL_UARTEx_RxEventCallback>
 8008422:	e002      	b.n	800842a <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8008424:	6878      	ldr	r0, [r7, #4]
 8008426:	f7fa ffa1 	bl	800336c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800842a:	2300      	movs	r3, #0
 800842c:	e002      	b.n	8008434 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 800842e:	2300      	movs	r3, #0
 8008430:	e000      	b.n	8008434 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8008432:	2302      	movs	r3, #2
  }
}
 8008434:	4618      	mov	r0, r3
 8008436:	3718      	adds	r7, #24
 8008438:	46bd      	mov	sp, r7
 800843a:	bd80      	pop	{r7, pc}

0800843c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800843c:	b580      	push	{r7, lr}
 800843e:	b084      	sub	sp, #16
 8008440:	af00      	add	r7, sp, #0
 8008442:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	691b      	ldr	r3, [r3, #16]
 800844a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	68da      	ldr	r2, [r3, #12]
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	430a      	orrs	r2, r1
 8008458:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	689a      	ldr	r2, [r3, #8]
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	691b      	ldr	r3, [r3, #16]
 8008462:	431a      	orrs	r2, r3
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	695b      	ldr	r3, [r3, #20]
 8008468:	4313      	orrs	r3, r2
 800846a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	68db      	ldr	r3, [r3, #12]
 8008472:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8008476:	f023 030c 	bic.w	r3, r3, #12
 800847a:	687a      	ldr	r2, [r7, #4]
 800847c:	6812      	ldr	r2, [r2, #0]
 800847e:	68b9      	ldr	r1, [r7, #8]
 8008480:	430b      	orrs	r3, r1
 8008482:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	695b      	ldr	r3, [r3, #20]
 800848a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	699a      	ldr	r2, [r3, #24]
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	430a      	orrs	r2, r1
 8008498:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	4a2c      	ldr	r2, [pc, #176]	; (8008550 <UART_SetConfig+0x114>)
 80084a0:	4293      	cmp	r3, r2
 80084a2:	d103      	bne.n	80084ac <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80084a4:	f7fe fb60 	bl	8006b68 <HAL_RCC_GetPCLK2Freq>
 80084a8:	60f8      	str	r0, [r7, #12]
 80084aa:	e002      	b.n	80084b2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80084ac:	f7fe fb48 	bl	8006b40 <HAL_RCC_GetPCLK1Freq>
 80084b0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80084b2:	68fa      	ldr	r2, [r7, #12]
 80084b4:	4613      	mov	r3, r2
 80084b6:	009b      	lsls	r3, r3, #2
 80084b8:	4413      	add	r3, r2
 80084ba:	009a      	lsls	r2, r3, #2
 80084bc:	441a      	add	r2, r3
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	685b      	ldr	r3, [r3, #4]
 80084c2:	009b      	lsls	r3, r3, #2
 80084c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80084c8:	4a22      	ldr	r2, [pc, #136]	; (8008554 <UART_SetConfig+0x118>)
 80084ca:	fba2 2303 	umull	r2, r3, r2, r3
 80084ce:	095b      	lsrs	r3, r3, #5
 80084d0:	0119      	lsls	r1, r3, #4
 80084d2:	68fa      	ldr	r2, [r7, #12]
 80084d4:	4613      	mov	r3, r2
 80084d6:	009b      	lsls	r3, r3, #2
 80084d8:	4413      	add	r3, r2
 80084da:	009a      	lsls	r2, r3, #2
 80084dc:	441a      	add	r2, r3
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	685b      	ldr	r3, [r3, #4]
 80084e2:	009b      	lsls	r3, r3, #2
 80084e4:	fbb2 f2f3 	udiv	r2, r2, r3
 80084e8:	4b1a      	ldr	r3, [pc, #104]	; (8008554 <UART_SetConfig+0x118>)
 80084ea:	fba3 0302 	umull	r0, r3, r3, r2
 80084ee:	095b      	lsrs	r3, r3, #5
 80084f0:	2064      	movs	r0, #100	; 0x64
 80084f2:	fb00 f303 	mul.w	r3, r0, r3
 80084f6:	1ad3      	subs	r3, r2, r3
 80084f8:	011b      	lsls	r3, r3, #4
 80084fa:	3332      	adds	r3, #50	; 0x32
 80084fc:	4a15      	ldr	r2, [pc, #84]	; (8008554 <UART_SetConfig+0x118>)
 80084fe:	fba2 2303 	umull	r2, r3, r2, r3
 8008502:	095b      	lsrs	r3, r3, #5
 8008504:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008508:	4419      	add	r1, r3
 800850a:	68fa      	ldr	r2, [r7, #12]
 800850c:	4613      	mov	r3, r2
 800850e:	009b      	lsls	r3, r3, #2
 8008510:	4413      	add	r3, r2
 8008512:	009a      	lsls	r2, r3, #2
 8008514:	441a      	add	r2, r3
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	685b      	ldr	r3, [r3, #4]
 800851a:	009b      	lsls	r3, r3, #2
 800851c:	fbb2 f2f3 	udiv	r2, r2, r3
 8008520:	4b0c      	ldr	r3, [pc, #48]	; (8008554 <UART_SetConfig+0x118>)
 8008522:	fba3 0302 	umull	r0, r3, r3, r2
 8008526:	095b      	lsrs	r3, r3, #5
 8008528:	2064      	movs	r0, #100	; 0x64
 800852a:	fb00 f303 	mul.w	r3, r0, r3
 800852e:	1ad3      	subs	r3, r2, r3
 8008530:	011b      	lsls	r3, r3, #4
 8008532:	3332      	adds	r3, #50	; 0x32
 8008534:	4a07      	ldr	r2, [pc, #28]	; (8008554 <UART_SetConfig+0x118>)
 8008536:	fba2 2303 	umull	r2, r3, r2, r3
 800853a:	095b      	lsrs	r3, r3, #5
 800853c:	f003 020f 	and.w	r2, r3, #15
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	440a      	add	r2, r1
 8008546:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8008548:	bf00      	nop
 800854a:	3710      	adds	r7, #16
 800854c:	46bd      	mov	sp, r7
 800854e:	bd80      	pop	{r7, pc}
 8008550:	40013800 	.word	0x40013800
 8008554:	51eb851f 	.word	0x51eb851f

08008558 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8008558:	b480      	push	{r7}
 800855a:	b085      	sub	sp, #20
 800855c:	af00      	add	r7, sp, #0
 800855e:	4603      	mov	r3, r0
 8008560:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8008562:	2300      	movs	r3, #0
 8008564:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8008566:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800856a:	2b84      	cmp	r3, #132	; 0x84
 800856c:	d005      	beq.n	800857a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800856e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	4413      	add	r3, r2
 8008576:	3303      	adds	r3, #3
 8008578:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800857a:	68fb      	ldr	r3, [r7, #12]
}
 800857c:	4618      	mov	r0, r3
 800857e:	3714      	adds	r7, #20
 8008580:	46bd      	mov	sp, r7
 8008582:	bc80      	pop	{r7}
 8008584:	4770      	bx	lr

08008586 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8008586:	b580      	push	{r7, lr}
 8008588:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800858a:	f000 fad1 	bl	8008b30 <vTaskStartScheduler>
  
  return osOK;
 800858e:	2300      	movs	r3, #0
}
 8008590:	4618      	mov	r0, r3
 8008592:	bd80      	pop	{r7, pc}

08008594 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8008594:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008596:	b089      	sub	sp, #36	; 0x24
 8008598:	af04      	add	r7, sp, #16
 800859a:	6078      	str	r0, [r7, #4]
 800859c:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	695b      	ldr	r3, [r3, #20]
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d020      	beq.n	80085e8 <osThreadCreate+0x54>
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	699b      	ldr	r3, [r3, #24]
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d01c      	beq.n	80085e8 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	685c      	ldr	r4, [r3, #4]
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	681d      	ldr	r5, [r3, #0]
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	691e      	ldr	r6, [r3, #16]
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80085c0:	4618      	mov	r0, r3
 80085c2:	f7ff ffc9 	bl	8008558 <makeFreeRtosPriority>
 80085c6:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	695b      	ldr	r3, [r3, #20]
 80085cc:	687a      	ldr	r2, [r7, #4]
 80085ce:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80085d0:	9202      	str	r2, [sp, #8]
 80085d2:	9301      	str	r3, [sp, #4]
 80085d4:	9100      	str	r1, [sp, #0]
 80085d6:	683b      	ldr	r3, [r7, #0]
 80085d8:	4632      	mov	r2, r6
 80085da:	4629      	mov	r1, r5
 80085dc:	4620      	mov	r0, r4
 80085de:	f000 f8e8 	bl	80087b2 <xTaskCreateStatic>
 80085e2:	4603      	mov	r3, r0
 80085e4:	60fb      	str	r3, [r7, #12]
 80085e6:	e01c      	b.n	8008622 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	685c      	ldr	r4, [r3, #4]
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80085f4:	b29e      	uxth	r6, r3
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80085fc:	4618      	mov	r0, r3
 80085fe:	f7ff ffab 	bl	8008558 <makeFreeRtosPriority>
 8008602:	4602      	mov	r2, r0
 8008604:	f107 030c 	add.w	r3, r7, #12
 8008608:	9301      	str	r3, [sp, #4]
 800860a:	9200      	str	r2, [sp, #0]
 800860c:	683b      	ldr	r3, [r7, #0]
 800860e:	4632      	mov	r2, r6
 8008610:	4629      	mov	r1, r5
 8008612:	4620      	mov	r0, r4
 8008614:	f000 f929 	bl	800886a <xTaskCreate>
 8008618:	4603      	mov	r3, r0
 800861a:	2b01      	cmp	r3, #1
 800861c:	d001      	beq.n	8008622 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800861e:	2300      	movs	r3, #0
 8008620:	e000      	b.n	8008624 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8008622:	68fb      	ldr	r3, [r7, #12]
}
 8008624:	4618      	mov	r0, r3
 8008626:	3714      	adds	r7, #20
 8008628:	46bd      	mov	sp, r7
 800862a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800862c <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800862c:	b580      	push	{r7, lr}
 800862e:	b084      	sub	sp, #16
 8008630:	af00      	add	r7, sp, #0
 8008632:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	2b00      	cmp	r3, #0
 800863c:	d001      	beq.n	8008642 <osDelay+0x16>
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	e000      	b.n	8008644 <osDelay+0x18>
 8008642:	2301      	movs	r3, #1
 8008644:	4618      	mov	r0, r3
 8008646:	f000 fa3f 	bl	8008ac8 <vTaskDelay>
  
  return osOK;
 800864a:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800864c:	4618      	mov	r0, r3
 800864e:	3710      	adds	r7, #16
 8008650:	46bd      	mov	sp, r7
 8008652:	bd80      	pop	{r7, pc}

08008654 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008654:	b480      	push	{r7}
 8008656:	b083      	sub	sp, #12
 8008658:	af00      	add	r7, sp, #0
 800865a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	f103 0208 	add.w	r2, r3, #8
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	f04f 32ff 	mov.w	r2, #4294967295
 800866c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	f103 0208 	add.w	r2, r3, #8
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	f103 0208 	add.w	r2, r3, #8
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	2200      	movs	r2, #0
 8008686:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008688:	bf00      	nop
 800868a:	370c      	adds	r7, #12
 800868c:	46bd      	mov	sp, r7
 800868e:	bc80      	pop	{r7}
 8008690:	4770      	bx	lr

08008692 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008692:	b480      	push	{r7}
 8008694:	b083      	sub	sp, #12
 8008696:	af00      	add	r7, sp, #0
 8008698:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	2200      	movs	r2, #0
 800869e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80086a0:	bf00      	nop
 80086a2:	370c      	adds	r7, #12
 80086a4:	46bd      	mov	sp, r7
 80086a6:	bc80      	pop	{r7}
 80086a8:	4770      	bx	lr

080086aa <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80086aa:	b480      	push	{r7}
 80086ac:	b085      	sub	sp, #20
 80086ae:	af00      	add	r7, sp, #0
 80086b0:	6078      	str	r0, [r7, #4]
 80086b2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	685b      	ldr	r3, [r3, #4]
 80086b8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80086ba:	683b      	ldr	r3, [r7, #0]
 80086bc:	68fa      	ldr	r2, [r7, #12]
 80086be:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	689a      	ldr	r2, [r3, #8]
 80086c4:	683b      	ldr	r3, [r7, #0]
 80086c6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	689b      	ldr	r3, [r3, #8]
 80086cc:	683a      	ldr	r2, [r7, #0]
 80086ce:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	683a      	ldr	r2, [r7, #0]
 80086d4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80086d6:	683b      	ldr	r3, [r7, #0]
 80086d8:	687a      	ldr	r2, [r7, #4]
 80086da:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	1c5a      	adds	r2, r3, #1
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	601a      	str	r2, [r3, #0]
}
 80086e6:	bf00      	nop
 80086e8:	3714      	adds	r7, #20
 80086ea:	46bd      	mov	sp, r7
 80086ec:	bc80      	pop	{r7}
 80086ee:	4770      	bx	lr

080086f0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80086f0:	b480      	push	{r7}
 80086f2:	b085      	sub	sp, #20
 80086f4:	af00      	add	r7, sp, #0
 80086f6:	6078      	str	r0, [r7, #4]
 80086f8:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80086fa:	683b      	ldr	r3, [r7, #0]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008700:	68bb      	ldr	r3, [r7, #8]
 8008702:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008706:	d103      	bne.n	8008710 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	691b      	ldr	r3, [r3, #16]
 800870c:	60fb      	str	r3, [r7, #12]
 800870e:	e00c      	b.n	800872a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	3308      	adds	r3, #8
 8008714:	60fb      	str	r3, [r7, #12]
 8008716:	e002      	b.n	800871e <vListInsert+0x2e>
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	685b      	ldr	r3, [r3, #4]
 800871c:	60fb      	str	r3, [r7, #12]
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	685b      	ldr	r3, [r3, #4]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	68ba      	ldr	r2, [r7, #8]
 8008726:	429a      	cmp	r2, r3
 8008728:	d2f6      	bcs.n	8008718 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	685a      	ldr	r2, [r3, #4]
 800872e:	683b      	ldr	r3, [r7, #0]
 8008730:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008732:	683b      	ldr	r3, [r7, #0]
 8008734:	685b      	ldr	r3, [r3, #4]
 8008736:	683a      	ldr	r2, [r7, #0]
 8008738:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800873a:	683b      	ldr	r3, [r7, #0]
 800873c:	68fa      	ldr	r2, [r7, #12]
 800873e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	683a      	ldr	r2, [r7, #0]
 8008744:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8008746:	683b      	ldr	r3, [r7, #0]
 8008748:	687a      	ldr	r2, [r7, #4]
 800874a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	1c5a      	adds	r2, r3, #1
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	601a      	str	r2, [r3, #0]
}
 8008756:	bf00      	nop
 8008758:	3714      	adds	r7, #20
 800875a:	46bd      	mov	sp, r7
 800875c:	bc80      	pop	{r7}
 800875e:	4770      	bx	lr

08008760 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008760:	b480      	push	{r7}
 8008762:	b085      	sub	sp, #20
 8008764:	af00      	add	r7, sp, #0
 8008766:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	691b      	ldr	r3, [r3, #16]
 800876c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	685b      	ldr	r3, [r3, #4]
 8008772:	687a      	ldr	r2, [r7, #4]
 8008774:	6892      	ldr	r2, [r2, #8]
 8008776:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	689b      	ldr	r3, [r3, #8]
 800877c:	687a      	ldr	r2, [r7, #4]
 800877e:	6852      	ldr	r2, [r2, #4]
 8008780:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	685b      	ldr	r3, [r3, #4]
 8008786:	687a      	ldr	r2, [r7, #4]
 8008788:	429a      	cmp	r2, r3
 800878a:	d103      	bne.n	8008794 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	689a      	ldr	r2, [r3, #8]
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	2200      	movs	r2, #0
 8008798:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	1e5a      	subs	r2, r3, #1
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	681b      	ldr	r3, [r3, #0]
}
 80087a8:	4618      	mov	r0, r3
 80087aa:	3714      	adds	r7, #20
 80087ac:	46bd      	mov	sp, r7
 80087ae:	bc80      	pop	{r7}
 80087b0:	4770      	bx	lr

080087b2 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80087b2:	b580      	push	{r7, lr}
 80087b4:	b08e      	sub	sp, #56	; 0x38
 80087b6:	af04      	add	r7, sp, #16
 80087b8:	60f8      	str	r0, [r7, #12]
 80087ba:	60b9      	str	r1, [r7, #8]
 80087bc:	607a      	str	r2, [r7, #4]
 80087be:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80087c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d10a      	bne.n	80087dc <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80087c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087ca:	f383 8811 	msr	BASEPRI, r3
 80087ce:	f3bf 8f6f 	isb	sy
 80087d2:	f3bf 8f4f 	dsb	sy
 80087d6:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80087d8:	bf00      	nop
 80087da:	e7fe      	b.n	80087da <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80087dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d10a      	bne.n	80087f8 <xTaskCreateStatic+0x46>
	__asm volatile
 80087e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087e6:	f383 8811 	msr	BASEPRI, r3
 80087ea:	f3bf 8f6f 	isb	sy
 80087ee:	f3bf 8f4f 	dsb	sy
 80087f2:	61fb      	str	r3, [r7, #28]
}
 80087f4:	bf00      	nop
 80087f6:	e7fe      	b.n	80087f6 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80087f8:	2354      	movs	r3, #84	; 0x54
 80087fa:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80087fc:	693b      	ldr	r3, [r7, #16]
 80087fe:	2b54      	cmp	r3, #84	; 0x54
 8008800:	d00a      	beq.n	8008818 <xTaskCreateStatic+0x66>
	__asm volatile
 8008802:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008806:	f383 8811 	msr	BASEPRI, r3
 800880a:	f3bf 8f6f 	isb	sy
 800880e:	f3bf 8f4f 	dsb	sy
 8008812:	61bb      	str	r3, [r7, #24]
}
 8008814:	bf00      	nop
 8008816:	e7fe      	b.n	8008816 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008818:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800881a:	2b00      	cmp	r3, #0
 800881c:	d01e      	beq.n	800885c <xTaskCreateStatic+0xaa>
 800881e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008820:	2b00      	cmp	r3, #0
 8008822:	d01b      	beq.n	800885c <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008824:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008826:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800882a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800882c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800882e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008830:	2202      	movs	r2, #2
 8008832:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008836:	2300      	movs	r3, #0
 8008838:	9303      	str	r3, [sp, #12]
 800883a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800883c:	9302      	str	r3, [sp, #8]
 800883e:	f107 0314 	add.w	r3, r7, #20
 8008842:	9301      	str	r3, [sp, #4]
 8008844:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008846:	9300      	str	r3, [sp, #0]
 8008848:	683b      	ldr	r3, [r7, #0]
 800884a:	687a      	ldr	r2, [r7, #4]
 800884c:	68b9      	ldr	r1, [r7, #8]
 800884e:	68f8      	ldr	r0, [r7, #12]
 8008850:	f000 f850 	bl	80088f4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008854:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008856:	f000 f8cd 	bl	80089f4 <prvAddNewTaskToReadyList>
 800885a:	e001      	b.n	8008860 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 800885c:	2300      	movs	r3, #0
 800885e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008860:	697b      	ldr	r3, [r7, #20]
	}
 8008862:	4618      	mov	r0, r3
 8008864:	3728      	adds	r7, #40	; 0x28
 8008866:	46bd      	mov	sp, r7
 8008868:	bd80      	pop	{r7, pc}

0800886a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800886a:	b580      	push	{r7, lr}
 800886c:	b08c      	sub	sp, #48	; 0x30
 800886e:	af04      	add	r7, sp, #16
 8008870:	60f8      	str	r0, [r7, #12]
 8008872:	60b9      	str	r1, [r7, #8]
 8008874:	603b      	str	r3, [r7, #0]
 8008876:	4613      	mov	r3, r2
 8008878:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800887a:	88fb      	ldrh	r3, [r7, #6]
 800887c:	009b      	lsls	r3, r3, #2
 800887e:	4618      	mov	r0, r3
 8008880:	f000 fe6e 	bl	8009560 <pvPortMalloc>
 8008884:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008886:	697b      	ldr	r3, [r7, #20]
 8008888:	2b00      	cmp	r3, #0
 800888a:	d00e      	beq.n	80088aa <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800888c:	2054      	movs	r0, #84	; 0x54
 800888e:	f000 fe67 	bl	8009560 <pvPortMalloc>
 8008892:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008894:	69fb      	ldr	r3, [r7, #28]
 8008896:	2b00      	cmp	r3, #0
 8008898:	d003      	beq.n	80088a2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800889a:	69fb      	ldr	r3, [r7, #28]
 800889c:	697a      	ldr	r2, [r7, #20]
 800889e:	631a      	str	r2, [r3, #48]	; 0x30
 80088a0:	e005      	b.n	80088ae <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80088a2:	6978      	ldr	r0, [r7, #20]
 80088a4:	f000 ff20 	bl	80096e8 <vPortFree>
 80088a8:	e001      	b.n	80088ae <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80088aa:	2300      	movs	r3, #0
 80088ac:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80088ae:	69fb      	ldr	r3, [r7, #28]
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d017      	beq.n	80088e4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80088b4:	69fb      	ldr	r3, [r7, #28]
 80088b6:	2200      	movs	r2, #0
 80088b8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80088bc:	88fa      	ldrh	r2, [r7, #6]
 80088be:	2300      	movs	r3, #0
 80088c0:	9303      	str	r3, [sp, #12]
 80088c2:	69fb      	ldr	r3, [r7, #28]
 80088c4:	9302      	str	r3, [sp, #8]
 80088c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088c8:	9301      	str	r3, [sp, #4]
 80088ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088cc:	9300      	str	r3, [sp, #0]
 80088ce:	683b      	ldr	r3, [r7, #0]
 80088d0:	68b9      	ldr	r1, [r7, #8]
 80088d2:	68f8      	ldr	r0, [r7, #12]
 80088d4:	f000 f80e 	bl	80088f4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80088d8:	69f8      	ldr	r0, [r7, #28]
 80088da:	f000 f88b 	bl	80089f4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80088de:	2301      	movs	r3, #1
 80088e0:	61bb      	str	r3, [r7, #24]
 80088e2:	e002      	b.n	80088ea <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80088e4:	f04f 33ff 	mov.w	r3, #4294967295
 80088e8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80088ea:	69bb      	ldr	r3, [r7, #24]
	}
 80088ec:	4618      	mov	r0, r3
 80088ee:	3720      	adds	r7, #32
 80088f0:	46bd      	mov	sp, r7
 80088f2:	bd80      	pop	{r7, pc}

080088f4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80088f4:	b580      	push	{r7, lr}
 80088f6:	b088      	sub	sp, #32
 80088f8:	af00      	add	r7, sp, #0
 80088fa:	60f8      	str	r0, [r7, #12]
 80088fc:	60b9      	str	r1, [r7, #8]
 80088fe:	607a      	str	r2, [r7, #4]
 8008900:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8008902:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008904:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800890c:	3b01      	subs	r3, #1
 800890e:	009b      	lsls	r3, r3, #2
 8008910:	4413      	add	r3, r2
 8008912:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8008914:	69bb      	ldr	r3, [r7, #24]
 8008916:	f023 0307 	bic.w	r3, r3, #7
 800891a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800891c:	69bb      	ldr	r3, [r7, #24]
 800891e:	f003 0307 	and.w	r3, r3, #7
 8008922:	2b00      	cmp	r3, #0
 8008924:	d00a      	beq.n	800893c <prvInitialiseNewTask+0x48>
	__asm volatile
 8008926:	f04f 0350 	mov.w	r3, #80	; 0x50
 800892a:	f383 8811 	msr	BASEPRI, r3
 800892e:	f3bf 8f6f 	isb	sy
 8008932:	f3bf 8f4f 	dsb	sy
 8008936:	617b      	str	r3, [r7, #20]
}
 8008938:	bf00      	nop
 800893a:	e7fe      	b.n	800893a <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800893c:	2300      	movs	r3, #0
 800893e:	61fb      	str	r3, [r7, #28]
 8008940:	e012      	b.n	8008968 <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008942:	68ba      	ldr	r2, [r7, #8]
 8008944:	69fb      	ldr	r3, [r7, #28]
 8008946:	4413      	add	r3, r2
 8008948:	7819      	ldrb	r1, [r3, #0]
 800894a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800894c:	69fb      	ldr	r3, [r7, #28]
 800894e:	4413      	add	r3, r2
 8008950:	3334      	adds	r3, #52	; 0x34
 8008952:	460a      	mov	r2, r1
 8008954:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8008956:	68ba      	ldr	r2, [r7, #8]
 8008958:	69fb      	ldr	r3, [r7, #28]
 800895a:	4413      	add	r3, r2
 800895c:	781b      	ldrb	r3, [r3, #0]
 800895e:	2b00      	cmp	r3, #0
 8008960:	d006      	beq.n	8008970 <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008962:	69fb      	ldr	r3, [r7, #28]
 8008964:	3301      	adds	r3, #1
 8008966:	61fb      	str	r3, [r7, #28]
 8008968:	69fb      	ldr	r3, [r7, #28]
 800896a:	2b0f      	cmp	r3, #15
 800896c:	d9e9      	bls.n	8008942 <prvInitialiseNewTask+0x4e>
 800896e:	e000      	b.n	8008972 <prvInitialiseNewTask+0x7e>
		{
			break;
 8008970:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008972:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008974:	2200      	movs	r2, #0
 8008976:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800897a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800897c:	2b06      	cmp	r3, #6
 800897e:	d901      	bls.n	8008984 <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008980:	2306      	movs	r3, #6
 8008982:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008984:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008986:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008988:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800898a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800898c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800898e:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8008990:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008992:	2200      	movs	r2, #0
 8008994:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008996:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008998:	3304      	adds	r3, #4
 800899a:	4618      	mov	r0, r3
 800899c:	f7ff fe79 	bl	8008692 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80089a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089a2:	3318      	adds	r3, #24
 80089a4:	4618      	mov	r0, r3
 80089a6:	f7ff fe74 	bl	8008692 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80089aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80089ae:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80089b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089b2:	f1c3 0207 	rsb	r2, r3, #7
 80089b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089b8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80089ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80089be:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80089c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089c2:	2200      	movs	r2, #0
 80089c4:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80089c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089c8:	2200      	movs	r2, #0
 80089ca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80089ce:	683a      	ldr	r2, [r7, #0]
 80089d0:	68f9      	ldr	r1, [r7, #12]
 80089d2:	69b8      	ldr	r0, [r7, #24]
 80089d4:	f000 fc0e 	bl	80091f4 <pxPortInitialiseStack>
 80089d8:	4602      	mov	r2, r0
 80089da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089dc:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80089de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	d002      	beq.n	80089ea <prvInitialiseNewTask+0xf6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80089e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80089e8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80089ea:	bf00      	nop
 80089ec:	3720      	adds	r7, #32
 80089ee:	46bd      	mov	sp, r7
 80089f0:	bd80      	pop	{r7, pc}
	...

080089f4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80089f4:	b580      	push	{r7, lr}
 80089f6:	b082      	sub	sp, #8
 80089f8:	af00      	add	r7, sp, #0
 80089fa:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80089fc:	f000 fcee 	bl	80093dc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008a00:	4b2a      	ldr	r3, [pc, #168]	; (8008aac <prvAddNewTaskToReadyList+0xb8>)
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	3301      	adds	r3, #1
 8008a06:	4a29      	ldr	r2, [pc, #164]	; (8008aac <prvAddNewTaskToReadyList+0xb8>)
 8008a08:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008a0a:	4b29      	ldr	r3, [pc, #164]	; (8008ab0 <prvAddNewTaskToReadyList+0xbc>)
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d109      	bne.n	8008a26 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008a12:	4a27      	ldr	r2, [pc, #156]	; (8008ab0 <prvAddNewTaskToReadyList+0xbc>)
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008a18:	4b24      	ldr	r3, [pc, #144]	; (8008aac <prvAddNewTaskToReadyList+0xb8>)
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	2b01      	cmp	r3, #1
 8008a1e:	d110      	bne.n	8008a42 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008a20:	f000 fac0 	bl	8008fa4 <prvInitialiseTaskLists>
 8008a24:	e00d      	b.n	8008a42 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008a26:	4b23      	ldr	r3, [pc, #140]	; (8008ab4 <prvAddNewTaskToReadyList+0xc0>)
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d109      	bne.n	8008a42 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008a2e:	4b20      	ldr	r3, [pc, #128]	; (8008ab0 <prvAddNewTaskToReadyList+0xbc>)
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a38:	429a      	cmp	r2, r3
 8008a3a:	d802      	bhi.n	8008a42 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008a3c:	4a1c      	ldr	r2, [pc, #112]	; (8008ab0 <prvAddNewTaskToReadyList+0xbc>)
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008a42:	4b1d      	ldr	r3, [pc, #116]	; (8008ab8 <prvAddNewTaskToReadyList+0xc4>)
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	3301      	adds	r3, #1
 8008a48:	4a1b      	ldr	r2, [pc, #108]	; (8008ab8 <prvAddNewTaskToReadyList+0xc4>)
 8008a4a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a50:	2201      	movs	r2, #1
 8008a52:	409a      	lsls	r2, r3
 8008a54:	4b19      	ldr	r3, [pc, #100]	; (8008abc <prvAddNewTaskToReadyList+0xc8>)
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	4313      	orrs	r3, r2
 8008a5a:	4a18      	ldr	r2, [pc, #96]	; (8008abc <prvAddNewTaskToReadyList+0xc8>)
 8008a5c:	6013      	str	r3, [r2, #0]
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a62:	4613      	mov	r3, r2
 8008a64:	009b      	lsls	r3, r3, #2
 8008a66:	4413      	add	r3, r2
 8008a68:	009b      	lsls	r3, r3, #2
 8008a6a:	4a15      	ldr	r2, [pc, #84]	; (8008ac0 <prvAddNewTaskToReadyList+0xcc>)
 8008a6c:	441a      	add	r2, r3
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	3304      	adds	r3, #4
 8008a72:	4619      	mov	r1, r3
 8008a74:	4610      	mov	r0, r2
 8008a76:	f7ff fe18 	bl	80086aa <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008a7a:	f000 fcdf 	bl	800943c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008a7e:	4b0d      	ldr	r3, [pc, #52]	; (8008ab4 <prvAddNewTaskToReadyList+0xc0>)
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d00e      	beq.n	8008aa4 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008a86:	4b0a      	ldr	r3, [pc, #40]	; (8008ab0 <prvAddNewTaskToReadyList+0xbc>)
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a90:	429a      	cmp	r2, r3
 8008a92:	d207      	bcs.n	8008aa4 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008a94:	4b0b      	ldr	r3, [pc, #44]	; (8008ac4 <prvAddNewTaskToReadyList+0xd0>)
 8008a96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008a9a:	601a      	str	r2, [r3, #0]
 8008a9c:	f3bf 8f4f 	dsb	sy
 8008aa0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008aa4:	bf00      	nop
 8008aa6:	3708      	adds	r7, #8
 8008aa8:	46bd      	mov	sp, r7
 8008aaa:	bd80      	pop	{r7, pc}
 8008aac:	20000944 	.word	0x20000944
 8008ab0:	20000844 	.word	0x20000844
 8008ab4:	20000950 	.word	0x20000950
 8008ab8:	20000960 	.word	0x20000960
 8008abc:	2000094c 	.word	0x2000094c
 8008ac0:	20000848 	.word	0x20000848
 8008ac4:	e000ed04 	.word	0xe000ed04

08008ac8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008ac8:	b580      	push	{r7, lr}
 8008aca:	b084      	sub	sp, #16
 8008acc:	af00      	add	r7, sp, #0
 8008ace:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008ad0:	2300      	movs	r3, #0
 8008ad2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d017      	beq.n	8008b0a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008ada:	4b13      	ldr	r3, [pc, #76]	; (8008b28 <vTaskDelay+0x60>)
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d00a      	beq.n	8008af8 <vTaskDelay+0x30>
	__asm volatile
 8008ae2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ae6:	f383 8811 	msr	BASEPRI, r3
 8008aea:	f3bf 8f6f 	isb	sy
 8008aee:	f3bf 8f4f 	dsb	sy
 8008af2:	60bb      	str	r3, [r7, #8]
}
 8008af4:	bf00      	nop
 8008af6:	e7fe      	b.n	8008af6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8008af8:	f000 f87a 	bl	8008bf0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008afc:	2100      	movs	r1, #0
 8008afe:	6878      	ldr	r0, [r7, #4]
 8008b00:	f000 fb12 	bl	8009128 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008b04:	f000 f882 	bl	8008c0c <xTaskResumeAll>
 8008b08:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d107      	bne.n	8008b20 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8008b10:	4b06      	ldr	r3, [pc, #24]	; (8008b2c <vTaskDelay+0x64>)
 8008b12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008b16:	601a      	str	r2, [r3, #0]
 8008b18:	f3bf 8f4f 	dsb	sy
 8008b1c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008b20:	bf00      	nop
 8008b22:	3710      	adds	r7, #16
 8008b24:	46bd      	mov	sp, r7
 8008b26:	bd80      	pop	{r7, pc}
 8008b28:	2000096c 	.word	0x2000096c
 8008b2c:	e000ed04 	.word	0xe000ed04

08008b30 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008b30:	b580      	push	{r7, lr}
 8008b32:	b08a      	sub	sp, #40	; 0x28
 8008b34:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008b36:	2300      	movs	r3, #0
 8008b38:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008b3a:	2300      	movs	r3, #0
 8008b3c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008b3e:	463a      	mov	r2, r7
 8008b40:	1d39      	adds	r1, r7, #4
 8008b42:	f107 0308 	add.w	r3, r7, #8
 8008b46:	4618      	mov	r0, r3
 8008b48:	f7fa fbba 	bl	80032c0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008b4c:	6839      	ldr	r1, [r7, #0]
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	68ba      	ldr	r2, [r7, #8]
 8008b52:	9202      	str	r2, [sp, #8]
 8008b54:	9301      	str	r3, [sp, #4]
 8008b56:	2300      	movs	r3, #0
 8008b58:	9300      	str	r3, [sp, #0]
 8008b5a:	2300      	movs	r3, #0
 8008b5c:	460a      	mov	r2, r1
 8008b5e:	491e      	ldr	r1, [pc, #120]	; (8008bd8 <vTaskStartScheduler+0xa8>)
 8008b60:	481e      	ldr	r0, [pc, #120]	; (8008bdc <vTaskStartScheduler+0xac>)
 8008b62:	f7ff fe26 	bl	80087b2 <xTaskCreateStatic>
 8008b66:	4603      	mov	r3, r0
 8008b68:	4a1d      	ldr	r2, [pc, #116]	; (8008be0 <vTaskStartScheduler+0xb0>)
 8008b6a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008b6c:	4b1c      	ldr	r3, [pc, #112]	; (8008be0 <vTaskStartScheduler+0xb0>)
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d002      	beq.n	8008b7a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008b74:	2301      	movs	r3, #1
 8008b76:	617b      	str	r3, [r7, #20]
 8008b78:	e001      	b.n	8008b7e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008b7a:	2300      	movs	r3, #0
 8008b7c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008b7e:	697b      	ldr	r3, [r7, #20]
 8008b80:	2b01      	cmp	r3, #1
 8008b82:	d116      	bne.n	8008bb2 <vTaskStartScheduler+0x82>
	__asm volatile
 8008b84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b88:	f383 8811 	msr	BASEPRI, r3
 8008b8c:	f3bf 8f6f 	isb	sy
 8008b90:	f3bf 8f4f 	dsb	sy
 8008b94:	613b      	str	r3, [r7, #16]
}
 8008b96:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008b98:	4b12      	ldr	r3, [pc, #72]	; (8008be4 <vTaskStartScheduler+0xb4>)
 8008b9a:	f04f 32ff 	mov.w	r2, #4294967295
 8008b9e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008ba0:	4b11      	ldr	r3, [pc, #68]	; (8008be8 <vTaskStartScheduler+0xb8>)
 8008ba2:	2201      	movs	r2, #1
 8008ba4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8008ba6:	4b11      	ldr	r3, [pc, #68]	; (8008bec <vTaskStartScheduler+0xbc>)
 8008ba8:	2200      	movs	r2, #0
 8008baa:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008bac:	f000 fba4 	bl	80092f8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008bb0:	e00e      	b.n	8008bd0 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008bb2:	697b      	ldr	r3, [r7, #20]
 8008bb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008bb8:	d10a      	bne.n	8008bd0 <vTaskStartScheduler+0xa0>
	__asm volatile
 8008bba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bbe:	f383 8811 	msr	BASEPRI, r3
 8008bc2:	f3bf 8f6f 	isb	sy
 8008bc6:	f3bf 8f4f 	dsb	sy
 8008bca:	60fb      	str	r3, [r7, #12]
}
 8008bcc:	bf00      	nop
 8008bce:	e7fe      	b.n	8008bce <vTaskStartScheduler+0x9e>
}
 8008bd0:	bf00      	nop
 8008bd2:	3718      	adds	r7, #24
 8008bd4:	46bd      	mov	sp, r7
 8008bd6:	bd80      	pop	{r7, pc}
 8008bd8:	0800d234 	.word	0x0800d234
 8008bdc:	08008f75 	.word	0x08008f75
 8008be0:	20000968 	.word	0x20000968
 8008be4:	20000964 	.word	0x20000964
 8008be8:	20000950 	.word	0x20000950
 8008bec:	20000948 	.word	0x20000948

08008bf0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008bf0:	b480      	push	{r7}
 8008bf2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8008bf4:	4b04      	ldr	r3, [pc, #16]	; (8008c08 <vTaskSuspendAll+0x18>)
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	3301      	adds	r3, #1
 8008bfa:	4a03      	ldr	r2, [pc, #12]	; (8008c08 <vTaskSuspendAll+0x18>)
 8008bfc:	6013      	str	r3, [r2, #0]
}
 8008bfe:	bf00      	nop
 8008c00:	46bd      	mov	sp, r7
 8008c02:	bc80      	pop	{r7}
 8008c04:	4770      	bx	lr
 8008c06:	bf00      	nop
 8008c08:	2000096c 	.word	0x2000096c

08008c0c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008c0c:	b580      	push	{r7, lr}
 8008c0e:	b084      	sub	sp, #16
 8008c10:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008c12:	2300      	movs	r3, #0
 8008c14:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008c16:	2300      	movs	r3, #0
 8008c18:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008c1a:	4b41      	ldr	r3, [pc, #260]	; (8008d20 <xTaskResumeAll+0x114>)
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d10a      	bne.n	8008c38 <xTaskResumeAll+0x2c>
	__asm volatile
 8008c22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c26:	f383 8811 	msr	BASEPRI, r3
 8008c2a:	f3bf 8f6f 	isb	sy
 8008c2e:	f3bf 8f4f 	dsb	sy
 8008c32:	603b      	str	r3, [r7, #0]
}
 8008c34:	bf00      	nop
 8008c36:	e7fe      	b.n	8008c36 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008c38:	f000 fbd0 	bl	80093dc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008c3c:	4b38      	ldr	r3, [pc, #224]	; (8008d20 <xTaskResumeAll+0x114>)
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	3b01      	subs	r3, #1
 8008c42:	4a37      	ldr	r2, [pc, #220]	; (8008d20 <xTaskResumeAll+0x114>)
 8008c44:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008c46:	4b36      	ldr	r3, [pc, #216]	; (8008d20 <xTaskResumeAll+0x114>)
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d161      	bne.n	8008d12 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008c4e:	4b35      	ldr	r3, [pc, #212]	; (8008d24 <xTaskResumeAll+0x118>)
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d05d      	beq.n	8008d12 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008c56:	e02e      	b.n	8008cb6 <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8008c58:	4b33      	ldr	r3, [pc, #204]	; (8008d28 <xTaskResumeAll+0x11c>)
 8008c5a:	68db      	ldr	r3, [r3, #12]
 8008c5c:	68db      	ldr	r3, [r3, #12]
 8008c5e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	3318      	adds	r3, #24
 8008c64:	4618      	mov	r0, r3
 8008c66:	f7ff fd7b 	bl	8008760 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	3304      	adds	r3, #4
 8008c6e:	4618      	mov	r0, r3
 8008c70:	f7ff fd76 	bl	8008760 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c78:	2201      	movs	r2, #1
 8008c7a:	409a      	lsls	r2, r3
 8008c7c:	4b2b      	ldr	r3, [pc, #172]	; (8008d2c <xTaskResumeAll+0x120>)
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	4313      	orrs	r3, r2
 8008c82:	4a2a      	ldr	r2, [pc, #168]	; (8008d2c <xTaskResumeAll+0x120>)
 8008c84:	6013      	str	r3, [r2, #0]
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c8a:	4613      	mov	r3, r2
 8008c8c:	009b      	lsls	r3, r3, #2
 8008c8e:	4413      	add	r3, r2
 8008c90:	009b      	lsls	r3, r3, #2
 8008c92:	4a27      	ldr	r2, [pc, #156]	; (8008d30 <xTaskResumeAll+0x124>)
 8008c94:	441a      	add	r2, r3
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	3304      	adds	r3, #4
 8008c9a:	4619      	mov	r1, r3
 8008c9c:	4610      	mov	r0, r2
 8008c9e:	f7ff fd04 	bl	80086aa <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ca6:	4b23      	ldr	r3, [pc, #140]	; (8008d34 <xTaskResumeAll+0x128>)
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cac:	429a      	cmp	r2, r3
 8008cae:	d302      	bcc.n	8008cb6 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8008cb0:	4b21      	ldr	r3, [pc, #132]	; (8008d38 <xTaskResumeAll+0x12c>)
 8008cb2:	2201      	movs	r2, #1
 8008cb4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008cb6:	4b1c      	ldr	r3, [pc, #112]	; (8008d28 <xTaskResumeAll+0x11c>)
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d1cc      	bne.n	8008c58 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d001      	beq.n	8008cc8 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008cc4:	f000 fa0c 	bl	80090e0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8008cc8:	4b1c      	ldr	r3, [pc, #112]	; (8008d3c <xTaskResumeAll+0x130>)
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	d010      	beq.n	8008cf6 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008cd4:	f000 f836 	bl	8008d44 <xTaskIncrementTick>
 8008cd8:	4603      	mov	r3, r0
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d002      	beq.n	8008ce4 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8008cde:	4b16      	ldr	r3, [pc, #88]	; (8008d38 <xTaskResumeAll+0x12c>)
 8008ce0:	2201      	movs	r2, #1
 8008ce2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	3b01      	subs	r3, #1
 8008ce8:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	d1f1      	bne.n	8008cd4 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8008cf0:	4b12      	ldr	r3, [pc, #72]	; (8008d3c <xTaskResumeAll+0x130>)
 8008cf2:	2200      	movs	r2, #0
 8008cf4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008cf6:	4b10      	ldr	r3, [pc, #64]	; (8008d38 <xTaskResumeAll+0x12c>)
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	d009      	beq.n	8008d12 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008cfe:	2301      	movs	r3, #1
 8008d00:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008d02:	4b0f      	ldr	r3, [pc, #60]	; (8008d40 <xTaskResumeAll+0x134>)
 8008d04:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008d08:	601a      	str	r2, [r3, #0]
 8008d0a:	f3bf 8f4f 	dsb	sy
 8008d0e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008d12:	f000 fb93 	bl	800943c <vPortExitCritical>

	return xAlreadyYielded;
 8008d16:	68bb      	ldr	r3, [r7, #8]
}
 8008d18:	4618      	mov	r0, r3
 8008d1a:	3710      	adds	r7, #16
 8008d1c:	46bd      	mov	sp, r7
 8008d1e:	bd80      	pop	{r7, pc}
 8008d20:	2000096c 	.word	0x2000096c
 8008d24:	20000944 	.word	0x20000944
 8008d28:	20000904 	.word	0x20000904
 8008d2c:	2000094c 	.word	0x2000094c
 8008d30:	20000848 	.word	0x20000848
 8008d34:	20000844 	.word	0x20000844
 8008d38:	20000958 	.word	0x20000958
 8008d3c:	20000954 	.word	0x20000954
 8008d40:	e000ed04 	.word	0xe000ed04

08008d44 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008d44:	b580      	push	{r7, lr}
 8008d46:	b086      	sub	sp, #24
 8008d48:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008d4a:	2300      	movs	r3, #0
 8008d4c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008d4e:	4b51      	ldr	r3, [pc, #324]	; (8008e94 <xTaskIncrementTick+0x150>)
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	f040 808d 	bne.w	8008e72 <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008d58:	4b4f      	ldr	r3, [pc, #316]	; (8008e98 <xTaskIncrementTick+0x154>)
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	3301      	adds	r3, #1
 8008d5e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008d60:	4a4d      	ldr	r2, [pc, #308]	; (8008e98 <xTaskIncrementTick+0x154>)
 8008d62:	693b      	ldr	r3, [r7, #16]
 8008d64:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008d66:	693b      	ldr	r3, [r7, #16]
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d120      	bne.n	8008dae <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8008d6c:	4b4b      	ldr	r3, [pc, #300]	; (8008e9c <xTaskIncrementTick+0x158>)
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d00a      	beq.n	8008d8c <xTaskIncrementTick+0x48>
	__asm volatile
 8008d76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d7a:	f383 8811 	msr	BASEPRI, r3
 8008d7e:	f3bf 8f6f 	isb	sy
 8008d82:	f3bf 8f4f 	dsb	sy
 8008d86:	603b      	str	r3, [r7, #0]
}
 8008d88:	bf00      	nop
 8008d8a:	e7fe      	b.n	8008d8a <xTaskIncrementTick+0x46>
 8008d8c:	4b43      	ldr	r3, [pc, #268]	; (8008e9c <xTaskIncrementTick+0x158>)
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	60fb      	str	r3, [r7, #12]
 8008d92:	4b43      	ldr	r3, [pc, #268]	; (8008ea0 <xTaskIncrementTick+0x15c>)
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	4a41      	ldr	r2, [pc, #260]	; (8008e9c <xTaskIncrementTick+0x158>)
 8008d98:	6013      	str	r3, [r2, #0]
 8008d9a:	4a41      	ldr	r2, [pc, #260]	; (8008ea0 <xTaskIncrementTick+0x15c>)
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	6013      	str	r3, [r2, #0]
 8008da0:	4b40      	ldr	r3, [pc, #256]	; (8008ea4 <xTaskIncrementTick+0x160>)
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	3301      	adds	r3, #1
 8008da6:	4a3f      	ldr	r2, [pc, #252]	; (8008ea4 <xTaskIncrementTick+0x160>)
 8008da8:	6013      	str	r3, [r2, #0]
 8008daa:	f000 f999 	bl	80090e0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008dae:	4b3e      	ldr	r3, [pc, #248]	; (8008ea8 <xTaskIncrementTick+0x164>)
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	693a      	ldr	r2, [r7, #16]
 8008db4:	429a      	cmp	r2, r3
 8008db6:	d34d      	bcc.n	8008e54 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008db8:	4b38      	ldr	r3, [pc, #224]	; (8008e9c <xTaskIncrementTick+0x158>)
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d101      	bne.n	8008dc6 <xTaskIncrementTick+0x82>
 8008dc2:	2301      	movs	r3, #1
 8008dc4:	e000      	b.n	8008dc8 <xTaskIncrementTick+0x84>
 8008dc6:	2300      	movs	r3, #0
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	d004      	beq.n	8008dd6 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008dcc:	4b36      	ldr	r3, [pc, #216]	; (8008ea8 <xTaskIncrementTick+0x164>)
 8008dce:	f04f 32ff 	mov.w	r2, #4294967295
 8008dd2:	601a      	str	r2, [r3, #0]
					break;
 8008dd4:	e03e      	b.n	8008e54 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8008dd6:	4b31      	ldr	r3, [pc, #196]	; (8008e9c <xTaskIncrementTick+0x158>)
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	68db      	ldr	r3, [r3, #12]
 8008ddc:	68db      	ldr	r3, [r3, #12]
 8008dde:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008de0:	68bb      	ldr	r3, [r7, #8]
 8008de2:	685b      	ldr	r3, [r3, #4]
 8008de4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008de6:	693a      	ldr	r2, [r7, #16]
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	429a      	cmp	r2, r3
 8008dec:	d203      	bcs.n	8008df6 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008dee:	4a2e      	ldr	r2, [pc, #184]	; (8008ea8 <xTaskIncrementTick+0x164>)
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	6013      	str	r3, [r2, #0]
						break;
 8008df4:	e02e      	b.n	8008e54 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008df6:	68bb      	ldr	r3, [r7, #8]
 8008df8:	3304      	adds	r3, #4
 8008dfa:	4618      	mov	r0, r3
 8008dfc:	f7ff fcb0 	bl	8008760 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008e00:	68bb      	ldr	r3, [r7, #8]
 8008e02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	d004      	beq.n	8008e12 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008e08:	68bb      	ldr	r3, [r7, #8]
 8008e0a:	3318      	adds	r3, #24
 8008e0c:	4618      	mov	r0, r3
 8008e0e:	f7ff fca7 	bl	8008760 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008e12:	68bb      	ldr	r3, [r7, #8]
 8008e14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e16:	2201      	movs	r2, #1
 8008e18:	409a      	lsls	r2, r3
 8008e1a:	4b24      	ldr	r3, [pc, #144]	; (8008eac <xTaskIncrementTick+0x168>)
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	4313      	orrs	r3, r2
 8008e20:	4a22      	ldr	r2, [pc, #136]	; (8008eac <xTaskIncrementTick+0x168>)
 8008e22:	6013      	str	r3, [r2, #0]
 8008e24:	68bb      	ldr	r3, [r7, #8]
 8008e26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e28:	4613      	mov	r3, r2
 8008e2a:	009b      	lsls	r3, r3, #2
 8008e2c:	4413      	add	r3, r2
 8008e2e:	009b      	lsls	r3, r3, #2
 8008e30:	4a1f      	ldr	r2, [pc, #124]	; (8008eb0 <xTaskIncrementTick+0x16c>)
 8008e32:	441a      	add	r2, r3
 8008e34:	68bb      	ldr	r3, [r7, #8]
 8008e36:	3304      	adds	r3, #4
 8008e38:	4619      	mov	r1, r3
 8008e3a:	4610      	mov	r0, r2
 8008e3c:	f7ff fc35 	bl	80086aa <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008e40:	68bb      	ldr	r3, [r7, #8]
 8008e42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e44:	4b1b      	ldr	r3, [pc, #108]	; (8008eb4 <xTaskIncrementTick+0x170>)
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e4a:	429a      	cmp	r2, r3
 8008e4c:	d3b4      	bcc.n	8008db8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8008e4e:	2301      	movs	r3, #1
 8008e50:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008e52:	e7b1      	b.n	8008db8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008e54:	4b17      	ldr	r3, [pc, #92]	; (8008eb4 <xTaskIncrementTick+0x170>)
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e5a:	4915      	ldr	r1, [pc, #84]	; (8008eb0 <xTaskIncrementTick+0x16c>)
 8008e5c:	4613      	mov	r3, r2
 8008e5e:	009b      	lsls	r3, r3, #2
 8008e60:	4413      	add	r3, r2
 8008e62:	009b      	lsls	r3, r3, #2
 8008e64:	440b      	add	r3, r1
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	2b01      	cmp	r3, #1
 8008e6a:	d907      	bls.n	8008e7c <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8008e6c:	2301      	movs	r3, #1
 8008e6e:	617b      	str	r3, [r7, #20]
 8008e70:	e004      	b.n	8008e7c <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8008e72:	4b11      	ldr	r3, [pc, #68]	; (8008eb8 <xTaskIncrementTick+0x174>)
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	3301      	adds	r3, #1
 8008e78:	4a0f      	ldr	r2, [pc, #60]	; (8008eb8 <xTaskIncrementTick+0x174>)
 8008e7a:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8008e7c:	4b0f      	ldr	r3, [pc, #60]	; (8008ebc <xTaskIncrementTick+0x178>)
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d001      	beq.n	8008e88 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 8008e84:	2301      	movs	r3, #1
 8008e86:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8008e88:	697b      	ldr	r3, [r7, #20]
}
 8008e8a:	4618      	mov	r0, r3
 8008e8c:	3718      	adds	r7, #24
 8008e8e:	46bd      	mov	sp, r7
 8008e90:	bd80      	pop	{r7, pc}
 8008e92:	bf00      	nop
 8008e94:	2000096c 	.word	0x2000096c
 8008e98:	20000948 	.word	0x20000948
 8008e9c:	200008fc 	.word	0x200008fc
 8008ea0:	20000900 	.word	0x20000900
 8008ea4:	2000095c 	.word	0x2000095c
 8008ea8:	20000964 	.word	0x20000964
 8008eac:	2000094c 	.word	0x2000094c
 8008eb0:	20000848 	.word	0x20000848
 8008eb4:	20000844 	.word	0x20000844
 8008eb8:	20000954 	.word	0x20000954
 8008ebc:	20000958 	.word	0x20000958

08008ec0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008ec0:	b480      	push	{r7}
 8008ec2:	b087      	sub	sp, #28
 8008ec4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008ec6:	4b26      	ldr	r3, [pc, #152]	; (8008f60 <vTaskSwitchContext+0xa0>)
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d003      	beq.n	8008ed6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008ece:	4b25      	ldr	r3, [pc, #148]	; (8008f64 <vTaskSwitchContext+0xa4>)
 8008ed0:	2201      	movs	r2, #1
 8008ed2:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008ed4:	e03f      	b.n	8008f56 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8008ed6:	4b23      	ldr	r3, [pc, #140]	; (8008f64 <vTaskSwitchContext+0xa4>)
 8008ed8:	2200      	movs	r2, #0
 8008eda:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8008edc:	4b22      	ldr	r3, [pc, #136]	; (8008f68 <vTaskSwitchContext+0xa8>)
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	fab3 f383 	clz	r3, r3
 8008ee8:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8008eea:	7afb      	ldrb	r3, [r7, #11]
 8008eec:	f1c3 031f 	rsb	r3, r3, #31
 8008ef0:	617b      	str	r3, [r7, #20]
 8008ef2:	491e      	ldr	r1, [pc, #120]	; (8008f6c <vTaskSwitchContext+0xac>)
 8008ef4:	697a      	ldr	r2, [r7, #20]
 8008ef6:	4613      	mov	r3, r2
 8008ef8:	009b      	lsls	r3, r3, #2
 8008efa:	4413      	add	r3, r2
 8008efc:	009b      	lsls	r3, r3, #2
 8008efe:	440b      	add	r3, r1
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d10a      	bne.n	8008f1c <vTaskSwitchContext+0x5c>
	__asm volatile
 8008f06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f0a:	f383 8811 	msr	BASEPRI, r3
 8008f0e:	f3bf 8f6f 	isb	sy
 8008f12:	f3bf 8f4f 	dsb	sy
 8008f16:	607b      	str	r3, [r7, #4]
}
 8008f18:	bf00      	nop
 8008f1a:	e7fe      	b.n	8008f1a <vTaskSwitchContext+0x5a>
 8008f1c:	697a      	ldr	r2, [r7, #20]
 8008f1e:	4613      	mov	r3, r2
 8008f20:	009b      	lsls	r3, r3, #2
 8008f22:	4413      	add	r3, r2
 8008f24:	009b      	lsls	r3, r3, #2
 8008f26:	4a11      	ldr	r2, [pc, #68]	; (8008f6c <vTaskSwitchContext+0xac>)
 8008f28:	4413      	add	r3, r2
 8008f2a:	613b      	str	r3, [r7, #16]
 8008f2c:	693b      	ldr	r3, [r7, #16]
 8008f2e:	685b      	ldr	r3, [r3, #4]
 8008f30:	685a      	ldr	r2, [r3, #4]
 8008f32:	693b      	ldr	r3, [r7, #16]
 8008f34:	605a      	str	r2, [r3, #4]
 8008f36:	693b      	ldr	r3, [r7, #16]
 8008f38:	685a      	ldr	r2, [r3, #4]
 8008f3a:	693b      	ldr	r3, [r7, #16]
 8008f3c:	3308      	adds	r3, #8
 8008f3e:	429a      	cmp	r2, r3
 8008f40:	d104      	bne.n	8008f4c <vTaskSwitchContext+0x8c>
 8008f42:	693b      	ldr	r3, [r7, #16]
 8008f44:	685b      	ldr	r3, [r3, #4]
 8008f46:	685a      	ldr	r2, [r3, #4]
 8008f48:	693b      	ldr	r3, [r7, #16]
 8008f4a:	605a      	str	r2, [r3, #4]
 8008f4c:	693b      	ldr	r3, [r7, #16]
 8008f4e:	685b      	ldr	r3, [r3, #4]
 8008f50:	68db      	ldr	r3, [r3, #12]
 8008f52:	4a07      	ldr	r2, [pc, #28]	; (8008f70 <vTaskSwitchContext+0xb0>)
 8008f54:	6013      	str	r3, [r2, #0]
}
 8008f56:	bf00      	nop
 8008f58:	371c      	adds	r7, #28
 8008f5a:	46bd      	mov	sp, r7
 8008f5c:	bc80      	pop	{r7}
 8008f5e:	4770      	bx	lr
 8008f60:	2000096c 	.word	0x2000096c
 8008f64:	20000958 	.word	0x20000958
 8008f68:	2000094c 	.word	0x2000094c
 8008f6c:	20000848 	.word	0x20000848
 8008f70:	20000844 	.word	0x20000844

08008f74 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008f74:	b580      	push	{r7, lr}
 8008f76:	b082      	sub	sp, #8
 8008f78:	af00      	add	r7, sp, #0
 8008f7a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008f7c:	f000 f852 	bl	8009024 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008f80:	4b06      	ldr	r3, [pc, #24]	; (8008f9c <prvIdleTask+0x28>)
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	2b01      	cmp	r3, #1
 8008f86:	d9f9      	bls.n	8008f7c <prvIdleTask+0x8>
			{
				taskYIELD();
 8008f88:	4b05      	ldr	r3, [pc, #20]	; (8008fa0 <prvIdleTask+0x2c>)
 8008f8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008f8e:	601a      	str	r2, [r3, #0]
 8008f90:	f3bf 8f4f 	dsb	sy
 8008f94:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008f98:	e7f0      	b.n	8008f7c <prvIdleTask+0x8>
 8008f9a:	bf00      	nop
 8008f9c:	20000848 	.word	0x20000848
 8008fa0:	e000ed04 	.word	0xe000ed04

08008fa4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008fa4:	b580      	push	{r7, lr}
 8008fa6:	b082      	sub	sp, #8
 8008fa8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008faa:	2300      	movs	r3, #0
 8008fac:	607b      	str	r3, [r7, #4]
 8008fae:	e00c      	b.n	8008fca <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008fb0:	687a      	ldr	r2, [r7, #4]
 8008fb2:	4613      	mov	r3, r2
 8008fb4:	009b      	lsls	r3, r3, #2
 8008fb6:	4413      	add	r3, r2
 8008fb8:	009b      	lsls	r3, r3, #2
 8008fba:	4a12      	ldr	r2, [pc, #72]	; (8009004 <prvInitialiseTaskLists+0x60>)
 8008fbc:	4413      	add	r3, r2
 8008fbe:	4618      	mov	r0, r3
 8008fc0:	f7ff fb48 	bl	8008654 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	3301      	adds	r3, #1
 8008fc8:	607b      	str	r3, [r7, #4]
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	2b06      	cmp	r3, #6
 8008fce:	d9ef      	bls.n	8008fb0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008fd0:	480d      	ldr	r0, [pc, #52]	; (8009008 <prvInitialiseTaskLists+0x64>)
 8008fd2:	f7ff fb3f 	bl	8008654 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008fd6:	480d      	ldr	r0, [pc, #52]	; (800900c <prvInitialiseTaskLists+0x68>)
 8008fd8:	f7ff fb3c 	bl	8008654 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008fdc:	480c      	ldr	r0, [pc, #48]	; (8009010 <prvInitialiseTaskLists+0x6c>)
 8008fde:	f7ff fb39 	bl	8008654 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008fe2:	480c      	ldr	r0, [pc, #48]	; (8009014 <prvInitialiseTaskLists+0x70>)
 8008fe4:	f7ff fb36 	bl	8008654 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008fe8:	480b      	ldr	r0, [pc, #44]	; (8009018 <prvInitialiseTaskLists+0x74>)
 8008fea:	f7ff fb33 	bl	8008654 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008fee:	4b0b      	ldr	r3, [pc, #44]	; (800901c <prvInitialiseTaskLists+0x78>)
 8008ff0:	4a05      	ldr	r2, [pc, #20]	; (8009008 <prvInitialiseTaskLists+0x64>)
 8008ff2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008ff4:	4b0a      	ldr	r3, [pc, #40]	; (8009020 <prvInitialiseTaskLists+0x7c>)
 8008ff6:	4a05      	ldr	r2, [pc, #20]	; (800900c <prvInitialiseTaskLists+0x68>)
 8008ff8:	601a      	str	r2, [r3, #0]
}
 8008ffa:	bf00      	nop
 8008ffc:	3708      	adds	r7, #8
 8008ffe:	46bd      	mov	sp, r7
 8009000:	bd80      	pop	{r7, pc}
 8009002:	bf00      	nop
 8009004:	20000848 	.word	0x20000848
 8009008:	200008d4 	.word	0x200008d4
 800900c:	200008e8 	.word	0x200008e8
 8009010:	20000904 	.word	0x20000904
 8009014:	20000918 	.word	0x20000918
 8009018:	20000930 	.word	0x20000930
 800901c:	200008fc 	.word	0x200008fc
 8009020:	20000900 	.word	0x20000900

08009024 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009024:	b580      	push	{r7, lr}
 8009026:	b082      	sub	sp, #8
 8009028:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800902a:	e019      	b.n	8009060 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800902c:	f000 f9d6 	bl	80093dc <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8009030:	4b10      	ldr	r3, [pc, #64]	; (8009074 <prvCheckTasksWaitingTermination+0x50>)
 8009032:	68db      	ldr	r3, [r3, #12]
 8009034:	68db      	ldr	r3, [r3, #12]
 8009036:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	3304      	adds	r3, #4
 800903c:	4618      	mov	r0, r3
 800903e:	f7ff fb8f 	bl	8008760 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009042:	4b0d      	ldr	r3, [pc, #52]	; (8009078 <prvCheckTasksWaitingTermination+0x54>)
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	3b01      	subs	r3, #1
 8009048:	4a0b      	ldr	r2, [pc, #44]	; (8009078 <prvCheckTasksWaitingTermination+0x54>)
 800904a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800904c:	4b0b      	ldr	r3, [pc, #44]	; (800907c <prvCheckTasksWaitingTermination+0x58>)
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	3b01      	subs	r3, #1
 8009052:	4a0a      	ldr	r2, [pc, #40]	; (800907c <prvCheckTasksWaitingTermination+0x58>)
 8009054:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009056:	f000 f9f1 	bl	800943c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800905a:	6878      	ldr	r0, [r7, #4]
 800905c:	f000 f810 	bl	8009080 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009060:	4b06      	ldr	r3, [pc, #24]	; (800907c <prvCheckTasksWaitingTermination+0x58>)
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	2b00      	cmp	r3, #0
 8009066:	d1e1      	bne.n	800902c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009068:	bf00      	nop
 800906a:	bf00      	nop
 800906c:	3708      	adds	r7, #8
 800906e:	46bd      	mov	sp, r7
 8009070:	bd80      	pop	{r7, pc}
 8009072:	bf00      	nop
 8009074:	20000918 	.word	0x20000918
 8009078:	20000944 	.word	0x20000944
 800907c:	2000092c 	.word	0x2000092c

08009080 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009080:	b580      	push	{r7, lr}
 8009082:	b084      	sub	sp, #16
 8009084:	af00      	add	r7, sp, #0
 8009086:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800908e:	2b00      	cmp	r3, #0
 8009090:	d108      	bne.n	80090a4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009096:	4618      	mov	r0, r3
 8009098:	f000 fb26 	bl	80096e8 <vPortFree>
				vPortFree( pxTCB );
 800909c:	6878      	ldr	r0, [r7, #4]
 800909e:	f000 fb23 	bl	80096e8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80090a2:	e018      	b.n	80090d6 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80090aa:	2b01      	cmp	r3, #1
 80090ac:	d103      	bne.n	80090b6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80090ae:	6878      	ldr	r0, [r7, #4]
 80090b0:	f000 fb1a 	bl	80096e8 <vPortFree>
	}
 80090b4:	e00f      	b.n	80090d6 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80090bc:	2b02      	cmp	r3, #2
 80090be:	d00a      	beq.n	80090d6 <prvDeleteTCB+0x56>
	__asm volatile
 80090c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090c4:	f383 8811 	msr	BASEPRI, r3
 80090c8:	f3bf 8f6f 	isb	sy
 80090cc:	f3bf 8f4f 	dsb	sy
 80090d0:	60fb      	str	r3, [r7, #12]
}
 80090d2:	bf00      	nop
 80090d4:	e7fe      	b.n	80090d4 <prvDeleteTCB+0x54>
	}
 80090d6:	bf00      	nop
 80090d8:	3710      	adds	r7, #16
 80090da:	46bd      	mov	sp, r7
 80090dc:	bd80      	pop	{r7, pc}
	...

080090e0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80090e0:	b480      	push	{r7}
 80090e2:	b083      	sub	sp, #12
 80090e4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80090e6:	4b0e      	ldr	r3, [pc, #56]	; (8009120 <prvResetNextTaskUnblockTime+0x40>)
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d101      	bne.n	80090f4 <prvResetNextTaskUnblockTime+0x14>
 80090f0:	2301      	movs	r3, #1
 80090f2:	e000      	b.n	80090f6 <prvResetNextTaskUnblockTime+0x16>
 80090f4:	2300      	movs	r3, #0
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d004      	beq.n	8009104 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80090fa:	4b0a      	ldr	r3, [pc, #40]	; (8009124 <prvResetNextTaskUnblockTime+0x44>)
 80090fc:	f04f 32ff 	mov.w	r2, #4294967295
 8009100:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009102:	e008      	b.n	8009116 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8009104:	4b06      	ldr	r3, [pc, #24]	; (8009120 <prvResetNextTaskUnblockTime+0x40>)
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	68db      	ldr	r3, [r3, #12]
 800910a:	68db      	ldr	r3, [r3, #12]
 800910c:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	685b      	ldr	r3, [r3, #4]
 8009112:	4a04      	ldr	r2, [pc, #16]	; (8009124 <prvResetNextTaskUnblockTime+0x44>)
 8009114:	6013      	str	r3, [r2, #0]
}
 8009116:	bf00      	nop
 8009118:	370c      	adds	r7, #12
 800911a:	46bd      	mov	sp, r7
 800911c:	bc80      	pop	{r7}
 800911e:	4770      	bx	lr
 8009120:	200008fc 	.word	0x200008fc
 8009124:	20000964 	.word	0x20000964

08009128 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009128:	b580      	push	{r7, lr}
 800912a:	b084      	sub	sp, #16
 800912c:	af00      	add	r7, sp, #0
 800912e:	6078      	str	r0, [r7, #4]
 8009130:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009132:	4b29      	ldr	r3, [pc, #164]	; (80091d8 <prvAddCurrentTaskToDelayedList+0xb0>)
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009138:	4b28      	ldr	r3, [pc, #160]	; (80091dc <prvAddCurrentTaskToDelayedList+0xb4>)
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	3304      	adds	r3, #4
 800913e:	4618      	mov	r0, r3
 8009140:	f7ff fb0e 	bl	8008760 <uxListRemove>
 8009144:	4603      	mov	r3, r0
 8009146:	2b00      	cmp	r3, #0
 8009148:	d10b      	bne.n	8009162 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800914a:	4b24      	ldr	r3, [pc, #144]	; (80091dc <prvAddCurrentTaskToDelayedList+0xb4>)
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009150:	2201      	movs	r2, #1
 8009152:	fa02 f303 	lsl.w	r3, r2, r3
 8009156:	43da      	mvns	r2, r3
 8009158:	4b21      	ldr	r3, [pc, #132]	; (80091e0 <prvAddCurrentTaskToDelayedList+0xb8>)
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	4013      	ands	r3, r2
 800915e:	4a20      	ldr	r2, [pc, #128]	; (80091e0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8009160:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009168:	d10a      	bne.n	8009180 <prvAddCurrentTaskToDelayedList+0x58>
 800916a:	683b      	ldr	r3, [r7, #0]
 800916c:	2b00      	cmp	r3, #0
 800916e:	d007      	beq.n	8009180 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009170:	4b1a      	ldr	r3, [pc, #104]	; (80091dc <prvAddCurrentTaskToDelayedList+0xb4>)
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	3304      	adds	r3, #4
 8009176:	4619      	mov	r1, r3
 8009178:	481a      	ldr	r0, [pc, #104]	; (80091e4 <prvAddCurrentTaskToDelayedList+0xbc>)
 800917a:	f7ff fa96 	bl	80086aa <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800917e:	e026      	b.n	80091ce <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009180:	68fa      	ldr	r2, [r7, #12]
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	4413      	add	r3, r2
 8009186:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009188:	4b14      	ldr	r3, [pc, #80]	; (80091dc <prvAddCurrentTaskToDelayedList+0xb4>)
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	68ba      	ldr	r2, [r7, #8]
 800918e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009190:	68ba      	ldr	r2, [r7, #8]
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	429a      	cmp	r2, r3
 8009196:	d209      	bcs.n	80091ac <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009198:	4b13      	ldr	r3, [pc, #76]	; (80091e8 <prvAddCurrentTaskToDelayedList+0xc0>)
 800919a:	681a      	ldr	r2, [r3, #0]
 800919c:	4b0f      	ldr	r3, [pc, #60]	; (80091dc <prvAddCurrentTaskToDelayedList+0xb4>)
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	3304      	adds	r3, #4
 80091a2:	4619      	mov	r1, r3
 80091a4:	4610      	mov	r0, r2
 80091a6:	f7ff faa3 	bl	80086f0 <vListInsert>
}
 80091aa:	e010      	b.n	80091ce <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80091ac:	4b0f      	ldr	r3, [pc, #60]	; (80091ec <prvAddCurrentTaskToDelayedList+0xc4>)
 80091ae:	681a      	ldr	r2, [r3, #0]
 80091b0:	4b0a      	ldr	r3, [pc, #40]	; (80091dc <prvAddCurrentTaskToDelayedList+0xb4>)
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	3304      	adds	r3, #4
 80091b6:	4619      	mov	r1, r3
 80091b8:	4610      	mov	r0, r2
 80091ba:	f7ff fa99 	bl	80086f0 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80091be:	4b0c      	ldr	r3, [pc, #48]	; (80091f0 <prvAddCurrentTaskToDelayedList+0xc8>)
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	68ba      	ldr	r2, [r7, #8]
 80091c4:	429a      	cmp	r2, r3
 80091c6:	d202      	bcs.n	80091ce <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80091c8:	4a09      	ldr	r2, [pc, #36]	; (80091f0 <prvAddCurrentTaskToDelayedList+0xc8>)
 80091ca:	68bb      	ldr	r3, [r7, #8]
 80091cc:	6013      	str	r3, [r2, #0]
}
 80091ce:	bf00      	nop
 80091d0:	3710      	adds	r7, #16
 80091d2:	46bd      	mov	sp, r7
 80091d4:	bd80      	pop	{r7, pc}
 80091d6:	bf00      	nop
 80091d8:	20000948 	.word	0x20000948
 80091dc:	20000844 	.word	0x20000844
 80091e0:	2000094c 	.word	0x2000094c
 80091e4:	20000930 	.word	0x20000930
 80091e8:	20000900 	.word	0x20000900
 80091ec:	200008fc 	.word	0x200008fc
 80091f0:	20000964 	.word	0x20000964

080091f4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80091f4:	b480      	push	{r7}
 80091f6:	b085      	sub	sp, #20
 80091f8:	af00      	add	r7, sp, #0
 80091fa:	60f8      	str	r0, [r7, #12]
 80091fc:	60b9      	str	r1, [r7, #8]
 80091fe:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	3b04      	subs	r3, #4
 8009204:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009206:	68fb      	ldr	r3, [r7, #12]
 8009208:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800920c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	3b04      	subs	r3, #4
 8009212:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009214:	68bb      	ldr	r3, [r7, #8]
 8009216:	f023 0201 	bic.w	r2, r3, #1
 800921a:	68fb      	ldr	r3, [r7, #12]
 800921c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	3b04      	subs	r3, #4
 8009222:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009224:	4a08      	ldr	r2, [pc, #32]	; (8009248 <pxPortInitialiseStack+0x54>)
 8009226:	68fb      	ldr	r3, [r7, #12]
 8009228:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800922a:	68fb      	ldr	r3, [r7, #12]
 800922c:	3b14      	subs	r3, #20
 800922e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009230:	687a      	ldr	r2, [r7, #4]
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	3b20      	subs	r3, #32
 800923a:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800923c:	68fb      	ldr	r3, [r7, #12]
}
 800923e:	4618      	mov	r0, r3
 8009240:	3714      	adds	r7, #20
 8009242:	46bd      	mov	sp, r7
 8009244:	bc80      	pop	{r7}
 8009246:	4770      	bx	lr
 8009248:	0800924d 	.word	0x0800924d

0800924c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800924c:	b480      	push	{r7}
 800924e:	b085      	sub	sp, #20
 8009250:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8009252:	2300      	movs	r3, #0
 8009254:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009256:	4b12      	ldr	r3, [pc, #72]	; (80092a0 <prvTaskExitError+0x54>)
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800925e:	d00a      	beq.n	8009276 <prvTaskExitError+0x2a>
	__asm volatile
 8009260:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009264:	f383 8811 	msr	BASEPRI, r3
 8009268:	f3bf 8f6f 	isb	sy
 800926c:	f3bf 8f4f 	dsb	sy
 8009270:	60fb      	str	r3, [r7, #12]
}
 8009272:	bf00      	nop
 8009274:	e7fe      	b.n	8009274 <prvTaskExitError+0x28>
	__asm volatile
 8009276:	f04f 0350 	mov.w	r3, #80	; 0x50
 800927a:	f383 8811 	msr	BASEPRI, r3
 800927e:	f3bf 8f6f 	isb	sy
 8009282:	f3bf 8f4f 	dsb	sy
 8009286:	60bb      	str	r3, [r7, #8]
}
 8009288:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800928a:	bf00      	nop
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	2b00      	cmp	r3, #0
 8009290:	d0fc      	beq.n	800928c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009292:	bf00      	nop
 8009294:	bf00      	nop
 8009296:	3714      	adds	r7, #20
 8009298:	46bd      	mov	sp, r7
 800929a:	bc80      	pop	{r7}
 800929c:	4770      	bx	lr
 800929e:	bf00      	nop
 80092a0:	20000018 	.word	0x20000018
	...

080092b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80092b0:	4b07      	ldr	r3, [pc, #28]	; (80092d0 <pxCurrentTCBConst2>)
 80092b2:	6819      	ldr	r1, [r3, #0]
 80092b4:	6808      	ldr	r0, [r1, #0]
 80092b6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80092ba:	f380 8809 	msr	PSP, r0
 80092be:	f3bf 8f6f 	isb	sy
 80092c2:	f04f 0000 	mov.w	r0, #0
 80092c6:	f380 8811 	msr	BASEPRI, r0
 80092ca:	f04e 0e0d 	orr.w	lr, lr, #13
 80092ce:	4770      	bx	lr

080092d0 <pxCurrentTCBConst2>:
 80092d0:	20000844 	.word	0x20000844
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80092d4:	bf00      	nop
 80092d6:	bf00      	nop

080092d8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 80092d8:	4806      	ldr	r0, [pc, #24]	; (80092f4 <prvPortStartFirstTask+0x1c>)
 80092da:	6800      	ldr	r0, [r0, #0]
 80092dc:	6800      	ldr	r0, [r0, #0]
 80092de:	f380 8808 	msr	MSP, r0
 80092e2:	b662      	cpsie	i
 80092e4:	b661      	cpsie	f
 80092e6:	f3bf 8f4f 	dsb	sy
 80092ea:	f3bf 8f6f 	isb	sy
 80092ee:	df00      	svc	0
 80092f0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80092f2:	bf00      	nop
 80092f4:	e000ed08 	.word	0xe000ed08

080092f8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80092f8:	b580      	push	{r7, lr}
 80092fa:	b084      	sub	sp, #16
 80092fc:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80092fe:	4b32      	ldr	r3, [pc, #200]	; (80093c8 <xPortStartScheduler+0xd0>)
 8009300:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	781b      	ldrb	r3, [r3, #0]
 8009306:	b2db      	uxtb	r3, r3
 8009308:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	22ff      	movs	r2, #255	; 0xff
 800930e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	781b      	ldrb	r3, [r3, #0]
 8009314:	b2db      	uxtb	r3, r3
 8009316:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009318:	78fb      	ldrb	r3, [r7, #3]
 800931a:	b2db      	uxtb	r3, r3
 800931c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009320:	b2da      	uxtb	r2, r3
 8009322:	4b2a      	ldr	r3, [pc, #168]	; (80093cc <xPortStartScheduler+0xd4>)
 8009324:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009326:	4b2a      	ldr	r3, [pc, #168]	; (80093d0 <xPortStartScheduler+0xd8>)
 8009328:	2207      	movs	r2, #7
 800932a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800932c:	e009      	b.n	8009342 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800932e:	4b28      	ldr	r3, [pc, #160]	; (80093d0 <xPortStartScheduler+0xd8>)
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	3b01      	subs	r3, #1
 8009334:	4a26      	ldr	r2, [pc, #152]	; (80093d0 <xPortStartScheduler+0xd8>)
 8009336:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009338:	78fb      	ldrb	r3, [r7, #3]
 800933a:	b2db      	uxtb	r3, r3
 800933c:	005b      	lsls	r3, r3, #1
 800933e:	b2db      	uxtb	r3, r3
 8009340:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009342:	78fb      	ldrb	r3, [r7, #3]
 8009344:	b2db      	uxtb	r3, r3
 8009346:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800934a:	2b80      	cmp	r3, #128	; 0x80
 800934c:	d0ef      	beq.n	800932e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800934e:	4b20      	ldr	r3, [pc, #128]	; (80093d0 <xPortStartScheduler+0xd8>)
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	f1c3 0307 	rsb	r3, r3, #7
 8009356:	2b04      	cmp	r3, #4
 8009358:	d00a      	beq.n	8009370 <xPortStartScheduler+0x78>
	__asm volatile
 800935a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800935e:	f383 8811 	msr	BASEPRI, r3
 8009362:	f3bf 8f6f 	isb	sy
 8009366:	f3bf 8f4f 	dsb	sy
 800936a:	60bb      	str	r3, [r7, #8]
}
 800936c:	bf00      	nop
 800936e:	e7fe      	b.n	800936e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009370:	4b17      	ldr	r3, [pc, #92]	; (80093d0 <xPortStartScheduler+0xd8>)
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	021b      	lsls	r3, r3, #8
 8009376:	4a16      	ldr	r2, [pc, #88]	; (80093d0 <xPortStartScheduler+0xd8>)
 8009378:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800937a:	4b15      	ldr	r3, [pc, #84]	; (80093d0 <xPortStartScheduler+0xd8>)
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009382:	4a13      	ldr	r2, [pc, #76]	; (80093d0 <xPortStartScheduler+0xd8>)
 8009384:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	b2da      	uxtb	r2, r3
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800938e:	4b11      	ldr	r3, [pc, #68]	; (80093d4 <xPortStartScheduler+0xdc>)
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	4a10      	ldr	r2, [pc, #64]	; (80093d4 <xPortStartScheduler+0xdc>)
 8009394:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009398:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800939a:	4b0e      	ldr	r3, [pc, #56]	; (80093d4 <xPortStartScheduler+0xdc>)
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	4a0d      	ldr	r2, [pc, #52]	; (80093d4 <xPortStartScheduler+0xdc>)
 80093a0:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80093a4:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80093a6:	f000 f8b9 	bl	800951c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80093aa:	4b0b      	ldr	r3, [pc, #44]	; (80093d8 <xPortStartScheduler+0xe0>)
 80093ac:	2200      	movs	r2, #0
 80093ae:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80093b0:	f7ff ff92 	bl	80092d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80093b4:	f7ff fd84 	bl	8008ec0 <vTaskSwitchContext>
	prvTaskExitError();
 80093b8:	f7ff ff48 	bl	800924c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80093bc:	2300      	movs	r3, #0
}
 80093be:	4618      	mov	r0, r3
 80093c0:	3710      	adds	r7, #16
 80093c2:	46bd      	mov	sp, r7
 80093c4:	bd80      	pop	{r7, pc}
 80093c6:	bf00      	nop
 80093c8:	e000e400 	.word	0xe000e400
 80093cc:	20000970 	.word	0x20000970
 80093d0:	20000974 	.word	0x20000974
 80093d4:	e000ed20 	.word	0xe000ed20
 80093d8:	20000018 	.word	0x20000018

080093dc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80093dc:	b480      	push	{r7}
 80093de:	b083      	sub	sp, #12
 80093e0:	af00      	add	r7, sp, #0
	__asm volatile
 80093e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093e6:	f383 8811 	msr	BASEPRI, r3
 80093ea:	f3bf 8f6f 	isb	sy
 80093ee:	f3bf 8f4f 	dsb	sy
 80093f2:	607b      	str	r3, [r7, #4]
}
 80093f4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80093f6:	4b0f      	ldr	r3, [pc, #60]	; (8009434 <vPortEnterCritical+0x58>)
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	3301      	adds	r3, #1
 80093fc:	4a0d      	ldr	r2, [pc, #52]	; (8009434 <vPortEnterCritical+0x58>)
 80093fe:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009400:	4b0c      	ldr	r3, [pc, #48]	; (8009434 <vPortEnterCritical+0x58>)
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	2b01      	cmp	r3, #1
 8009406:	d10f      	bne.n	8009428 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009408:	4b0b      	ldr	r3, [pc, #44]	; (8009438 <vPortEnterCritical+0x5c>)
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	b2db      	uxtb	r3, r3
 800940e:	2b00      	cmp	r3, #0
 8009410:	d00a      	beq.n	8009428 <vPortEnterCritical+0x4c>
	__asm volatile
 8009412:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009416:	f383 8811 	msr	BASEPRI, r3
 800941a:	f3bf 8f6f 	isb	sy
 800941e:	f3bf 8f4f 	dsb	sy
 8009422:	603b      	str	r3, [r7, #0]
}
 8009424:	bf00      	nop
 8009426:	e7fe      	b.n	8009426 <vPortEnterCritical+0x4a>
	}
}
 8009428:	bf00      	nop
 800942a:	370c      	adds	r7, #12
 800942c:	46bd      	mov	sp, r7
 800942e:	bc80      	pop	{r7}
 8009430:	4770      	bx	lr
 8009432:	bf00      	nop
 8009434:	20000018 	.word	0x20000018
 8009438:	e000ed04 	.word	0xe000ed04

0800943c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800943c:	b480      	push	{r7}
 800943e:	b083      	sub	sp, #12
 8009440:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009442:	4b11      	ldr	r3, [pc, #68]	; (8009488 <vPortExitCritical+0x4c>)
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	2b00      	cmp	r3, #0
 8009448:	d10a      	bne.n	8009460 <vPortExitCritical+0x24>
	__asm volatile
 800944a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800944e:	f383 8811 	msr	BASEPRI, r3
 8009452:	f3bf 8f6f 	isb	sy
 8009456:	f3bf 8f4f 	dsb	sy
 800945a:	607b      	str	r3, [r7, #4]
}
 800945c:	bf00      	nop
 800945e:	e7fe      	b.n	800945e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009460:	4b09      	ldr	r3, [pc, #36]	; (8009488 <vPortExitCritical+0x4c>)
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	3b01      	subs	r3, #1
 8009466:	4a08      	ldr	r2, [pc, #32]	; (8009488 <vPortExitCritical+0x4c>)
 8009468:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800946a:	4b07      	ldr	r3, [pc, #28]	; (8009488 <vPortExitCritical+0x4c>)
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	2b00      	cmp	r3, #0
 8009470:	d105      	bne.n	800947e <vPortExitCritical+0x42>
 8009472:	2300      	movs	r3, #0
 8009474:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8009476:	683b      	ldr	r3, [r7, #0]
 8009478:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800947c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800947e:	bf00      	nop
 8009480:	370c      	adds	r7, #12
 8009482:	46bd      	mov	sp, r7
 8009484:	bc80      	pop	{r7}
 8009486:	4770      	bx	lr
 8009488:	20000018 	.word	0x20000018
 800948c:	00000000 	.word	0x00000000

08009490 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009490:	f3ef 8009 	mrs	r0, PSP
 8009494:	f3bf 8f6f 	isb	sy
 8009498:	4b0d      	ldr	r3, [pc, #52]	; (80094d0 <pxCurrentTCBConst>)
 800949a:	681a      	ldr	r2, [r3, #0]
 800949c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80094a0:	6010      	str	r0, [r2, #0]
 80094a2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80094a6:	f04f 0050 	mov.w	r0, #80	; 0x50
 80094aa:	f380 8811 	msr	BASEPRI, r0
 80094ae:	f7ff fd07 	bl	8008ec0 <vTaskSwitchContext>
 80094b2:	f04f 0000 	mov.w	r0, #0
 80094b6:	f380 8811 	msr	BASEPRI, r0
 80094ba:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80094be:	6819      	ldr	r1, [r3, #0]
 80094c0:	6808      	ldr	r0, [r1, #0]
 80094c2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80094c6:	f380 8809 	msr	PSP, r0
 80094ca:	f3bf 8f6f 	isb	sy
 80094ce:	4770      	bx	lr

080094d0 <pxCurrentTCBConst>:
 80094d0:	20000844 	.word	0x20000844
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80094d4:	bf00      	nop
 80094d6:	bf00      	nop

080094d8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80094d8:	b580      	push	{r7, lr}
 80094da:	b082      	sub	sp, #8
 80094dc:	af00      	add	r7, sp, #0
	__asm volatile
 80094de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094e2:	f383 8811 	msr	BASEPRI, r3
 80094e6:	f3bf 8f6f 	isb	sy
 80094ea:	f3bf 8f4f 	dsb	sy
 80094ee:	607b      	str	r3, [r7, #4]
}
 80094f0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80094f2:	f7ff fc27 	bl	8008d44 <xTaskIncrementTick>
 80094f6:	4603      	mov	r3, r0
 80094f8:	2b00      	cmp	r3, #0
 80094fa:	d003      	beq.n	8009504 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80094fc:	4b06      	ldr	r3, [pc, #24]	; (8009518 <SysTick_Handler+0x40>)
 80094fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009502:	601a      	str	r2, [r3, #0]
 8009504:	2300      	movs	r3, #0
 8009506:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009508:	683b      	ldr	r3, [r7, #0]
 800950a:	f383 8811 	msr	BASEPRI, r3
}
 800950e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009510:	bf00      	nop
 8009512:	3708      	adds	r7, #8
 8009514:	46bd      	mov	sp, r7
 8009516:	bd80      	pop	{r7, pc}
 8009518:	e000ed04 	.word	0xe000ed04

0800951c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800951c:	b480      	push	{r7}
 800951e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009520:	4b0a      	ldr	r3, [pc, #40]	; (800954c <vPortSetupTimerInterrupt+0x30>)
 8009522:	2200      	movs	r2, #0
 8009524:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009526:	4b0a      	ldr	r3, [pc, #40]	; (8009550 <vPortSetupTimerInterrupt+0x34>)
 8009528:	2200      	movs	r2, #0
 800952a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800952c:	4b09      	ldr	r3, [pc, #36]	; (8009554 <vPortSetupTimerInterrupt+0x38>)
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	4a09      	ldr	r2, [pc, #36]	; (8009558 <vPortSetupTimerInterrupt+0x3c>)
 8009532:	fba2 2303 	umull	r2, r3, r2, r3
 8009536:	099b      	lsrs	r3, r3, #6
 8009538:	4a08      	ldr	r2, [pc, #32]	; (800955c <vPortSetupTimerInterrupt+0x40>)
 800953a:	3b01      	subs	r3, #1
 800953c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800953e:	4b03      	ldr	r3, [pc, #12]	; (800954c <vPortSetupTimerInterrupt+0x30>)
 8009540:	2207      	movs	r2, #7
 8009542:	601a      	str	r2, [r3, #0]
}
 8009544:	bf00      	nop
 8009546:	46bd      	mov	sp, r7
 8009548:	bc80      	pop	{r7}
 800954a:	4770      	bx	lr
 800954c:	e000e010 	.word	0xe000e010
 8009550:	e000e018 	.word	0xe000e018
 8009554:	2000000c 	.word	0x2000000c
 8009558:	10624dd3 	.word	0x10624dd3
 800955c:	e000e014 	.word	0xe000e014

08009560 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009560:	b580      	push	{r7, lr}
 8009562:	b08a      	sub	sp, #40	; 0x28
 8009564:	af00      	add	r7, sp, #0
 8009566:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009568:	2300      	movs	r3, #0
 800956a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800956c:	f7ff fb40 	bl	8008bf0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009570:	4b58      	ldr	r3, [pc, #352]	; (80096d4 <pvPortMalloc+0x174>)
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	2b00      	cmp	r3, #0
 8009576:	d101      	bne.n	800957c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009578:	f000 f910 	bl	800979c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800957c:	4b56      	ldr	r3, [pc, #344]	; (80096d8 <pvPortMalloc+0x178>)
 800957e:	681a      	ldr	r2, [r3, #0]
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	4013      	ands	r3, r2
 8009584:	2b00      	cmp	r3, #0
 8009586:	f040 808e 	bne.w	80096a6 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	2b00      	cmp	r3, #0
 800958e:	d01d      	beq.n	80095cc <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8009590:	2208      	movs	r2, #8
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	4413      	add	r3, r2
 8009596:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	f003 0307 	and.w	r3, r3, #7
 800959e:	2b00      	cmp	r3, #0
 80095a0:	d014      	beq.n	80095cc <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	f023 0307 	bic.w	r3, r3, #7
 80095a8:	3308      	adds	r3, #8
 80095aa:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	f003 0307 	and.w	r3, r3, #7
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	d00a      	beq.n	80095cc <pvPortMalloc+0x6c>
	__asm volatile
 80095b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095ba:	f383 8811 	msr	BASEPRI, r3
 80095be:	f3bf 8f6f 	isb	sy
 80095c2:	f3bf 8f4f 	dsb	sy
 80095c6:	617b      	str	r3, [r7, #20]
}
 80095c8:	bf00      	nop
 80095ca:	e7fe      	b.n	80095ca <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	d069      	beq.n	80096a6 <pvPortMalloc+0x146>
 80095d2:	4b42      	ldr	r3, [pc, #264]	; (80096dc <pvPortMalloc+0x17c>)
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	687a      	ldr	r2, [r7, #4]
 80095d8:	429a      	cmp	r2, r3
 80095da:	d864      	bhi.n	80096a6 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80095dc:	4b40      	ldr	r3, [pc, #256]	; (80096e0 <pvPortMalloc+0x180>)
 80095de:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80095e0:	4b3f      	ldr	r3, [pc, #252]	; (80096e0 <pvPortMalloc+0x180>)
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80095e6:	e004      	b.n	80095f2 <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80095e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095ea:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80095ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80095f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095f4:	685b      	ldr	r3, [r3, #4]
 80095f6:	687a      	ldr	r2, [r7, #4]
 80095f8:	429a      	cmp	r2, r3
 80095fa:	d903      	bls.n	8009604 <pvPortMalloc+0xa4>
 80095fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	2b00      	cmp	r3, #0
 8009602:	d1f1      	bne.n	80095e8 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009604:	4b33      	ldr	r3, [pc, #204]	; (80096d4 <pvPortMalloc+0x174>)
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800960a:	429a      	cmp	r2, r3
 800960c:	d04b      	beq.n	80096a6 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800960e:	6a3b      	ldr	r3, [r7, #32]
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	2208      	movs	r2, #8
 8009614:	4413      	add	r3, r2
 8009616:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800961a:	681a      	ldr	r2, [r3, #0]
 800961c:	6a3b      	ldr	r3, [r7, #32]
 800961e:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009622:	685a      	ldr	r2, [r3, #4]
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	1ad2      	subs	r2, r2, r3
 8009628:	2308      	movs	r3, #8
 800962a:	005b      	lsls	r3, r3, #1
 800962c:	429a      	cmp	r2, r3
 800962e:	d91f      	bls.n	8009670 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009630:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	4413      	add	r3, r2
 8009636:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009638:	69bb      	ldr	r3, [r7, #24]
 800963a:	f003 0307 	and.w	r3, r3, #7
 800963e:	2b00      	cmp	r3, #0
 8009640:	d00a      	beq.n	8009658 <pvPortMalloc+0xf8>
	__asm volatile
 8009642:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009646:	f383 8811 	msr	BASEPRI, r3
 800964a:	f3bf 8f6f 	isb	sy
 800964e:	f3bf 8f4f 	dsb	sy
 8009652:	613b      	str	r3, [r7, #16]
}
 8009654:	bf00      	nop
 8009656:	e7fe      	b.n	8009656 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800965a:	685a      	ldr	r2, [r3, #4]
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	1ad2      	subs	r2, r2, r3
 8009660:	69bb      	ldr	r3, [r7, #24]
 8009662:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009666:	687a      	ldr	r2, [r7, #4]
 8009668:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800966a:	69b8      	ldr	r0, [r7, #24]
 800966c:	f000 f8f8 	bl	8009860 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009670:	4b1a      	ldr	r3, [pc, #104]	; (80096dc <pvPortMalloc+0x17c>)
 8009672:	681a      	ldr	r2, [r3, #0]
 8009674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009676:	685b      	ldr	r3, [r3, #4]
 8009678:	1ad3      	subs	r3, r2, r3
 800967a:	4a18      	ldr	r2, [pc, #96]	; (80096dc <pvPortMalloc+0x17c>)
 800967c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800967e:	4b17      	ldr	r3, [pc, #92]	; (80096dc <pvPortMalloc+0x17c>)
 8009680:	681a      	ldr	r2, [r3, #0]
 8009682:	4b18      	ldr	r3, [pc, #96]	; (80096e4 <pvPortMalloc+0x184>)
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	429a      	cmp	r2, r3
 8009688:	d203      	bcs.n	8009692 <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800968a:	4b14      	ldr	r3, [pc, #80]	; (80096dc <pvPortMalloc+0x17c>)
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	4a15      	ldr	r2, [pc, #84]	; (80096e4 <pvPortMalloc+0x184>)
 8009690:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009694:	685a      	ldr	r2, [r3, #4]
 8009696:	4b10      	ldr	r3, [pc, #64]	; (80096d8 <pvPortMalloc+0x178>)
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	431a      	orrs	r2, r3
 800969c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800969e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80096a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096a2:	2200      	movs	r2, #0
 80096a4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80096a6:	f7ff fab1 	bl	8008c0c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80096aa:	69fb      	ldr	r3, [r7, #28]
 80096ac:	f003 0307 	and.w	r3, r3, #7
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	d00a      	beq.n	80096ca <pvPortMalloc+0x16a>
	__asm volatile
 80096b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096b8:	f383 8811 	msr	BASEPRI, r3
 80096bc:	f3bf 8f6f 	isb	sy
 80096c0:	f3bf 8f4f 	dsb	sy
 80096c4:	60fb      	str	r3, [r7, #12]
}
 80096c6:	bf00      	nop
 80096c8:	e7fe      	b.n	80096c8 <pvPortMalloc+0x168>
	return pvReturn;
 80096ca:	69fb      	ldr	r3, [r7, #28]
}
 80096cc:	4618      	mov	r0, r3
 80096ce:	3728      	adds	r7, #40	; 0x28
 80096d0:	46bd      	mov	sp, r7
 80096d2:	bd80      	pop	{r7, pc}
 80096d4:	20001580 	.word	0x20001580
 80096d8:	2000158c 	.word	0x2000158c
 80096dc:	20001584 	.word	0x20001584
 80096e0:	20001578 	.word	0x20001578
 80096e4:	20001588 	.word	0x20001588

080096e8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80096e8:	b580      	push	{r7, lr}
 80096ea:	b086      	sub	sp, #24
 80096ec:	af00      	add	r7, sp, #0
 80096ee:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d048      	beq.n	800978c <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80096fa:	2308      	movs	r3, #8
 80096fc:	425b      	negs	r3, r3
 80096fe:	697a      	ldr	r2, [r7, #20]
 8009700:	4413      	add	r3, r2
 8009702:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009704:	697b      	ldr	r3, [r7, #20]
 8009706:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009708:	693b      	ldr	r3, [r7, #16]
 800970a:	685a      	ldr	r2, [r3, #4]
 800970c:	4b21      	ldr	r3, [pc, #132]	; (8009794 <vPortFree+0xac>)
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	4013      	ands	r3, r2
 8009712:	2b00      	cmp	r3, #0
 8009714:	d10a      	bne.n	800972c <vPortFree+0x44>
	__asm volatile
 8009716:	f04f 0350 	mov.w	r3, #80	; 0x50
 800971a:	f383 8811 	msr	BASEPRI, r3
 800971e:	f3bf 8f6f 	isb	sy
 8009722:	f3bf 8f4f 	dsb	sy
 8009726:	60fb      	str	r3, [r7, #12]
}
 8009728:	bf00      	nop
 800972a:	e7fe      	b.n	800972a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800972c:	693b      	ldr	r3, [r7, #16]
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	2b00      	cmp	r3, #0
 8009732:	d00a      	beq.n	800974a <vPortFree+0x62>
	__asm volatile
 8009734:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009738:	f383 8811 	msr	BASEPRI, r3
 800973c:	f3bf 8f6f 	isb	sy
 8009740:	f3bf 8f4f 	dsb	sy
 8009744:	60bb      	str	r3, [r7, #8]
}
 8009746:	bf00      	nop
 8009748:	e7fe      	b.n	8009748 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800974a:	693b      	ldr	r3, [r7, #16]
 800974c:	685a      	ldr	r2, [r3, #4]
 800974e:	4b11      	ldr	r3, [pc, #68]	; (8009794 <vPortFree+0xac>)
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	4013      	ands	r3, r2
 8009754:	2b00      	cmp	r3, #0
 8009756:	d019      	beq.n	800978c <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009758:	693b      	ldr	r3, [r7, #16]
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	2b00      	cmp	r3, #0
 800975e:	d115      	bne.n	800978c <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009760:	693b      	ldr	r3, [r7, #16]
 8009762:	685a      	ldr	r2, [r3, #4]
 8009764:	4b0b      	ldr	r3, [pc, #44]	; (8009794 <vPortFree+0xac>)
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	43db      	mvns	r3, r3
 800976a:	401a      	ands	r2, r3
 800976c:	693b      	ldr	r3, [r7, #16]
 800976e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009770:	f7ff fa3e 	bl	8008bf0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009774:	693b      	ldr	r3, [r7, #16]
 8009776:	685a      	ldr	r2, [r3, #4]
 8009778:	4b07      	ldr	r3, [pc, #28]	; (8009798 <vPortFree+0xb0>)
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	4413      	add	r3, r2
 800977e:	4a06      	ldr	r2, [pc, #24]	; (8009798 <vPortFree+0xb0>)
 8009780:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009782:	6938      	ldr	r0, [r7, #16]
 8009784:	f000 f86c 	bl	8009860 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8009788:	f7ff fa40 	bl	8008c0c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800978c:	bf00      	nop
 800978e:	3718      	adds	r7, #24
 8009790:	46bd      	mov	sp, r7
 8009792:	bd80      	pop	{r7, pc}
 8009794:	2000158c 	.word	0x2000158c
 8009798:	20001584 	.word	0x20001584

0800979c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800979c:	b480      	push	{r7}
 800979e:	b085      	sub	sp, #20
 80097a0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80097a2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80097a6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80097a8:	4b27      	ldr	r3, [pc, #156]	; (8009848 <prvHeapInit+0xac>)
 80097aa:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	f003 0307 	and.w	r3, r3, #7
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	d00c      	beq.n	80097d0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80097b6:	68fb      	ldr	r3, [r7, #12]
 80097b8:	3307      	adds	r3, #7
 80097ba:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	f023 0307 	bic.w	r3, r3, #7
 80097c2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80097c4:	68ba      	ldr	r2, [r7, #8]
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	1ad3      	subs	r3, r2, r3
 80097ca:	4a1f      	ldr	r2, [pc, #124]	; (8009848 <prvHeapInit+0xac>)
 80097cc:	4413      	add	r3, r2
 80097ce:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80097d4:	4a1d      	ldr	r2, [pc, #116]	; (800984c <prvHeapInit+0xb0>)
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80097da:	4b1c      	ldr	r3, [pc, #112]	; (800984c <prvHeapInit+0xb0>)
 80097dc:	2200      	movs	r2, #0
 80097de:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	68ba      	ldr	r2, [r7, #8]
 80097e4:	4413      	add	r3, r2
 80097e6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80097e8:	2208      	movs	r2, #8
 80097ea:	68fb      	ldr	r3, [r7, #12]
 80097ec:	1a9b      	subs	r3, r3, r2
 80097ee:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80097f0:	68fb      	ldr	r3, [r7, #12]
 80097f2:	f023 0307 	bic.w	r3, r3, #7
 80097f6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80097f8:	68fb      	ldr	r3, [r7, #12]
 80097fa:	4a15      	ldr	r2, [pc, #84]	; (8009850 <prvHeapInit+0xb4>)
 80097fc:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80097fe:	4b14      	ldr	r3, [pc, #80]	; (8009850 <prvHeapInit+0xb4>)
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	2200      	movs	r2, #0
 8009804:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8009806:	4b12      	ldr	r3, [pc, #72]	; (8009850 <prvHeapInit+0xb4>)
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	2200      	movs	r2, #0
 800980c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009812:	683b      	ldr	r3, [r7, #0]
 8009814:	68fa      	ldr	r2, [r7, #12]
 8009816:	1ad2      	subs	r2, r2, r3
 8009818:	683b      	ldr	r3, [r7, #0]
 800981a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800981c:	4b0c      	ldr	r3, [pc, #48]	; (8009850 <prvHeapInit+0xb4>)
 800981e:	681a      	ldr	r2, [r3, #0]
 8009820:	683b      	ldr	r3, [r7, #0]
 8009822:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009824:	683b      	ldr	r3, [r7, #0]
 8009826:	685b      	ldr	r3, [r3, #4]
 8009828:	4a0a      	ldr	r2, [pc, #40]	; (8009854 <prvHeapInit+0xb8>)
 800982a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800982c:	683b      	ldr	r3, [r7, #0]
 800982e:	685b      	ldr	r3, [r3, #4]
 8009830:	4a09      	ldr	r2, [pc, #36]	; (8009858 <prvHeapInit+0xbc>)
 8009832:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009834:	4b09      	ldr	r3, [pc, #36]	; (800985c <prvHeapInit+0xc0>)
 8009836:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800983a:	601a      	str	r2, [r3, #0]
}
 800983c:	bf00      	nop
 800983e:	3714      	adds	r7, #20
 8009840:	46bd      	mov	sp, r7
 8009842:	bc80      	pop	{r7}
 8009844:	4770      	bx	lr
 8009846:	bf00      	nop
 8009848:	20000978 	.word	0x20000978
 800984c:	20001578 	.word	0x20001578
 8009850:	20001580 	.word	0x20001580
 8009854:	20001588 	.word	0x20001588
 8009858:	20001584 	.word	0x20001584
 800985c:	2000158c 	.word	0x2000158c

08009860 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009860:	b480      	push	{r7}
 8009862:	b085      	sub	sp, #20
 8009864:	af00      	add	r7, sp, #0
 8009866:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009868:	4b27      	ldr	r3, [pc, #156]	; (8009908 <prvInsertBlockIntoFreeList+0xa8>)
 800986a:	60fb      	str	r3, [r7, #12]
 800986c:	e002      	b.n	8009874 <prvInsertBlockIntoFreeList+0x14>
 800986e:	68fb      	ldr	r3, [r7, #12]
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	60fb      	str	r3, [r7, #12]
 8009874:	68fb      	ldr	r3, [r7, #12]
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	687a      	ldr	r2, [r7, #4]
 800987a:	429a      	cmp	r2, r3
 800987c:	d8f7      	bhi.n	800986e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800987e:	68fb      	ldr	r3, [r7, #12]
 8009880:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009882:	68fb      	ldr	r3, [r7, #12]
 8009884:	685b      	ldr	r3, [r3, #4]
 8009886:	68ba      	ldr	r2, [r7, #8]
 8009888:	4413      	add	r3, r2
 800988a:	687a      	ldr	r2, [r7, #4]
 800988c:	429a      	cmp	r2, r3
 800988e:	d108      	bne.n	80098a2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009890:	68fb      	ldr	r3, [r7, #12]
 8009892:	685a      	ldr	r2, [r3, #4]
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	685b      	ldr	r3, [r3, #4]
 8009898:	441a      	add	r2, r3
 800989a:	68fb      	ldr	r3, [r7, #12]
 800989c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800989e:	68fb      	ldr	r3, [r7, #12]
 80098a0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	685b      	ldr	r3, [r3, #4]
 80098aa:	68ba      	ldr	r2, [r7, #8]
 80098ac:	441a      	add	r2, r3
 80098ae:	68fb      	ldr	r3, [r7, #12]
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	429a      	cmp	r2, r3
 80098b4:	d118      	bne.n	80098e8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80098b6:	68fb      	ldr	r3, [r7, #12]
 80098b8:	681a      	ldr	r2, [r3, #0]
 80098ba:	4b14      	ldr	r3, [pc, #80]	; (800990c <prvInsertBlockIntoFreeList+0xac>)
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	429a      	cmp	r2, r3
 80098c0:	d00d      	beq.n	80098de <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	685a      	ldr	r2, [r3, #4]
 80098c6:	68fb      	ldr	r3, [r7, #12]
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	685b      	ldr	r3, [r3, #4]
 80098cc:	441a      	add	r2, r3
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80098d2:	68fb      	ldr	r3, [r7, #12]
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	681a      	ldr	r2, [r3, #0]
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	601a      	str	r2, [r3, #0]
 80098dc:	e008      	b.n	80098f0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80098de:	4b0b      	ldr	r3, [pc, #44]	; (800990c <prvInsertBlockIntoFreeList+0xac>)
 80098e0:	681a      	ldr	r2, [r3, #0]
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	601a      	str	r2, [r3, #0]
 80098e6:	e003      	b.n	80098f0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80098e8:	68fb      	ldr	r3, [r7, #12]
 80098ea:	681a      	ldr	r2, [r3, #0]
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80098f0:	68fa      	ldr	r2, [r7, #12]
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	429a      	cmp	r2, r3
 80098f6:	d002      	beq.n	80098fe <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80098f8:	68fb      	ldr	r3, [r7, #12]
 80098fa:	687a      	ldr	r2, [r7, #4]
 80098fc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80098fe:	bf00      	nop
 8009900:	3714      	adds	r7, #20
 8009902:	46bd      	mov	sp, r7
 8009904:	bc80      	pop	{r7}
 8009906:	4770      	bx	lr
 8009908:	20001578 	.word	0x20001578
 800990c:	20001580 	.word	0x20001580

08009910 <gcvt>:
 8009910:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009912:	461c      	mov	r4, r3
 8009914:	4615      	mov	r5, r2
 8009916:	2300      	movs	r3, #0
 8009918:	2200      	movs	r2, #0
 800991a:	b085      	sub	sp, #20
 800991c:	4606      	mov	r6, r0
 800991e:	460f      	mov	r7, r1
 8009920:	f7f7 f84c 	bl	80009bc <__aeabi_dcmplt>
 8009924:	4623      	mov	r3, r4
 8009926:	b118      	cbz	r0, 8009930 <gcvt+0x20>
 8009928:	222d      	movs	r2, #45	; 0x2d
 800992a:	3d01      	subs	r5, #1
 800992c:	f803 2b01 	strb.w	r2, [r3], #1
 8009930:	2267      	movs	r2, #103	; 0x67
 8009932:	2100      	movs	r1, #0
 8009934:	e9cd 5300 	strd	r5, r3, [sp]
 8009938:	e9cd 2102 	strd	r2, r1, [sp, #8]
 800993c:	4905      	ldr	r1, [pc, #20]	; (8009954 <gcvt+0x44>)
 800993e:	4632      	mov	r2, r6
 8009940:	463b      	mov	r3, r7
 8009942:	6808      	ldr	r0, [r1, #0]
 8009944:	f001 fbb4 	bl	800b0b0 <_gcvt>
 8009948:	2800      	cmp	r0, #0
 800994a:	bf14      	ite	ne
 800994c:	4620      	movne	r0, r4
 800994e:	2000      	moveq	r0, #0
 8009950:	b005      	add	sp, #20
 8009952:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009954:	2000001c 	.word	0x2000001c

08009958 <__errno>:
 8009958:	4b01      	ldr	r3, [pc, #4]	; (8009960 <__errno+0x8>)
 800995a:	6818      	ldr	r0, [r3, #0]
 800995c:	4770      	bx	lr
 800995e:	bf00      	nop
 8009960:	2000001c 	.word	0x2000001c

08009964 <__libc_init_array>:
 8009964:	b570      	push	{r4, r5, r6, lr}
 8009966:	2600      	movs	r6, #0
 8009968:	4d0c      	ldr	r5, [pc, #48]	; (800999c <__libc_init_array+0x38>)
 800996a:	4c0d      	ldr	r4, [pc, #52]	; (80099a0 <__libc_init_array+0x3c>)
 800996c:	1b64      	subs	r4, r4, r5
 800996e:	10a4      	asrs	r4, r4, #2
 8009970:	42a6      	cmp	r6, r4
 8009972:	d109      	bne.n	8009988 <__libc_init_array+0x24>
 8009974:	f003 fc08 	bl	800d188 <_init>
 8009978:	2600      	movs	r6, #0
 800997a:	4d0a      	ldr	r5, [pc, #40]	; (80099a4 <__libc_init_array+0x40>)
 800997c:	4c0a      	ldr	r4, [pc, #40]	; (80099a8 <__libc_init_array+0x44>)
 800997e:	1b64      	subs	r4, r4, r5
 8009980:	10a4      	asrs	r4, r4, #2
 8009982:	42a6      	cmp	r6, r4
 8009984:	d105      	bne.n	8009992 <__libc_init_array+0x2e>
 8009986:	bd70      	pop	{r4, r5, r6, pc}
 8009988:	f855 3b04 	ldr.w	r3, [r5], #4
 800998c:	4798      	blx	r3
 800998e:	3601      	adds	r6, #1
 8009990:	e7ee      	b.n	8009970 <__libc_init_array+0xc>
 8009992:	f855 3b04 	ldr.w	r3, [r5], #4
 8009996:	4798      	blx	r3
 8009998:	3601      	adds	r6, #1
 800999a:	e7f2      	b.n	8009982 <__libc_init_array+0x1e>
 800999c:	0800d6a0 	.word	0x0800d6a0
 80099a0:	0800d6a0 	.word	0x0800d6a0
 80099a4:	0800d6a0 	.word	0x0800d6a0
 80099a8:	0800d6a4 	.word	0x0800d6a4

080099ac <memcpy>:
 80099ac:	440a      	add	r2, r1
 80099ae:	4291      	cmp	r1, r2
 80099b0:	f100 33ff 	add.w	r3, r0, #4294967295
 80099b4:	d100      	bne.n	80099b8 <memcpy+0xc>
 80099b6:	4770      	bx	lr
 80099b8:	b510      	push	{r4, lr}
 80099ba:	f811 4b01 	ldrb.w	r4, [r1], #1
 80099be:	4291      	cmp	r1, r2
 80099c0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80099c4:	d1f9      	bne.n	80099ba <memcpy+0xe>
 80099c6:	bd10      	pop	{r4, pc}

080099c8 <memset>:
 80099c8:	4603      	mov	r3, r0
 80099ca:	4402      	add	r2, r0
 80099cc:	4293      	cmp	r3, r2
 80099ce:	d100      	bne.n	80099d2 <memset+0xa>
 80099d0:	4770      	bx	lr
 80099d2:	f803 1b01 	strb.w	r1, [r3], #1
 80099d6:	e7f9      	b.n	80099cc <memset+0x4>

080099d8 <__cvt>:
 80099d8:	2b00      	cmp	r3, #0
 80099da:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80099de:	461f      	mov	r7, r3
 80099e0:	bfbb      	ittet	lt
 80099e2:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 80099e6:	461f      	movlt	r7, r3
 80099e8:	2300      	movge	r3, #0
 80099ea:	232d      	movlt	r3, #45	; 0x2d
 80099ec:	b088      	sub	sp, #32
 80099ee:	4614      	mov	r4, r2
 80099f0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80099f2:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80099f4:	7013      	strb	r3, [r2, #0]
 80099f6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80099f8:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 80099fc:	f023 0820 	bic.w	r8, r3, #32
 8009a00:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009a04:	d005      	beq.n	8009a12 <__cvt+0x3a>
 8009a06:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8009a0a:	d100      	bne.n	8009a0e <__cvt+0x36>
 8009a0c:	3501      	adds	r5, #1
 8009a0e:	2302      	movs	r3, #2
 8009a10:	e000      	b.n	8009a14 <__cvt+0x3c>
 8009a12:	2303      	movs	r3, #3
 8009a14:	aa07      	add	r2, sp, #28
 8009a16:	9204      	str	r2, [sp, #16]
 8009a18:	aa06      	add	r2, sp, #24
 8009a1a:	e9cd a202 	strd	sl, r2, [sp, #8]
 8009a1e:	e9cd 3500 	strd	r3, r5, [sp]
 8009a22:	4622      	mov	r2, r4
 8009a24:	463b      	mov	r3, r7
 8009a26:	f000 fcdb 	bl	800a3e0 <_dtoa_r>
 8009a2a:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8009a2e:	4606      	mov	r6, r0
 8009a30:	d102      	bne.n	8009a38 <__cvt+0x60>
 8009a32:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009a34:	07db      	lsls	r3, r3, #31
 8009a36:	d522      	bpl.n	8009a7e <__cvt+0xa6>
 8009a38:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009a3c:	eb06 0905 	add.w	r9, r6, r5
 8009a40:	d110      	bne.n	8009a64 <__cvt+0x8c>
 8009a42:	7833      	ldrb	r3, [r6, #0]
 8009a44:	2b30      	cmp	r3, #48	; 0x30
 8009a46:	d10a      	bne.n	8009a5e <__cvt+0x86>
 8009a48:	2200      	movs	r2, #0
 8009a4a:	2300      	movs	r3, #0
 8009a4c:	4620      	mov	r0, r4
 8009a4e:	4639      	mov	r1, r7
 8009a50:	f7f6 ffaa 	bl	80009a8 <__aeabi_dcmpeq>
 8009a54:	b918      	cbnz	r0, 8009a5e <__cvt+0x86>
 8009a56:	f1c5 0501 	rsb	r5, r5, #1
 8009a5a:	f8ca 5000 	str.w	r5, [sl]
 8009a5e:	f8da 3000 	ldr.w	r3, [sl]
 8009a62:	4499      	add	r9, r3
 8009a64:	2200      	movs	r2, #0
 8009a66:	2300      	movs	r3, #0
 8009a68:	4620      	mov	r0, r4
 8009a6a:	4639      	mov	r1, r7
 8009a6c:	f7f6 ff9c 	bl	80009a8 <__aeabi_dcmpeq>
 8009a70:	b108      	cbz	r0, 8009a76 <__cvt+0x9e>
 8009a72:	f8cd 901c 	str.w	r9, [sp, #28]
 8009a76:	2230      	movs	r2, #48	; 0x30
 8009a78:	9b07      	ldr	r3, [sp, #28]
 8009a7a:	454b      	cmp	r3, r9
 8009a7c:	d307      	bcc.n	8009a8e <__cvt+0xb6>
 8009a7e:	4630      	mov	r0, r6
 8009a80:	9b07      	ldr	r3, [sp, #28]
 8009a82:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8009a84:	1b9b      	subs	r3, r3, r6
 8009a86:	6013      	str	r3, [r2, #0]
 8009a88:	b008      	add	sp, #32
 8009a8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009a8e:	1c59      	adds	r1, r3, #1
 8009a90:	9107      	str	r1, [sp, #28]
 8009a92:	701a      	strb	r2, [r3, #0]
 8009a94:	e7f0      	b.n	8009a78 <__cvt+0xa0>

08009a96 <__exponent>:
 8009a96:	4603      	mov	r3, r0
 8009a98:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009a9a:	2900      	cmp	r1, #0
 8009a9c:	f803 2b02 	strb.w	r2, [r3], #2
 8009aa0:	bfb6      	itet	lt
 8009aa2:	222d      	movlt	r2, #45	; 0x2d
 8009aa4:	222b      	movge	r2, #43	; 0x2b
 8009aa6:	4249      	neglt	r1, r1
 8009aa8:	2909      	cmp	r1, #9
 8009aaa:	7042      	strb	r2, [r0, #1]
 8009aac:	dd2b      	ble.n	8009b06 <__exponent+0x70>
 8009aae:	f10d 0407 	add.w	r4, sp, #7
 8009ab2:	46a4      	mov	ip, r4
 8009ab4:	270a      	movs	r7, #10
 8009ab6:	fb91 f6f7 	sdiv	r6, r1, r7
 8009aba:	460a      	mov	r2, r1
 8009abc:	46a6      	mov	lr, r4
 8009abe:	fb07 1516 	mls	r5, r7, r6, r1
 8009ac2:	2a63      	cmp	r2, #99	; 0x63
 8009ac4:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8009ac8:	4631      	mov	r1, r6
 8009aca:	f104 34ff 	add.w	r4, r4, #4294967295
 8009ace:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8009ad2:	dcf0      	bgt.n	8009ab6 <__exponent+0x20>
 8009ad4:	3130      	adds	r1, #48	; 0x30
 8009ad6:	f1ae 0502 	sub.w	r5, lr, #2
 8009ada:	f804 1c01 	strb.w	r1, [r4, #-1]
 8009ade:	4629      	mov	r1, r5
 8009ae0:	1c44      	adds	r4, r0, #1
 8009ae2:	4561      	cmp	r1, ip
 8009ae4:	d30a      	bcc.n	8009afc <__exponent+0x66>
 8009ae6:	f10d 0209 	add.w	r2, sp, #9
 8009aea:	eba2 020e 	sub.w	r2, r2, lr
 8009aee:	4565      	cmp	r5, ip
 8009af0:	bf88      	it	hi
 8009af2:	2200      	movhi	r2, #0
 8009af4:	4413      	add	r3, r2
 8009af6:	1a18      	subs	r0, r3, r0
 8009af8:	b003      	add	sp, #12
 8009afa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009afc:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009b00:	f804 2f01 	strb.w	r2, [r4, #1]!
 8009b04:	e7ed      	b.n	8009ae2 <__exponent+0x4c>
 8009b06:	2330      	movs	r3, #48	; 0x30
 8009b08:	3130      	adds	r1, #48	; 0x30
 8009b0a:	7083      	strb	r3, [r0, #2]
 8009b0c:	70c1      	strb	r1, [r0, #3]
 8009b0e:	1d03      	adds	r3, r0, #4
 8009b10:	e7f1      	b.n	8009af6 <__exponent+0x60>
	...

08009b14 <_printf_float>:
 8009b14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b18:	b091      	sub	sp, #68	; 0x44
 8009b1a:	460c      	mov	r4, r1
 8009b1c:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8009b20:	4616      	mov	r6, r2
 8009b22:	461f      	mov	r7, r3
 8009b24:	4605      	mov	r5, r0
 8009b26:	f001 fc79 	bl	800b41c <_localeconv_r>
 8009b2a:	6803      	ldr	r3, [r0, #0]
 8009b2c:	4618      	mov	r0, r3
 8009b2e:	9309      	str	r3, [sp, #36]	; 0x24
 8009b30:	f7f6 fb0e 	bl	8000150 <strlen>
 8009b34:	2300      	movs	r3, #0
 8009b36:	930e      	str	r3, [sp, #56]	; 0x38
 8009b38:	f8d8 3000 	ldr.w	r3, [r8]
 8009b3c:	900a      	str	r0, [sp, #40]	; 0x28
 8009b3e:	3307      	adds	r3, #7
 8009b40:	f023 0307 	bic.w	r3, r3, #7
 8009b44:	f103 0208 	add.w	r2, r3, #8
 8009b48:	f894 9018 	ldrb.w	r9, [r4, #24]
 8009b4c:	f8d4 b000 	ldr.w	fp, [r4]
 8009b50:	f8c8 2000 	str.w	r2, [r8]
 8009b54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b58:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8009b5c:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8009b60:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8009b64:	930b      	str	r3, [sp, #44]	; 0x2c
 8009b66:	f04f 32ff 	mov.w	r2, #4294967295
 8009b6a:	4640      	mov	r0, r8
 8009b6c:	4b9c      	ldr	r3, [pc, #624]	; (8009de0 <_printf_float+0x2cc>)
 8009b6e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009b70:	f7f6 ff4c 	bl	8000a0c <__aeabi_dcmpun>
 8009b74:	bb70      	cbnz	r0, 8009bd4 <_printf_float+0xc0>
 8009b76:	f04f 32ff 	mov.w	r2, #4294967295
 8009b7a:	4640      	mov	r0, r8
 8009b7c:	4b98      	ldr	r3, [pc, #608]	; (8009de0 <_printf_float+0x2cc>)
 8009b7e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009b80:	f7f6 ff26 	bl	80009d0 <__aeabi_dcmple>
 8009b84:	bb30      	cbnz	r0, 8009bd4 <_printf_float+0xc0>
 8009b86:	2200      	movs	r2, #0
 8009b88:	2300      	movs	r3, #0
 8009b8a:	4640      	mov	r0, r8
 8009b8c:	4651      	mov	r1, sl
 8009b8e:	f7f6 ff15 	bl	80009bc <__aeabi_dcmplt>
 8009b92:	b110      	cbz	r0, 8009b9a <_printf_float+0x86>
 8009b94:	232d      	movs	r3, #45	; 0x2d
 8009b96:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009b9a:	4b92      	ldr	r3, [pc, #584]	; (8009de4 <_printf_float+0x2d0>)
 8009b9c:	4892      	ldr	r0, [pc, #584]	; (8009de8 <_printf_float+0x2d4>)
 8009b9e:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8009ba2:	bf94      	ite	ls
 8009ba4:	4698      	movls	r8, r3
 8009ba6:	4680      	movhi	r8, r0
 8009ba8:	2303      	movs	r3, #3
 8009baa:	f04f 0a00 	mov.w	sl, #0
 8009bae:	6123      	str	r3, [r4, #16]
 8009bb0:	f02b 0304 	bic.w	r3, fp, #4
 8009bb4:	6023      	str	r3, [r4, #0]
 8009bb6:	4633      	mov	r3, r6
 8009bb8:	4621      	mov	r1, r4
 8009bba:	4628      	mov	r0, r5
 8009bbc:	9700      	str	r7, [sp, #0]
 8009bbe:	aa0f      	add	r2, sp, #60	; 0x3c
 8009bc0:	f000 f9d4 	bl	8009f6c <_printf_common>
 8009bc4:	3001      	adds	r0, #1
 8009bc6:	f040 8090 	bne.w	8009cea <_printf_float+0x1d6>
 8009bca:	f04f 30ff 	mov.w	r0, #4294967295
 8009bce:	b011      	add	sp, #68	; 0x44
 8009bd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009bd4:	4642      	mov	r2, r8
 8009bd6:	4653      	mov	r3, sl
 8009bd8:	4640      	mov	r0, r8
 8009bda:	4651      	mov	r1, sl
 8009bdc:	f7f6 ff16 	bl	8000a0c <__aeabi_dcmpun>
 8009be0:	b148      	cbz	r0, 8009bf6 <_printf_float+0xe2>
 8009be2:	f1ba 0f00 	cmp.w	sl, #0
 8009be6:	bfb8      	it	lt
 8009be8:	232d      	movlt	r3, #45	; 0x2d
 8009bea:	4880      	ldr	r0, [pc, #512]	; (8009dec <_printf_float+0x2d8>)
 8009bec:	bfb8      	it	lt
 8009bee:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8009bf2:	4b7f      	ldr	r3, [pc, #508]	; (8009df0 <_printf_float+0x2dc>)
 8009bf4:	e7d3      	b.n	8009b9e <_printf_float+0x8a>
 8009bf6:	6863      	ldr	r3, [r4, #4]
 8009bf8:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8009bfc:	1c5a      	adds	r2, r3, #1
 8009bfe:	d142      	bne.n	8009c86 <_printf_float+0x172>
 8009c00:	2306      	movs	r3, #6
 8009c02:	6063      	str	r3, [r4, #4]
 8009c04:	2200      	movs	r2, #0
 8009c06:	9206      	str	r2, [sp, #24]
 8009c08:	aa0e      	add	r2, sp, #56	; 0x38
 8009c0a:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8009c0e:	aa0d      	add	r2, sp, #52	; 0x34
 8009c10:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8009c14:	9203      	str	r2, [sp, #12]
 8009c16:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8009c1a:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8009c1e:	6023      	str	r3, [r4, #0]
 8009c20:	6863      	ldr	r3, [r4, #4]
 8009c22:	4642      	mov	r2, r8
 8009c24:	9300      	str	r3, [sp, #0]
 8009c26:	4628      	mov	r0, r5
 8009c28:	4653      	mov	r3, sl
 8009c2a:	910b      	str	r1, [sp, #44]	; 0x2c
 8009c2c:	f7ff fed4 	bl	80099d8 <__cvt>
 8009c30:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009c32:	4680      	mov	r8, r0
 8009c34:	2947      	cmp	r1, #71	; 0x47
 8009c36:	990d      	ldr	r1, [sp, #52]	; 0x34
 8009c38:	d108      	bne.n	8009c4c <_printf_float+0x138>
 8009c3a:	1cc8      	adds	r0, r1, #3
 8009c3c:	db02      	blt.n	8009c44 <_printf_float+0x130>
 8009c3e:	6863      	ldr	r3, [r4, #4]
 8009c40:	4299      	cmp	r1, r3
 8009c42:	dd40      	ble.n	8009cc6 <_printf_float+0x1b2>
 8009c44:	f1a9 0902 	sub.w	r9, r9, #2
 8009c48:	fa5f f989 	uxtb.w	r9, r9
 8009c4c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8009c50:	d81f      	bhi.n	8009c92 <_printf_float+0x17e>
 8009c52:	464a      	mov	r2, r9
 8009c54:	3901      	subs	r1, #1
 8009c56:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009c5a:	910d      	str	r1, [sp, #52]	; 0x34
 8009c5c:	f7ff ff1b 	bl	8009a96 <__exponent>
 8009c60:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009c62:	4682      	mov	sl, r0
 8009c64:	1813      	adds	r3, r2, r0
 8009c66:	2a01      	cmp	r2, #1
 8009c68:	6123      	str	r3, [r4, #16]
 8009c6a:	dc02      	bgt.n	8009c72 <_printf_float+0x15e>
 8009c6c:	6822      	ldr	r2, [r4, #0]
 8009c6e:	07d2      	lsls	r2, r2, #31
 8009c70:	d501      	bpl.n	8009c76 <_printf_float+0x162>
 8009c72:	3301      	adds	r3, #1
 8009c74:	6123      	str	r3, [r4, #16]
 8009c76:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	d09b      	beq.n	8009bb6 <_printf_float+0xa2>
 8009c7e:	232d      	movs	r3, #45	; 0x2d
 8009c80:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009c84:	e797      	b.n	8009bb6 <_printf_float+0xa2>
 8009c86:	2947      	cmp	r1, #71	; 0x47
 8009c88:	d1bc      	bne.n	8009c04 <_printf_float+0xf0>
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	d1ba      	bne.n	8009c04 <_printf_float+0xf0>
 8009c8e:	2301      	movs	r3, #1
 8009c90:	e7b7      	b.n	8009c02 <_printf_float+0xee>
 8009c92:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8009c96:	d118      	bne.n	8009cca <_printf_float+0x1b6>
 8009c98:	2900      	cmp	r1, #0
 8009c9a:	6863      	ldr	r3, [r4, #4]
 8009c9c:	dd0b      	ble.n	8009cb6 <_printf_float+0x1a2>
 8009c9e:	6121      	str	r1, [r4, #16]
 8009ca0:	b913      	cbnz	r3, 8009ca8 <_printf_float+0x194>
 8009ca2:	6822      	ldr	r2, [r4, #0]
 8009ca4:	07d0      	lsls	r0, r2, #31
 8009ca6:	d502      	bpl.n	8009cae <_printf_float+0x19a>
 8009ca8:	3301      	adds	r3, #1
 8009caa:	440b      	add	r3, r1
 8009cac:	6123      	str	r3, [r4, #16]
 8009cae:	f04f 0a00 	mov.w	sl, #0
 8009cb2:	65a1      	str	r1, [r4, #88]	; 0x58
 8009cb4:	e7df      	b.n	8009c76 <_printf_float+0x162>
 8009cb6:	b913      	cbnz	r3, 8009cbe <_printf_float+0x1aa>
 8009cb8:	6822      	ldr	r2, [r4, #0]
 8009cba:	07d2      	lsls	r2, r2, #31
 8009cbc:	d501      	bpl.n	8009cc2 <_printf_float+0x1ae>
 8009cbe:	3302      	adds	r3, #2
 8009cc0:	e7f4      	b.n	8009cac <_printf_float+0x198>
 8009cc2:	2301      	movs	r3, #1
 8009cc4:	e7f2      	b.n	8009cac <_printf_float+0x198>
 8009cc6:	f04f 0967 	mov.w	r9, #103	; 0x67
 8009cca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009ccc:	4299      	cmp	r1, r3
 8009cce:	db05      	blt.n	8009cdc <_printf_float+0x1c8>
 8009cd0:	6823      	ldr	r3, [r4, #0]
 8009cd2:	6121      	str	r1, [r4, #16]
 8009cd4:	07d8      	lsls	r0, r3, #31
 8009cd6:	d5ea      	bpl.n	8009cae <_printf_float+0x19a>
 8009cd8:	1c4b      	adds	r3, r1, #1
 8009cda:	e7e7      	b.n	8009cac <_printf_float+0x198>
 8009cdc:	2900      	cmp	r1, #0
 8009cde:	bfcc      	ite	gt
 8009ce0:	2201      	movgt	r2, #1
 8009ce2:	f1c1 0202 	rsble	r2, r1, #2
 8009ce6:	4413      	add	r3, r2
 8009ce8:	e7e0      	b.n	8009cac <_printf_float+0x198>
 8009cea:	6823      	ldr	r3, [r4, #0]
 8009cec:	055a      	lsls	r2, r3, #21
 8009cee:	d407      	bmi.n	8009d00 <_printf_float+0x1ec>
 8009cf0:	6923      	ldr	r3, [r4, #16]
 8009cf2:	4642      	mov	r2, r8
 8009cf4:	4631      	mov	r1, r6
 8009cf6:	4628      	mov	r0, r5
 8009cf8:	47b8      	blx	r7
 8009cfa:	3001      	adds	r0, #1
 8009cfc:	d12b      	bne.n	8009d56 <_printf_float+0x242>
 8009cfe:	e764      	b.n	8009bca <_printf_float+0xb6>
 8009d00:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8009d04:	f240 80dd 	bls.w	8009ec2 <_printf_float+0x3ae>
 8009d08:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009d0c:	2200      	movs	r2, #0
 8009d0e:	2300      	movs	r3, #0
 8009d10:	f7f6 fe4a 	bl	80009a8 <__aeabi_dcmpeq>
 8009d14:	2800      	cmp	r0, #0
 8009d16:	d033      	beq.n	8009d80 <_printf_float+0x26c>
 8009d18:	2301      	movs	r3, #1
 8009d1a:	4631      	mov	r1, r6
 8009d1c:	4628      	mov	r0, r5
 8009d1e:	4a35      	ldr	r2, [pc, #212]	; (8009df4 <_printf_float+0x2e0>)
 8009d20:	47b8      	blx	r7
 8009d22:	3001      	adds	r0, #1
 8009d24:	f43f af51 	beq.w	8009bca <_printf_float+0xb6>
 8009d28:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8009d2c:	429a      	cmp	r2, r3
 8009d2e:	db02      	blt.n	8009d36 <_printf_float+0x222>
 8009d30:	6823      	ldr	r3, [r4, #0]
 8009d32:	07d8      	lsls	r0, r3, #31
 8009d34:	d50f      	bpl.n	8009d56 <_printf_float+0x242>
 8009d36:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009d3a:	4631      	mov	r1, r6
 8009d3c:	4628      	mov	r0, r5
 8009d3e:	47b8      	blx	r7
 8009d40:	3001      	adds	r0, #1
 8009d42:	f43f af42 	beq.w	8009bca <_printf_float+0xb6>
 8009d46:	f04f 0800 	mov.w	r8, #0
 8009d4a:	f104 091a 	add.w	r9, r4, #26
 8009d4e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009d50:	3b01      	subs	r3, #1
 8009d52:	4543      	cmp	r3, r8
 8009d54:	dc09      	bgt.n	8009d6a <_printf_float+0x256>
 8009d56:	6823      	ldr	r3, [r4, #0]
 8009d58:	079b      	lsls	r3, r3, #30
 8009d5a:	f100 8102 	bmi.w	8009f62 <_printf_float+0x44e>
 8009d5e:	68e0      	ldr	r0, [r4, #12]
 8009d60:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009d62:	4298      	cmp	r0, r3
 8009d64:	bfb8      	it	lt
 8009d66:	4618      	movlt	r0, r3
 8009d68:	e731      	b.n	8009bce <_printf_float+0xba>
 8009d6a:	2301      	movs	r3, #1
 8009d6c:	464a      	mov	r2, r9
 8009d6e:	4631      	mov	r1, r6
 8009d70:	4628      	mov	r0, r5
 8009d72:	47b8      	blx	r7
 8009d74:	3001      	adds	r0, #1
 8009d76:	f43f af28 	beq.w	8009bca <_printf_float+0xb6>
 8009d7a:	f108 0801 	add.w	r8, r8, #1
 8009d7e:	e7e6      	b.n	8009d4e <_printf_float+0x23a>
 8009d80:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	dc38      	bgt.n	8009df8 <_printf_float+0x2e4>
 8009d86:	2301      	movs	r3, #1
 8009d88:	4631      	mov	r1, r6
 8009d8a:	4628      	mov	r0, r5
 8009d8c:	4a19      	ldr	r2, [pc, #100]	; (8009df4 <_printf_float+0x2e0>)
 8009d8e:	47b8      	blx	r7
 8009d90:	3001      	adds	r0, #1
 8009d92:	f43f af1a 	beq.w	8009bca <_printf_float+0xb6>
 8009d96:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8009d9a:	4313      	orrs	r3, r2
 8009d9c:	d102      	bne.n	8009da4 <_printf_float+0x290>
 8009d9e:	6823      	ldr	r3, [r4, #0]
 8009da0:	07d9      	lsls	r1, r3, #31
 8009da2:	d5d8      	bpl.n	8009d56 <_printf_float+0x242>
 8009da4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009da8:	4631      	mov	r1, r6
 8009daa:	4628      	mov	r0, r5
 8009dac:	47b8      	blx	r7
 8009dae:	3001      	adds	r0, #1
 8009db0:	f43f af0b 	beq.w	8009bca <_printf_float+0xb6>
 8009db4:	f04f 0900 	mov.w	r9, #0
 8009db8:	f104 0a1a 	add.w	sl, r4, #26
 8009dbc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009dbe:	425b      	negs	r3, r3
 8009dc0:	454b      	cmp	r3, r9
 8009dc2:	dc01      	bgt.n	8009dc8 <_printf_float+0x2b4>
 8009dc4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009dc6:	e794      	b.n	8009cf2 <_printf_float+0x1de>
 8009dc8:	2301      	movs	r3, #1
 8009dca:	4652      	mov	r2, sl
 8009dcc:	4631      	mov	r1, r6
 8009dce:	4628      	mov	r0, r5
 8009dd0:	47b8      	blx	r7
 8009dd2:	3001      	adds	r0, #1
 8009dd4:	f43f aef9 	beq.w	8009bca <_printf_float+0xb6>
 8009dd8:	f109 0901 	add.w	r9, r9, #1
 8009ddc:	e7ee      	b.n	8009dbc <_printf_float+0x2a8>
 8009dde:	bf00      	nop
 8009de0:	7fefffff 	.word	0x7fefffff
 8009de4:	0800d258 	.word	0x0800d258
 8009de8:	0800d25c 	.word	0x0800d25c
 8009dec:	0800d264 	.word	0x0800d264
 8009df0:	0800d260 	.word	0x0800d260
 8009df4:	0800d268 	.word	0x0800d268
 8009df8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009dfa:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009dfc:	429a      	cmp	r2, r3
 8009dfe:	bfa8      	it	ge
 8009e00:	461a      	movge	r2, r3
 8009e02:	2a00      	cmp	r2, #0
 8009e04:	4691      	mov	r9, r2
 8009e06:	dc37      	bgt.n	8009e78 <_printf_float+0x364>
 8009e08:	f04f 0b00 	mov.w	fp, #0
 8009e0c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009e10:	f104 021a 	add.w	r2, r4, #26
 8009e14:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8009e18:	ebaa 0309 	sub.w	r3, sl, r9
 8009e1c:	455b      	cmp	r3, fp
 8009e1e:	dc33      	bgt.n	8009e88 <_printf_float+0x374>
 8009e20:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8009e24:	429a      	cmp	r2, r3
 8009e26:	db3b      	blt.n	8009ea0 <_printf_float+0x38c>
 8009e28:	6823      	ldr	r3, [r4, #0]
 8009e2a:	07da      	lsls	r2, r3, #31
 8009e2c:	d438      	bmi.n	8009ea0 <_printf_float+0x38c>
 8009e2e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009e30:	990d      	ldr	r1, [sp, #52]	; 0x34
 8009e32:	eba3 020a 	sub.w	r2, r3, sl
 8009e36:	eba3 0901 	sub.w	r9, r3, r1
 8009e3a:	4591      	cmp	r9, r2
 8009e3c:	bfa8      	it	ge
 8009e3e:	4691      	movge	r9, r2
 8009e40:	f1b9 0f00 	cmp.w	r9, #0
 8009e44:	dc34      	bgt.n	8009eb0 <_printf_float+0x39c>
 8009e46:	f04f 0800 	mov.w	r8, #0
 8009e4a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009e4e:	f104 0a1a 	add.w	sl, r4, #26
 8009e52:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8009e56:	1a9b      	subs	r3, r3, r2
 8009e58:	eba3 0309 	sub.w	r3, r3, r9
 8009e5c:	4543      	cmp	r3, r8
 8009e5e:	f77f af7a 	ble.w	8009d56 <_printf_float+0x242>
 8009e62:	2301      	movs	r3, #1
 8009e64:	4652      	mov	r2, sl
 8009e66:	4631      	mov	r1, r6
 8009e68:	4628      	mov	r0, r5
 8009e6a:	47b8      	blx	r7
 8009e6c:	3001      	adds	r0, #1
 8009e6e:	f43f aeac 	beq.w	8009bca <_printf_float+0xb6>
 8009e72:	f108 0801 	add.w	r8, r8, #1
 8009e76:	e7ec      	b.n	8009e52 <_printf_float+0x33e>
 8009e78:	4613      	mov	r3, r2
 8009e7a:	4631      	mov	r1, r6
 8009e7c:	4642      	mov	r2, r8
 8009e7e:	4628      	mov	r0, r5
 8009e80:	47b8      	blx	r7
 8009e82:	3001      	adds	r0, #1
 8009e84:	d1c0      	bne.n	8009e08 <_printf_float+0x2f4>
 8009e86:	e6a0      	b.n	8009bca <_printf_float+0xb6>
 8009e88:	2301      	movs	r3, #1
 8009e8a:	4631      	mov	r1, r6
 8009e8c:	4628      	mov	r0, r5
 8009e8e:	920b      	str	r2, [sp, #44]	; 0x2c
 8009e90:	47b8      	blx	r7
 8009e92:	3001      	adds	r0, #1
 8009e94:	f43f ae99 	beq.w	8009bca <_printf_float+0xb6>
 8009e98:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009e9a:	f10b 0b01 	add.w	fp, fp, #1
 8009e9e:	e7b9      	b.n	8009e14 <_printf_float+0x300>
 8009ea0:	4631      	mov	r1, r6
 8009ea2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009ea6:	4628      	mov	r0, r5
 8009ea8:	47b8      	blx	r7
 8009eaa:	3001      	adds	r0, #1
 8009eac:	d1bf      	bne.n	8009e2e <_printf_float+0x31a>
 8009eae:	e68c      	b.n	8009bca <_printf_float+0xb6>
 8009eb0:	464b      	mov	r3, r9
 8009eb2:	4631      	mov	r1, r6
 8009eb4:	4628      	mov	r0, r5
 8009eb6:	eb08 020a 	add.w	r2, r8, sl
 8009eba:	47b8      	blx	r7
 8009ebc:	3001      	adds	r0, #1
 8009ebe:	d1c2      	bne.n	8009e46 <_printf_float+0x332>
 8009ec0:	e683      	b.n	8009bca <_printf_float+0xb6>
 8009ec2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009ec4:	2a01      	cmp	r2, #1
 8009ec6:	dc01      	bgt.n	8009ecc <_printf_float+0x3b8>
 8009ec8:	07db      	lsls	r3, r3, #31
 8009eca:	d537      	bpl.n	8009f3c <_printf_float+0x428>
 8009ecc:	2301      	movs	r3, #1
 8009ece:	4642      	mov	r2, r8
 8009ed0:	4631      	mov	r1, r6
 8009ed2:	4628      	mov	r0, r5
 8009ed4:	47b8      	blx	r7
 8009ed6:	3001      	adds	r0, #1
 8009ed8:	f43f ae77 	beq.w	8009bca <_printf_float+0xb6>
 8009edc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009ee0:	4631      	mov	r1, r6
 8009ee2:	4628      	mov	r0, r5
 8009ee4:	47b8      	blx	r7
 8009ee6:	3001      	adds	r0, #1
 8009ee8:	f43f ae6f 	beq.w	8009bca <_printf_float+0xb6>
 8009eec:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009ef0:	2200      	movs	r2, #0
 8009ef2:	2300      	movs	r3, #0
 8009ef4:	f7f6 fd58 	bl	80009a8 <__aeabi_dcmpeq>
 8009ef8:	b9d8      	cbnz	r0, 8009f32 <_printf_float+0x41e>
 8009efa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009efc:	f108 0201 	add.w	r2, r8, #1
 8009f00:	3b01      	subs	r3, #1
 8009f02:	4631      	mov	r1, r6
 8009f04:	4628      	mov	r0, r5
 8009f06:	47b8      	blx	r7
 8009f08:	3001      	adds	r0, #1
 8009f0a:	d10e      	bne.n	8009f2a <_printf_float+0x416>
 8009f0c:	e65d      	b.n	8009bca <_printf_float+0xb6>
 8009f0e:	2301      	movs	r3, #1
 8009f10:	464a      	mov	r2, r9
 8009f12:	4631      	mov	r1, r6
 8009f14:	4628      	mov	r0, r5
 8009f16:	47b8      	blx	r7
 8009f18:	3001      	adds	r0, #1
 8009f1a:	f43f ae56 	beq.w	8009bca <_printf_float+0xb6>
 8009f1e:	f108 0801 	add.w	r8, r8, #1
 8009f22:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009f24:	3b01      	subs	r3, #1
 8009f26:	4543      	cmp	r3, r8
 8009f28:	dcf1      	bgt.n	8009f0e <_printf_float+0x3fa>
 8009f2a:	4653      	mov	r3, sl
 8009f2c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009f30:	e6e0      	b.n	8009cf4 <_printf_float+0x1e0>
 8009f32:	f04f 0800 	mov.w	r8, #0
 8009f36:	f104 091a 	add.w	r9, r4, #26
 8009f3a:	e7f2      	b.n	8009f22 <_printf_float+0x40e>
 8009f3c:	2301      	movs	r3, #1
 8009f3e:	4642      	mov	r2, r8
 8009f40:	e7df      	b.n	8009f02 <_printf_float+0x3ee>
 8009f42:	2301      	movs	r3, #1
 8009f44:	464a      	mov	r2, r9
 8009f46:	4631      	mov	r1, r6
 8009f48:	4628      	mov	r0, r5
 8009f4a:	47b8      	blx	r7
 8009f4c:	3001      	adds	r0, #1
 8009f4e:	f43f ae3c 	beq.w	8009bca <_printf_float+0xb6>
 8009f52:	f108 0801 	add.w	r8, r8, #1
 8009f56:	68e3      	ldr	r3, [r4, #12]
 8009f58:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8009f5a:	1a5b      	subs	r3, r3, r1
 8009f5c:	4543      	cmp	r3, r8
 8009f5e:	dcf0      	bgt.n	8009f42 <_printf_float+0x42e>
 8009f60:	e6fd      	b.n	8009d5e <_printf_float+0x24a>
 8009f62:	f04f 0800 	mov.w	r8, #0
 8009f66:	f104 0919 	add.w	r9, r4, #25
 8009f6a:	e7f4      	b.n	8009f56 <_printf_float+0x442>

08009f6c <_printf_common>:
 8009f6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009f70:	4616      	mov	r6, r2
 8009f72:	4699      	mov	r9, r3
 8009f74:	688a      	ldr	r2, [r1, #8]
 8009f76:	690b      	ldr	r3, [r1, #16]
 8009f78:	4607      	mov	r7, r0
 8009f7a:	4293      	cmp	r3, r2
 8009f7c:	bfb8      	it	lt
 8009f7e:	4613      	movlt	r3, r2
 8009f80:	6033      	str	r3, [r6, #0]
 8009f82:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009f86:	460c      	mov	r4, r1
 8009f88:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009f8c:	b10a      	cbz	r2, 8009f92 <_printf_common+0x26>
 8009f8e:	3301      	adds	r3, #1
 8009f90:	6033      	str	r3, [r6, #0]
 8009f92:	6823      	ldr	r3, [r4, #0]
 8009f94:	0699      	lsls	r1, r3, #26
 8009f96:	bf42      	ittt	mi
 8009f98:	6833      	ldrmi	r3, [r6, #0]
 8009f9a:	3302      	addmi	r3, #2
 8009f9c:	6033      	strmi	r3, [r6, #0]
 8009f9e:	6825      	ldr	r5, [r4, #0]
 8009fa0:	f015 0506 	ands.w	r5, r5, #6
 8009fa4:	d106      	bne.n	8009fb4 <_printf_common+0x48>
 8009fa6:	f104 0a19 	add.w	sl, r4, #25
 8009faa:	68e3      	ldr	r3, [r4, #12]
 8009fac:	6832      	ldr	r2, [r6, #0]
 8009fae:	1a9b      	subs	r3, r3, r2
 8009fb0:	42ab      	cmp	r3, r5
 8009fb2:	dc28      	bgt.n	800a006 <_printf_common+0x9a>
 8009fb4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009fb8:	1e13      	subs	r3, r2, #0
 8009fba:	6822      	ldr	r2, [r4, #0]
 8009fbc:	bf18      	it	ne
 8009fbe:	2301      	movne	r3, #1
 8009fc0:	0692      	lsls	r2, r2, #26
 8009fc2:	d42d      	bmi.n	800a020 <_printf_common+0xb4>
 8009fc4:	4649      	mov	r1, r9
 8009fc6:	4638      	mov	r0, r7
 8009fc8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009fcc:	47c0      	blx	r8
 8009fce:	3001      	adds	r0, #1
 8009fd0:	d020      	beq.n	800a014 <_printf_common+0xa8>
 8009fd2:	6823      	ldr	r3, [r4, #0]
 8009fd4:	68e5      	ldr	r5, [r4, #12]
 8009fd6:	f003 0306 	and.w	r3, r3, #6
 8009fda:	2b04      	cmp	r3, #4
 8009fdc:	bf18      	it	ne
 8009fde:	2500      	movne	r5, #0
 8009fe0:	6832      	ldr	r2, [r6, #0]
 8009fe2:	f04f 0600 	mov.w	r6, #0
 8009fe6:	68a3      	ldr	r3, [r4, #8]
 8009fe8:	bf08      	it	eq
 8009fea:	1aad      	subeq	r5, r5, r2
 8009fec:	6922      	ldr	r2, [r4, #16]
 8009fee:	bf08      	it	eq
 8009ff0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009ff4:	4293      	cmp	r3, r2
 8009ff6:	bfc4      	itt	gt
 8009ff8:	1a9b      	subgt	r3, r3, r2
 8009ffa:	18ed      	addgt	r5, r5, r3
 8009ffc:	341a      	adds	r4, #26
 8009ffe:	42b5      	cmp	r5, r6
 800a000:	d11a      	bne.n	800a038 <_printf_common+0xcc>
 800a002:	2000      	movs	r0, #0
 800a004:	e008      	b.n	800a018 <_printf_common+0xac>
 800a006:	2301      	movs	r3, #1
 800a008:	4652      	mov	r2, sl
 800a00a:	4649      	mov	r1, r9
 800a00c:	4638      	mov	r0, r7
 800a00e:	47c0      	blx	r8
 800a010:	3001      	adds	r0, #1
 800a012:	d103      	bne.n	800a01c <_printf_common+0xb0>
 800a014:	f04f 30ff 	mov.w	r0, #4294967295
 800a018:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a01c:	3501      	adds	r5, #1
 800a01e:	e7c4      	b.n	8009faa <_printf_common+0x3e>
 800a020:	2030      	movs	r0, #48	; 0x30
 800a022:	18e1      	adds	r1, r4, r3
 800a024:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a028:	1c5a      	adds	r2, r3, #1
 800a02a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a02e:	4422      	add	r2, r4
 800a030:	3302      	adds	r3, #2
 800a032:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a036:	e7c5      	b.n	8009fc4 <_printf_common+0x58>
 800a038:	2301      	movs	r3, #1
 800a03a:	4622      	mov	r2, r4
 800a03c:	4649      	mov	r1, r9
 800a03e:	4638      	mov	r0, r7
 800a040:	47c0      	blx	r8
 800a042:	3001      	adds	r0, #1
 800a044:	d0e6      	beq.n	800a014 <_printf_common+0xa8>
 800a046:	3601      	adds	r6, #1
 800a048:	e7d9      	b.n	8009ffe <_printf_common+0x92>
	...

0800a04c <_printf_i>:
 800a04c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a050:	7e0f      	ldrb	r7, [r1, #24]
 800a052:	4691      	mov	r9, r2
 800a054:	2f78      	cmp	r7, #120	; 0x78
 800a056:	4680      	mov	r8, r0
 800a058:	460c      	mov	r4, r1
 800a05a:	469a      	mov	sl, r3
 800a05c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a05e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a062:	d807      	bhi.n	800a074 <_printf_i+0x28>
 800a064:	2f62      	cmp	r7, #98	; 0x62
 800a066:	d80a      	bhi.n	800a07e <_printf_i+0x32>
 800a068:	2f00      	cmp	r7, #0
 800a06a:	f000 80d9 	beq.w	800a220 <_printf_i+0x1d4>
 800a06e:	2f58      	cmp	r7, #88	; 0x58
 800a070:	f000 80a4 	beq.w	800a1bc <_printf_i+0x170>
 800a074:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a078:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a07c:	e03a      	b.n	800a0f4 <_printf_i+0xa8>
 800a07e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a082:	2b15      	cmp	r3, #21
 800a084:	d8f6      	bhi.n	800a074 <_printf_i+0x28>
 800a086:	a101      	add	r1, pc, #4	; (adr r1, 800a08c <_printf_i+0x40>)
 800a088:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a08c:	0800a0e5 	.word	0x0800a0e5
 800a090:	0800a0f9 	.word	0x0800a0f9
 800a094:	0800a075 	.word	0x0800a075
 800a098:	0800a075 	.word	0x0800a075
 800a09c:	0800a075 	.word	0x0800a075
 800a0a0:	0800a075 	.word	0x0800a075
 800a0a4:	0800a0f9 	.word	0x0800a0f9
 800a0a8:	0800a075 	.word	0x0800a075
 800a0ac:	0800a075 	.word	0x0800a075
 800a0b0:	0800a075 	.word	0x0800a075
 800a0b4:	0800a075 	.word	0x0800a075
 800a0b8:	0800a207 	.word	0x0800a207
 800a0bc:	0800a129 	.word	0x0800a129
 800a0c0:	0800a1e9 	.word	0x0800a1e9
 800a0c4:	0800a075 	.word	0x0800a075
 800a0c8:	0800a075 	.word	0x0800a075
 800a0cc:	0800a229 	.word	0x0800a229
 800a0d0:	0800a075 	.word	0x0800a075
 800a0d4:	0800a129 	.word	0x0800a129
 800a0d8:	0800a075 	.word	0x0800a075
 800a0dc:	0800a075 	.word	0x0800a075
 800a0e0:	0800a1f1 	.word	0x0800a1f1
 800a0e4:	682b      	ldr	r3, [r5, #0]
 800a0e6:	1d1a      	adds	r2, r3, #4
 800a0e8:	681b      	ldr	r3, [r3, #0]
 800a0ea:	602a      	str	r2, [r5, #0]
 800a0ec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a0f0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a0f4:	2301      	movs	r3, #1
 800a0f6:	e0a4      	b.n	800a242 <_printf_i+0x1f6>
 800a0f8:	6820      	ldr	r0, [r4, #0]
 800a0fa:	6829      	ldr	r1, [r5, #0]
 800a0fc:	0606      	lsls	r6, r0, #24
 800a0fe:	f101 0304 	add.w	r3, r1, #4
 800a102:	d50a      	bpl.n	800a11a <_printf_i+0xce>
 800a104:	680e      	ldr	r6, [r1, #0]
 800a106:	602b      	str	r3, [r5, #0]
 800a108:	2e00      	cmp	r6, #0
 800a10a:	da03      	bge.n	800a114 <_printf_i+0xc8>
 800a10c:	232d      	movs	r3, #45	; 0x2d
 800a10e:	4276      	negs	r6, r6
 800a110:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a114:	230a      	movs	r3, #10
 800a116:	485e      	ldr	r0, [pc, #376]	; (800a290 <_printf_i+0x244>)
 800a118:	e019      	b.n	800a14e <_printf_i+0x102>
 800a11a:	680e      	ldr	r6, [r1, #0]
 800a11c:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a120:	602b      	str	r3, [r5, #0]
 800a122:	bf18      	it	ne
 800a124:	b236      	sxthne	r6, r6
 800a126:	e7ef      	b.n	800a108 <_printf_i+0xbc>
 800a128:	682b      	ldr	r3, [r5, #0]
 800a12a:	6820      	ldr	r0, [r4, #0]
 800a12c:	1d19      	adds	r1, r3, #4
 800a12e:	6029      	str	r1, [r5, #0]
 800a130:	0601      	lsls	r1, r0, #24
 800a132:	d501      	bpl.n	800a138 <_printf_i+0xec>
 800a134:	681e      	ldr	r6, [r3, #0]
 800a136:	e002      	b.n	800a13e <_printf_i+0xf2>
 800a138:	0646      	lsls	r6, r0, #25
 800a13a:	d5fb      	bpl.n	800a134 <_printf_i+0xe8>
 800a13c:	881e      	ldrh	r6, [r3, #0]
 800a13e:	2f6f      	cmp	r7, #111	; 0x6f
 800a140:	bf0c      	ite	eq
 800a142:	2308      	moveq	r3, #8
 800a144:	230a      	movne	r3, #10
 800a146:	4852      	ldr	r0, [pc, #328]	; (800a290 <_printf_i+0x244>)
 800a148:	2100      	movs	r1, #0
 800a14a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a14e:	6865      	ldr	r5, [r4, #4]
 800a150:	2d00      	cmp	r5, #0
 800a152:	bfa8      	it	ge
 800a154:	6821      	ldrge	r1, [r4, #0]
 800a156:	60a5      	str	r5, [r4, #8]
 800a158:	bfa4      	itt	ge
 800a15a:	f021 0104 	bicge.w	r1, r1, #4
 800a15e:	6021      	strge	r1, [r4, #0]
 800a160:	b90e      	cbnz	r6, 800a166 <_printf_i+0x11a>
 800a162:	2d00      	cmp	r5, #0
 800a164:	d04d      	beq.n	800a202 <_printf_i+0x1b6>
 800a166:	4615      	mov	r5, r2
 800a168:	fbb6 f1f3 	udiv	r1, r6, r3
 800a16c:	fb03 6711 	mls	r7, r3, r1, r6
 800a170:	5dc7      	ldrb	r7, [r0, r7]
 800a172:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a176:	4637      	mov	r7, r6
 800a178:	42bb      	cmp	r3, r7
 800a17a:	460e      	mov	r6, r1
 800a17c:	d9f4      	bls.n	800a168 <_printf_i+0x11c>
 800a17e:	2b08      	cmp	r3, #8
 800a180:	d10b      	bne.n	800a19a <_printf_i+0x14e>
 800a182:	6823      	ldr	r3, [r4, #0]
 800a184:	07de      	lsls	r6, r3, #31
 800a186:	d508      	bpl.n	800a19a <_printf_i+0x14e>
 800a188:	6923      	ldr	r3, [r4, #16]
 800a18a:	6861      	ldr	r1, [r4, #4]
 800a18c:	4299      	cmp	r1, r3
 800a18e:	bfde      	ittt	le
 800a190:	2330      	movle	r3, #48	; 0x30
 800a192:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a196:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a19a:	1b52      	subs	r2, r2, r5
 800a19c:	6122      	str	r2, [r4, #16]
 800a19e:	464b      	mov	r3, r9
 800a1a0:	4621      	mov	r1, r4
 800a1a2:	4640      	mov	r0, r8
 800a1a4:	f8cd a000 	str.w	sl, [sp]
 800a1a8:	aa03      	add	r2, sp, #12
 800a1aa:	f7ff fedf 	bl	8009f6c <_printf_common>
 800a1ae:	3001      	adds	r0, #1
 800a1b0:	d14c      	bne.n	800a24c <_printf_i+0x200>
 800a1b2:	f04f 30ff 	mov.w	r0, #4294967295
 800a1b6:	b004      	add	sp, #16
 800a1b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a1bc:	4834      	ldr	r0, [pc, #208]	; (800a290 <_printf_i+0x244>)
 800a1be:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800a1c2:	6829      	ldr	r1, [r5, #0]
 800a1c4:	6823      	ldr	r3, [r4, #0]
 800a1c6:	f851 6b04 	ldr.w	r6, [r1], #4
 800a1ca:	6029      	str	r1, [r5, #0]
 800a1cc:	061d      	lsls	r5, r3, #24
 800a1ce:	d514      	bpl.n	800a1fa <_printf_i+0x1ae>
 800a1d0:	07df      	lsls	r7, r3, #31
 800a1d2:	bf44      	itt	mi
 800a1d4:	f043 0320 	orrmi.w	r3, r3, #32
 800a1d8:	6023      	strmi	r3, [r4, #0]
 800a1da:	b91e      	cbnz	r6, 800a1e4 <_printf_i+0x198>
 800a1dc:	6823      	ldr	r3, [r4, #0]
 800a1de:	f023 0320 	bic.w	r3, r3, #32
 800a1e2:	6023      	str	r3, [r4, #0]
 800a1e4:	2310      	movs	r3, #16
 800a1e6:	e7af      	b.n	800a148 <_printf_i+0xfc>
 800a1e8:	6823      	ldr	r3, [r4, #0]
 800a1ea:	f043 0320 	orr.w	r3, r3, #32
 800a1ee:	6023      	str	r3, [r4, #0]
 800a1f0:	2378      	movs	r3, #120	; 0x78
 800a1f2:	4828      	ldr	r0, [pc, #160]	; (800a294 <_printf_i+0x248>)
 800a1f4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a1f8:	e7e3      	b.n	800a1c2 <_printf_i+0x176>
 800a1fa:	0659      	lsls	r1, r3, #25
 800a1fc:	bf48      	it	mi
 800a1fe:	b2b6      	uxthmi	r6, r6
 800a200:	e7e6      	b.n	800a1d0 <_printf_i+0x184>
 800a202:	4615      	mov	r5, r2
 800a204:	e7bb      	b.n	800a17e <_printf_i+0x132>
 800a206:	682b      	ldr	r3, [r5, #0]
 800a208:	6826      	ldr	r6, [r4, #0]
 800a20a:	1d18      	adds	r0, r3, #4
 800a20c:	6961      	ldr	r1, [r4, #20]
 800a20e:	6028      	str	r0, [r5, #0]
 800a210:	0635      	lsls	r5, r6, #24
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	d501      	bpl.n	800a21a <_printf_i+0x1ce>
 800a216:	6019      	str	r1, [r3, #0]
 800a218:	e002      	b.n	800a220 <_printf_i+0x1d4>
 800a21a:	0670      	lsls	r0, r6, #25
 800a21c:	d5fb      	bpl.n	800a216 <_printf_i+0x1ca>
 800a21e:	8019      	strh	r1, [r3, #0]
 800a220:	2300      	movs	r3, #0
 800a222:	4615      	mov	r5, r2
 800a224:	6123      	str	r3, [r4, #16]
 800a226:	e7ba      	b.n	800a19e <_printf_i+0x152>
 800a228:	682b      	ldr	r3, [r5, #0]
 800a22a:	2100      	movs	r1, #0
 800a22c:	1d1a      	adds	r2, r3, #4
 800a22e:	602a      	str	r2, [r5, #0]
 800a230:	681d      	ldr	r5, [r3, #0]
 800a232:	6862      	ldr	r2, [r4, #4]
 800a234:	4628      	mov	r0, r5
 800a236:	f001 f901 	bl	800b43c <memchr>
 800a23a:	b108      	cbz	r0, 800a240 <_printf_i+0x1f4>
 800a23c:	1b40      	subs	r0, r0, r5
 800a23e:	6060      	str	r0, [r4, #4]
 800a240:	6863      	ldr	r3, [r4, #4]
 800a242:	6123      	str	r3, [r4, #16]
 800a244:	2300      	movs	r3, #0
 800a246:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a24a:	e7a8      	b.n	800a19e <_printf_i+0x152>
 800a24c:	462a      	mov	r2, r5
 800a24e:	4649      	mov	r1, r9
 800a250:	4640      	mov	r0, r8
 800a252:	6923      	ldr	r3, [r4, #16]
 800a254:	47d0      	blx	sl
 800a256:	3001      	adds	r0, #1
 800a258:	d0ab      	beq.n	800a1b2 <_printf_i+0x166>
 800a25a:	6823      	ldr	r3, [r4, #0]
 800a25c:	079b      	lsls	r3, r3, #30
 800a25e:	d413      	bmi.n	800a288 <_printf_i+0x23c>
 800a260:	68e0      	ldr	r0, [r4, #12]
 800a262:	9b03      	ldr	r3, [sp, #12]
 800a264:	4298      	cmp	r0, r3
 800a266:	bfb8      	it	lt
 800a268:	4618      	movlt	r0, r3
 800a26a:	e7a4      	b.n	800a1b6 <_printf_i+0x16a>
 800a26c:	2301      	movs	r3, #1
 800a26e:	4632      	mov	r2, r6
 800a270:	4649      	mov	r1, r9
 800a272:	4640      	mov	r0, r8
 800a274:	47d0      	blx	sl
 800a276:	3001      	adds	r0, #1
 800a278:	d09b      	beq.n	800a1b2 <_printf_i+0x166>
 800a27a:	3501      	adds	r5, #1
 800a27c:	68e3      	ldr	r3, [r4, #12]
 800a27e:	9903      	ldr	r1, [sp, #12]
 800a280:	1a5b      	subs	r3, r3, r1
 800a282:	42ab      	cmp	r3, r5
 800a284:	dcf2      	bgt.n	800a26c <_printf_i+0x220>
 800a286:	e7eb      	b.n	800a260 <_printf_i+0x214>
 800a288:	2500      	movs	r5, #0
 800a28a:	f104 0619 	add.w	r6, r4, #25
 800a28e:	e7f5      	b.n	800a27c <_printf_i+0x230>
 800a290:	0800d26a 	.word	0x0800d26a
 800a294:	0800d27b 	.word	0x0800d27b

0800a298 <iprintf>:
 800a298:	b40f      	push	{r0, r1, r2, r3}
 800a29a:	4b0a      	ldr	r3, [pc, #40]	; (800a2c4 <iprintf+0x2c>)
 800a29c:	b513      	push	{r0, r1, r4, lr}
 800a29e:	681c      	ldr	r4, [r3, #0]
 800a2a0:	b124      	cbz	r4, 800a2ac <iprintf+0x14>
 800a2a2:	69a3      	ldr	r3, [r4, #24]
 800a2a4:	b913      	cbnz	r3, 800a2ac <iprintf+0x14>
 800a2a6:	4620      	mov	r0, r4
 800a2a8:	f001 f81a 	bl	800b2e0 <__sinit>
 800a2ac:	ab05      	add	r3, sp, #20
 800a2ae:	4620      	mov	r0, r4
 800a2b0:	9a04      	ldr	r2, [sp, #16]
 800a2b2:	68a1      	ldr	r1, [r4, #8]
 800a2b4:	9301      	str	r3, [sp, #4]
 800a2b6:	f001 fd85 	bl	800bdc4 <_vfiprintf_r>
 800a2ba:	b002      	add	sp, #8
 800a2bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a2c0:	b004      	add	sp, #16
 800a2c2:	4770      	bx	lr
 800a2c4:	2000001c 	.word	0x2000001c

0800a2c8 <quorem>:
 800a2c8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a2cc:	6903      	ldr	r3, [r0, #16]
 800a2ce:	690c      	ldr	r4, [r1, #16]
 800a2d0:	4607      	mov	r7, r0
 800a2d2:	42a3      	cmp	r3, r4
 800a2d4:	f2c0 8082 	blt.w	800a3dc <quorem+0x114>
 800a2d8:	3c01      	subs	r4, #1
 800a2da:	f100 0514 	add.w	r5, r0, #20
 800a2de:	f101 0814 	add.w	r8, r1, #20
 800a2e2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a2e6:	9301      	str	r3, [sp, #4]
 800a2e8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a2ec:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a2f0:	3301      	adds	r3, #1
 800a2f2:	429a      	cmp	r2, r3
 800a2f4:	fbb2 f6f3 	udiv	r6, r2, r3
 800a2f8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800a2fc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a300:	d331      	bcc.n	800a366 <quorem+0x9e>
 800a302:	f04f 0e00 	mov.w	lr, #0
 800a306:	4640      	mov	r0, r8
 800a308:	46ac      	mov	ip, r5
 800a30a:	46f2      	mov	sl, lr
 800a30c:	f850 2b04 	ldr.w	r2, [r0], #4
 800a310:	b293      	uxth	r3, r2
 800a312:	fb06 e303 	mla	r3, r6, r3, lr
 800a316:	0c12      	lsrs	r2, r2, #16
 800a318:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800a31c:	b29b      	uxth	r3, r3
 800a31e:	fb06 e202 	mla	r2, r6, r2, lr
 800a322:	ebaa 0303 	sub.w	r3, sl, r3
 800a326:	f8dc a000 	ldr.w	sl, [ip]
 800a32a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a32e:	fa1f fa8a 	uxth.w	sl, sl
 800a332:	4453      	add	r3, sl
 800a334:	f8dc a000 	ldr.w	sl, [ip]
 800a338:	b292      	uxth	r2, r2
 800a33a:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800a33e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a342:	b29b      	uxth	r3, r3
 800a344:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a348:	4581      	cmp	r9, r0
 800a34a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800a34e:	f84c 3b04 	str.w	r3, [ip], #4
 800a352:	d2db      	bcs.n	800a30c <quorem+0x44>
 800a354:	f855 300b 	ldr.w	r3, [r5, fp]
 800a358:	b92b      	cbnz	r3, 800a366 <quorem+0x9e>
 800a35a:	9b01      	ldr	r3, [sp, #4]
 800a35c:	3b04      	subs	r3, #4
 800a35e:	429d      	cmp	r5, r3
 800a360:	461a      	mov	r2, r3
 800a362:	d32f      	bcc.n	800a3c4 <quorem+0xfc>
 800a364:	613c      	str	r4, [r7, #16]
 800a366:	4638      	mov	r0, r7
 800a368:	f001 faf4 	bl	800b954 <__mcmp>
 800a36c:	2800      	cmp	r0, #0
 800a36e:	db25      	blt.n	800a3bc <quorem+0xf4>
 800a370:	4628      	mov	r0, r5
 800a372:	f04f 0c00 	mov.w	ip, #0
 800a376:	3601      	adds	r6, #1
 800a378:	f858 1b04 	ldr.w	r1, [r8], #4
 800a37c:	f8d0 e000 	ldr.w	lr, [r0]
 800a380:	b28b      	uxth	r3, r1
 800a382:	ebac 0303 	sub.w	r3, ip, r3
 800a386:	fa1f f28e 	uxth.w	r2, lr
 800a38a:	4413      	add	r3, r2
 800a38c:	0c0a      	lsrs	r2, r1, #16
 800a38e:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800a392:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a396:	b29b      	uxth	r3, r3
 800a398:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a39c:	45c1      	cmp	r9, r8
 800a39e:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800a3a2:	f840 3b04 	str.w	r3, [r0], #4
 800a3a6:	d2e7      	bcs.n	800a378 <quorem+0xb0>
 800a3a8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a3ac:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a3b0:	b922      	cbnz	r2, 800a3bc <quorem+0xf4>
 800a3b2:	3b04      	subs	r3, #4
 800a3b4:	429d      	cmp	r5, r3
 800a3b6:	461a      	mov	r2, r3
 800a3b8:	d30a      	bcc.n	800a3d0 <quorem+0x108>
 800a3ba:	613c      	str	r4, [r7, #16]
 800a3bc:	4630      	mov	r0, r6
 800a3be:	b003      	add	sp, #12
 800a3c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a3c4:	6812      	ldr	r2, [r2, #0]
 800a3c6:	3b04      	subs	r3, #4
 800a3c8:	2a00      	cmp	r2, #0
 800a3ca:	d1cb      	bne.n	800a364 <quorem+0x9c>
 800a3cc:	3c01      	subs	r4, #1
 800a3ce:	e7c6      	b.n	800a35e <quorem+0x96>
 800a3d0:	6812      	ldr	r2, [r2, #0]
 800a3d2:	3b04      	subs	r3, #4
 800a3d4:	2a00      	cmp	r2, #0
 800a3d6:	d1f0      	bne.n	800a3ba <quorem+0xf2>
 800a3d8:	3c01      	subs	r4, #1
 800a3da:	e7eb      	b.n	800a3b4 <quorem+0xec>
 800a3dc:	2000      	movs	r0, #0
 800a3de:	e7ee      	b.n	800a3be <quorem+0xf6>

0800a3e0 <_dtoa_r>:
 800a3e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a3e4:	4616      	mov	r6, r2
 800a3e6:	461f      	mov	r7, r3
 800a3e8:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800a3ea:	b099      	sub	sp, #100	; 0x64
 800a3ec:	4605      	mov	r5, r0
 800a3ee:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800a3f2:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800a3f6:	b974      	cbnz	r4, 800a416 <_dtoa_r+0x36>
 800a3f8:	2010      	movs	r0, #16
 800a3fa:	f001 f817 	bl	800b42c <malloc>
 800a3fe:	4602      	mov	r2, r0
 800a400:	6268      	str	r0, [r5, #36]	; 0x24
 800a402:	b920      	cbnz	r0, 800a40e <_dtoa_r+0x2e>
 800a404:	21ea      	movs	r1, #234	; 0xea
 800a406:	4ba8      	ldr	r3, [pc, #672]	; (800a6a8 <_dtoa_r+0x2c8>)
 800a408:	48a8      	ldr	r0, [pc, #672]	; (800a6ac <_dtoa_r+0x2cc>)
 800a40a:	f001 ff39 	bl	800c280 <__assert_func>
 800a40e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a412:	6004      	str	r4, [r0, #0]
 800a414:	60c4      	str	r4, [r0, #12]
 800a416:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a418:	6819      	ldr	r1, [r3, #0]
 800a41a:	b151      	cbz	r1, 800a432 <_dtoa_r+0x52>
 800a41c:	685a      	ldr	r2, [r3, #4]
 800a41e:	2301      	movs	r3, #1
 800a420:	4093      	lsls	r3, r2
 800a422:	604a      	str	r2, [r1, #4]
 800a424:	608b      	str	r3, [r1, #8]
 800a426:	4628      	mov	r0, r5
 800a428:	f001 f856 	bl	800b4d8 <_Bfree>
 800a42c:	2200      	movs	r2, #0
 800a42e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a430:	601a      	str	r2, [r3, #0]
 800a432:	1e3b      	subs	r3, r7, #0
 800a434:	bfaf      	iteee	ge
 800a436:	2300      	movge	r3, #0
 800a438:	2201      	movlt	r2, #1
 800a43a:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800a43e:	9305      	strlt	r3, [sp, #20]
 800a440:	bfa8      	it	ge
 800a442:	f8c8 3000 	strge.w	r3, [r8]
 800a446:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800a44a:	4b99      	ldr	r3, [pc, #612]	; (800a6b0 <_dtoa_r+0x2d0>)
 800a44c:	bfb8      	it	lt
 800a44e:	f8c8 2000 	strlt.w	r2, [r8]
 800a452:	ea33 0309 	bics.w	r3, r3, r9
 800a456:	d119      	bne.n	800a48c <_dtoa_r+0xac>
 800a458:	f242 730f 	movw	r3, #9999	; 0x270f
 800a45c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800a45e:	6013      	str	r3, [r2, #0]
 800a460:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a464:	4333      	orrs	r3, r6
 800a466:	f000 857f 	beq.w	800af68 <_dtoa_r+0xb88>
 800a46a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800a46c:	b953      	cbnz	r3, 800a484 <_dtoa_r+0xa4>
 800a46e:	4b91      	ldr	r3, [pc, #580]	; (800a6b4 <_dtoa_r+0x2d4>)
 800a470:	e022      	b.n	800a4b8 <_dtoa_r+0xd8>
 800a472:	4b91      	ldr	r3, [pc, #580]	; (800a6b8 <_dtoa_r+0x2d8>)
 800a474:	9303      	str	r3, [sp, #12]
 800a476:	3308      	adds	r3, #8
 800a478:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800a47a:	6013      	str	r3, [r2, #0]
 800a47c:	9803      	ldr	r0, [sp, #12]
 800a47e:	b019      	add	sp, #100	; 0x64
 800a480:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a484:	4b8b      	ldr	r3, [pc, #556]	; (800a6b4 <_dtoa_r+0x2d4>)
 800a486:	9303      	str	r3, [sp, #12]
 800a488:	3303      	adds	r3, #3
 800a48a:	e7f5      	b.n	800a478 <_dtoa_r+0x98>
 800a48c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800a490:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800a494:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a498:	2200      	movs	r2, #0
 800a49a:	2300      	movs	r3, #0
 800a49c:	f7f6 fa84 	bl	80009a8 <__aeabi_dcmpeq>
 800a4a0:	4680      	mov	r8, r0
 800a4a2:	b158      	cbz	r0, 800a4bc <_dtoa_r+0xdc>
 800a4a4:	2301      	movs	r3, #1
 800a4a6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800a4a8:	6013      	str	r3, [r2, #0]
 800a4aa:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800a4ac:	2b00      	cmp	r3, #0
 800a4ae:	f000 8558 	beq.w	800af62 <_dtoa_r+0xb82>
 800a4b2:	4882      	ldr	r0, [pc, #520]	; (800a6bc <_dtoa_r+0x2dc>)
 800a4b4:	6018      	str	r0, [r3, #0]
 800a4b6:	1e43      	subs	r3, r0, #1
 800a4b8:	9303      	str	r3, [sp, #12]
 800a4ba:	e7df      	b.n	800a47c <_dtoa_r+0x9c>
 800a4bc:	ab16      	add	r3, sp, #88	; 0x58
 800a4be:	9301      	str	r3, [sp, #4]
 800a4c0:	ab17      	add	r3, sp, #92	; 0x5c
 800a4c2:	9300      	str	r3, [sp, #0]
 800a4c4:	4628      	mov	r0, r5
 800a4c6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800a4ca:	f001 faeb 	bl	800baa4 <__d2b>
 800a4ce:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800a4d2:	4683      	mov	fp, r0
 800a4d4:	2c00      	cmp	r4, #0
 800a4d6:	d07f      	beq.n	800a5d8 <_dtoa_r+0x1f8>
 800a4d8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a4dc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a4de:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800a4e2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a4e6:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 800a4ea:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800a4ee:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800a4f2:	2200      	movs	r2, #0
 800a4f4:	4b72      	ldr	r3, [pc, #456]	; (800a6c0 <_dtoa_r+0x2e0>)
 800a4f6:	f7f5 fe37 	bl	8000168 <__aeabi_dsub>
 800a4fa:	a365      	add	r3, pc, #404	; (adr r3, 800a690 <_dtoa_r+0x2b0>)
 800a4fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a500:	f7f5 ffea 	bl	80004d8 <__aeabi_dmul>
 800a504:	a364      	add	r3, pc, #400	; (adr r3, 800a698 <_dtoa_r+0x2b8>)
 800a506:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a50a:	f7f5 fe2f 	bl	800016c <__adddf3>
 800a50e:	4606      	mov	r6, r0
 800a510:	4620      	mov	r0, r4
 800a512:	460f      	mov	r7, r1
 800a514:	f7f5 ff76 	bl	8000404 <__aeabi_i2d>
 800a518:	a361      	add	r3, pc, #388	; (adr r3, 800a6a0 <_dtoa_r+0x2c0>)
 800a51a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a51e:	f7f5 ffdb 	bl	80004d8 <__aeabi_dmul>
 800a522:	4602      	mov	r2, r0
 800a524:	460b      	mov	r3, r1
 800a526:	4630      	mov	r0, r6
 800a528:	4639      	mov	r1, r7
 800a52a:	f7f5 fe1f 	bl	800016c <__adddf3>
 800a52e:	4606      	mov	r6, r0
 800a530:	460f      	mov	r7, r1
 800a532:	f7f6 fa81 	bl	8000a38 <__aeabi_d2iz>
 800a536:	2200      	movs	r2, #0
 800a538:	4682      	mov	sl, r0
 800a53a:	2300      	movs	r3, #0
 800a53c:	4630      	mov	r0, r6
 800a53e:	4639      	mov	r1, r7
 800a540:	f7f6 fa3c 	bl	80009bc <__aeabi_dcmplt>
 800a544:	b148      	cbz	r0, 800a55a <_dtoa_r+0x17a>
 800a546:	4650      	mov	r0, sl
 800a548:	f7f5 ff5c 	bl	8000404 <__aeabi_i2d>
 800a54c:	4632      	mov	r2, r6
 800a54e:	463b      	mov	r3, r7
 800a550:	f7f6 fa2a 	bl	80009a8 <__aeabi_dcmpeq>
 800a554:	b908      	cbnz	r0, 800a55a <_dtoa_r+0x17a>
 800a556:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a55a:	f1ba 0f16 	cmp.w	sl, #22
 800a55e:	d858      	bhi.n	800a612 <_dtoa_r+0x232>
 800a560:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a564:	4b57      	ldr	r3, [pc, #348]	; (800a6c4 <_dtoa_r+0x2e4>)
 800a566:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800a56a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a56e:	f7f6 fa25 	bl	80009bc <__aeabi_dcmplt>
 800a572:	2800      	cmp	r0, #0
 800a574:	d04f      	beq.n	800a616 <_dtoa_r+0x236>
 800a576:	2300      	movs	r3, #0
 800a578:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a57c:	930f      	str	r3, [sp, #60]	; 0x3c
 800a57e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800a580:	1b1c      	subs	r4, r3, r4
 800a582:	1e63      	subs	r3, r4, #1
 800a584:	9309      	str	r3, [sp, #36]	; 0x24
 800a586:	bf49      	itett	mi
 800a588:	f1c4 0301 	rsbmi	r3, r4, #1
 800a58c:	2300      	movpl	r3, #0
 800a58e:	9306      	strmi	r3, [sp, #24]
 800a590:	2300      	movmi	r3, #0
 800a592:	bf54      	ite	pl
 800a594:	9306      	strpl	r3, [sp, #24]
 800a596:	9309      	strmi	r3, [sp, #36]	; 0x24
 800a598:	f1ba 0f00 	cmp.w	sl, #0
 800a59c:	db3d      	blt.n	800a61a <_dtoa_r+0x23a>
 800a59e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a5a0:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800a5a4:	4453      	add	r3, sl
 800a5a6:	9309      	str	r3, [sp, #36]	; 0x24
 800a5a8:	2300      	movs	r3, #0
 800a5aa:	930a      	str	r3, [sp, #40]	; 0x28
 800a5ac:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a5ae:	2b09      	cmp	r3, #9
 800a5b0:	f200 808c 	bhi.w	800a6cc <_dtoa_r+0x2ec>
 800a5b4:	2b05      	cmp	r3, #5
 800a5b6:	bfc4      	itt	gt
 800a5b8:	3b04      	subgt	r3, #4
 800a5ba:	9322      	strgt	r3, [sp, #136]	; 0x88
 800a5bc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a5be:	bfc8      	it	gt
 800a5c0:	2400      	movgt	r4, #0
 800a5c2:	f1a3 0302 	sub.w	r3, r3, #2
 800a5c6:	bfd8      	it	le
 800a5c8:	2401      	movle	r4, #1
 800a5ca:	2b03      	cmp	r3, #3
 800a5cc:	f200 808a 	bhi.w	800a6e4 <_dtoa_r+0x304>
 800a5d0:	e8df f003 	tbb	[pc, r3]
 800a5d4:	5b4d4f2d 	.word	0x5b4d4f2d
 800a5d8:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800a5dc:	441c      	add	r4, r3
 800a5de:	f204 4332 	addw	r3, r4, #1074	; 0x432
 800a5e2:	2b20      	cmp	r3, #32
 800a5e4:	bfc3      	ittte	gt
 800a5e6:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800a5ea:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 800a5ee:	fa09 f303 	lslgt.w	r3, r9, r3
 800a5f2:	f1c3 0320 	rsble	r3, r3, #32
 800a5f6:	bfc6      	itte	gt
 800a5f8:	fa26 f000 	lsrgt.w	r0, r6, r0
 800a5fc:	4318      	orrgt	r0, r3
 800a5fe:	fa06 f003 	lslle.w	r0, r6, r3
 800a602:	f7f5 feef 	bl	80003e4 <__aeabi_ui2d>
 800a606:	2301      	movs	r3, #1
 800a608:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800a60c:	3c01      	subs	r4, #1
 800a60e:	9313      	str	r3, [sp, #76]	; 0x4c
 800a610:	e76f      	b.n	800a4f2 <_dtoa_r+0x112>
 800a612:	2301      	movs	r3, #1
 800a614:	e7b2      	b.n	800a57c <_dtoa_r+0x19c>
 800a616:	900f      	str	r0, [sp, #60]	; 0x3c
 800a618:	e7b1      	b.n	800a57e <_dtoa_r+0x19e>
 800a61a:	9b06      	ldr	r3, [sp, #24]
 800a61c:	eba3 030a 	sub.w	r3, r3, sl
 800a620:	9306      	str	r3, [sp, #24]
 800a622:	f1ca 0300 	rsb	r3, sl, #0
 800a626:	930a      	str	r3, [sp, #40]	; 0x28
 800a628:	2300      	movs	r3, #0
 800a62a:	930e      	str	r3, [sp, #56]	; 0x38
 800a62c:	e7be      	b.n	800a5ac <_dtoa_r+0x1cc>
 800a62e:	2300      	movs	r3, #0
 800a630:	930b      	str	r3, [sp, #44]	; 0x2c
 800a632:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a634:	2b00      	cmp	r3, #0
 800a636:	dc58      	bgt.n	800a6ea <_dtoa_r+0x30a>
 800a638:	f04f 0901 	mov.w	r9, #1
 800a63c:	464b      	mov	r3, r9
 800a63e:	f8cd 9020 	str.w	r9, [sp, #32]
 800a642:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 800a646:	2200      	movs	r2, #0
 800a648:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800a64a:	6042      	str	r2, [r0, #4]
 800a64c:	2204      	movs	r2, #4
 800a64e:	f102 0614 	add.w	r6, r2, #20
 800a652:	429e      	cmp	r6, r3
 800a654:	6841      	ldr	r1, [r0, #4]
 800a656:	d94e      	bls.n	800a6f6 <_dtoa_r+0x316>
 800a658:	4628      	mov	r0, r5
 800a65a:	f000 fefd 	bl	800b458 <_Balloc>
 800a65e:	9003      	str	r0, [sp, #12]
 800a660:	2800      	cmp	r0, #0
 800a662:	d14c      	bne.n	800a6fe <_dtoa_r+0x31e>
 800a664:	4602      	mov	r2, r0
 800a666:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800a66a:	4b17      	ldr	r3, [pc, #92]	; (800a6c8 <_dtoa_r+0x2e8>)
 800a66c:	e6cc      	b.n	800a408 <_dtoa_r+0x28>
 800a66e:	2301      	movs	r3, #1
 800a670:	e7de      	b.n	800a630 <_dtoa_r+0x250>
 800a672:	2300      	movs	r3, #0
 800a674:	930b      	str	r3, [sp, #44]	; 0x2c
 800a676:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a678:	eb0a 0903 	add.w	r9, sl, r3
 800a67c:	f109 0301 	add.w	r3, r9, #1
 800a680:	2b01      	cmp	r3, #1
 800a682:	9308      	str	r3, [sp, #32]
 800a684:	bfb8      	it	lt
 800a686:	2301      	movlt	r3, #1
 800a688:	e7dd      	b.n	800a646 <_dtoa_r+0x266>
 800a68a:	2301      	movs	r3, #1
 800a68c:	e7f2      	b.n	800a674 <_dtoa_r+0x294>
 800a68e:	bf00      	nop
 800a690:	636f4361 	.word	0x636f4361
 800a694:	3fd287a7 	.word	0x3fd287a7
 800a698:	8b60c8b3 	.word	0x8b60c8b3
 800a69c:	3fc68a28 	.word	0x3fc68a28
 800a6a0:	509f79fb 	.word	0x509f79fb
 800a6a4:	3fd34413 	.word	0x3fd34413
 800a6a8:	0800d299 	.word	0x0800d299
 800a6ac:	0800d2b0 	.word	0x0800d2b0
 800a6b0:	7ff00000 	.word	0x7ff00000
 800a6b4:	0800d295 	.word	0x0800d295
 800a6b8:	0800d28c 	.word	0x0800d28c
 800a6bc:	0800d269 	.word	0x0800d269
 800a6c0:	3ff80000 	.word	0x3ff80000
 800a6c4:	0800d400 	.word	0x0800d400
 800a6c8:	0800d30b 	.word	0x0800d30b
 800a6cc:	2401      	movs	r4, #1
 800a6ce:	2300      	movs	r3, #0
 800a6d0:	940b      	str	r4, [sp, #44]	; 0x2c
 800a6d2:	9322      	str	r3, [sp, #136]	; 0x88
 800a6d4:	f04f 39ff 	mov.w	r9, #4294967295
 800a6d8:	2200      	movs	r2, #0
 800a6da:	2312      	movs	r3, #18
 800a6dc:	f8cd 9020 	str.w	r9, [sp, #32]
 800a6e0:	9223      	str	r2, [sp, #140]	; 0x8c
 800a6e2:	e7b0      	b.n	800a646 <_dtoa_r+0x266>
 800a6e4:	2301      	movs	r3, #1
 800a6e6:	930b      	str	r3, [sp, #44]	; 0x2c
 800a6e8:	e7f4      	b.n	800a6d4 <_dtoa_r+0x2f4>
 800a6ea:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 800a6ee:	464b      	mov	r3, r9
 800a6f0:	f8cd 9020 	str.w	r9, [sp, #32]
 800a6f4:	e7a7      	b.n	800a646 <_dtoa_r+0x266>
 800a6f6:	3101      	adds	r1, #1
 800a6f8:	6041      	str	r1, [r0, #4]
 800a6fa:	0052      	lsls	r2, r2, #1
 800a6fc:	e7a7      	b.n	800a64e <_dtoa_r+0x26e>
 800a6fe:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a700:	9a03      	ldr	r2, [sp, #12]
 800a702:	601a      	str	r2, [r3, #0]
 800a704:	9b08      	ldr	r3, [sp, #32]
 800a706:	2b0e      	cmp	r3, #14
 800a708:	f200 80a8 	bhi.w	800a85c <_dtoa_r+0x47c>
 800a70c:	2c00      	cmp	r4, #0
 800a70e:	f000 80a5 	beq.w	800a85c <_dtoa_r+0x47c>
 800a712:	f1ba 0f00 	cmp.w	sl, #0
 800a716:	dd34      	ble.n	800a782 <_dtoa_r+0x3a2>
 800a718:	4a9a      	ldr	r2, [pc, #616]	; (800a984 <_dtoa_r+0x5a4>)
 800a71a:	f00a 030f 	and.w	r3, sl, #15
 800a71e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800a722:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800a726:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a72a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800a72e:	ea4f 142a 	mov.w	r4, sl, asr #4
 800a732:	d016      	beq.n	800a762 <_dtoa_r+0x382>
 800a734:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a738:	4b93      	ldr	r3, [pc, #588]	; (800a988 <_dtoa_r+0x5a8>)
 800a73a:	2703      	movs	r7, #3
 800a73c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a740:	f7f5 fff4 	bl	800072c <__aeabi_ddiv>
 800a744:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a748:	f004 040f 	and.w	r4, r4, #15
 800a74c:	4e8e      	ldr	r6, [pc, #568]	; (800a988 <_dtoa_r+0x5a8>)
 800a74e:	b954      	cbnz	r4, 800a766 <_dtoa_r+0x386>
 800a750:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a754:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a758:	f7f5 ffe8 	bl	800072c <__aeabi_ddiv>
 800a75c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a760:	e029      	b.n	800a7b6 <_dtoa_r+0x3d6>
 800a762:	2702      	movs	r7, #2
 800a764:	e7f2      	b.n	800a74c <_dtoa_r+0x36c>
 800a766:	07e1      	lsls	r1, r4, #31
 800a768:	d508      	bpl.n	800a77c <_dtoa_r+0x39c>
 800a76a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a76e:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a772:	f7f5 feb1 	bl	80004d8 <__aeabi_dmul>
 800a776:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800a77a:	3701      	adds	r7, #1
 800a77c:	1064      	asrs	r4, r4, #1
 800a77e:	3608      	adds	r6, #8
 800a780:	e7e5      	b.n	800a74e <_dtoa_r+0x36e>
 800a782:	f000 80a5 	beq.w	800a8d0 <_dtoa_r+0x4f0>
 800a786:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a78a:	f1ca 0400 	rsb	r4, sl, #0
 800a78e:	4b7d      	ldr	r3, [pc, #500]	; (800a984 <_dtoa_r+0x5a4>)
 800a790:	f004 020f 	and.w	r2, r4, #15
 800a794:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a798:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a79c:	f7f5 fe9c 	bl	80004d8 <__aeabi_dmul>
 800a7a0:	2702      	movs	r7, #2
 800a7a2:	2300      	movs	r3, #0
 800a7a4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a7a8:	4e77      	ldr	r6, [pc, #476]	; (800a988 <_dtoa_r+0x5a8>)
 800a7aa:	1124      	asrs	r4, r4, #4
 800a7ac:	2c00      	cmp	r4, #0
 800a7ae:	f040 8084 	bne.w	800a8ba <_dtoa_r+0x4da>
 800a7b2:	2b00      	cmp	r3, #0
 800a7b4:	d1d2      	bne.n	800a75c <_dtoa_r+0x37c>
 800a7b6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a7b8:	2b00      	cmp	r3, #0
 800a7ba:	f000 808b 	beq.w	800a8d4 <_dtoa_r+0x4f4>
 800a7be:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800a7c2:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800a7c6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a7ca:	2200      	movs	r2, #0
 800a7cc:	4b6f      	ldr	r3, [pc, #444]	; (800a98c <_dtoa_r+0x5ac>)
 800a7ce:	f7f6 f8f5 	bl	80009bc <__aeabi_dcmplt>
 800a7d2:	2800      	cmp	r0, #0
 800a7d4:	d07e      	beq.n	800a8d4 <_dtoa_r+0x4f4>
 800a7d6:	9b08      	ldr	r3, [sp, #32]
 800a7d8:	2b00      	cmp	r3, #0
 800a7da:	d07b      	beq.n	800a8d4 <_dtoa_r+0x4f4>
 800a7dc:	f1b9 0f00 	cmp.w	r9, #0
 800a7e0:	dd38      	ble.n	800a854 <_dtoa_r+0x474>
 800a7e2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a7e6:	2200      	movs	r2, #0
 800a7e8:	4b69      	ldr	r3, [pc, #420]	; (800a990 <_dtoa_r+0x5b0>)
 800a7ea:	f7f5 fe75 	bl	80004d8 <__aeabi_dmul>
 800a7ee:	464c      	mov	r4, r9
 800a7f0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a7f4:	f10a 38ff 	add.w	r8, sl, #4294967295
 800a7f8:	3701      	adds	r7, #1
 800a7fa:	4638      	mov	r0, r7
 800a7fc:	f7f5 fe02 	bl	8000404 <__aeabi_i2d>
 800a800:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a804:	f7f5 fe68 	bl	80004d8 <__aeabi_dmul>
 800a808:	2200      	movs	r2, #0
 800a80a:	4b62      	ldr	r3, [pc, #392]	; (800a994 <_dtoa_r+0x5b4>)
 800a80c:	f7f5 fcae 	bl	800016c <__adddf3>
 800a810:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800a814:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800a818:	9611      	str	r6, [sp, #68]	; 0x44
 800a81a:	2c00      	cmp	r4, #0
 800a81c:	d15d      	bne.n	800a8da <_dtoa_r+0x4fa>
 800a81e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a822:	2200      	movs	r2, #0
 800a824:	4b5c      	ldr	r3, [pc, #368]	; (800a998 <_dtoa_r+0x5b8>)
 800a826:	f7f5 fc9f 	bl	8000168 <__aeabi_dsub>
 800a82a:	4602      	mov	r2, r0
 800a82c:	460b      	mov	r3, r1
 800a82e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a832:	4633      	mov	r3, r6
 800a834:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a836:	f7f6 f8df 	bl	80009f8 <__aeabi_dcmpgt>
 800a83a:	2800      	cmp	r0, #0
 800a83c:	f040 829c 	bne.w	800ad78 <_dtoa_r+0x998>
 800a840:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a844:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a846:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800a84a:	f7f6 f8b7 	bl	80009bc <__aeabi_dcmplt>
 800a84e:	2800      	cmp	r0, #0
 800a850:	f040 8290 	bne.w	800ad74 <_dtoa_r+0x994>
 800a854:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 800a858:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800a85c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a85e:	2b00      	cmp	r3, #0
 800a860:	f2c0 8152 	blt.w	800ab08 <_dtoa_r+0x728>
 800a864:	f1ba 0f0e 	cmp.w	sl, #14
 800a868:	f300 814e 	bgt.w	800ab08 <_dtoa_r+0x728>
 800a86c:	4b45      	ldr	r3, [pc, #276]	; (800a984 <_dtoa_r+0x5a4>)
 800a86e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800a872:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a876:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800a87a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a87c:	2b00      	cmp	r3, #0
 800a87e:	f280 80db 	bge.w	800aa38 <_dtoa_r+0x658>
 800a882:	9b08      	ldr	r3, [sp, #32]
 800a884:	2b00      	cmp	r3, #0
 800a886:	f300 80d7 	bgt.w	800aa38 <_dtoa_r+0x658>
 800a88a:	f040 8272 	bne.w	800ad72 <_dtoa_r+0x992>
 800a88e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a892:	2200      	movs	r2, #0
 800a894:	4b40      	ldr	r3, [pc, #256]	; (800a998 <_dtoa_r+0x5b8>)
 800a896:	f7f5 fe1f 	bl	80004d8 <__aeabi_dmul>
 800a89a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a89e:	f7f6 f8a1 	bl	80009e4 <__aeabi_dcmpge>
 800a8a2:	9c08      	ldr	r4, [sp, #32]
 800a8a4:	4626      	mov	r6, r4
 800a8a6:	2800      	cmp	r0, #0
 800a8a8:	f040 8248 	bne.w	800ad3c <_dtoa_r+0x95c>
 800a8ac:	2331      	movs	r3, #49	; 0x31
 800a8ae:	9f03      	ldr	r7, [sp, #12]
 800a8b0:	f10a 0a01 	add.w	sl, sl, #1
 800a8b4:	f807 3b01 	strb.w	r3, [r7], #1
 800a8b8:	e244      	b.n	800ad44 <_dtoa_r+0x964>
 800a8ba:	07e2      	lsls	r2, r4, #31
 800a8bc:	d505      	bpl.n	800a8ca <_dtoa_r+0x4ea>
 800a8be:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a8c2:	f7f5 fe09 	bl	80004d8 <__aeabi_dmul>
 800a8c6:	2301      	movs	r3, #1
 800a8c8:	3701      	adds	r7, #1
 800a8ca:	1064      	asrs	r4, r4, #1
 800a8cc:	3608      	adds	r6, #8
 800a8ce:	e76d      	b.n	800a7ac <_dtoa_r+0x3cc>
 800a8d0:	2702      	movs	r7, #2
 800a8d2:	e770      	b.n	800a7b6 <_dtoa_r+0x3d6>
 800a8d4:	46d0      	mov	r8, sl
 800a8d6:	9c08      	ldr	r4, [sp, #32]
 800a8d8:	e78f      	b.n	800a7fa <_dtoa_r+0x41a>
 800a8da:	9903      	ldr	r1, [sp, #12]
 800a8dc:	4b29      	ldr	r3, [pc, #164]	; (800a984 <_dtoa_r+0x5a4>)
 800a8de:	4421      	add	r1, r4
 800a8e0:	9112      	str	r1, [sp, #72]	; 0x48
 800a8e2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a8e4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a8e8:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800a8ec:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a8f0:	2900      	cmp	r1, #0
 800a8f2:	d055      	beq.n	800a9a0 <_dtoa_r+0x5c0>
 800a8f4:	2000      	movs	r0, #0
 800a8f6:	4929      	ldr	r1, [pc, #164]	; (800a99c <_dtoa_r+0x5bc>)
 800a8f8:	f7f5 ff18 	bl	800072c <__aeabi_ddiv>
 800a8fc:	463b      	mov	r3, r7
 800a8fe:	4632      	mov	r2, r6
 800a900:	f7f5 fc32 	bl	8000168 <__aeabi_dsub>
 800a904:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800a908:	9f03      	ldr	r7, [sp, #12]
 800a90a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a90e:	f7f6 f893 	bl	8000a38 <__aeabi_d2iz>
 800a912:	4604      	mov	r4, r0
 800a914:	f7f5 fd76 	bl	8000404 <__aeabi_i2d>
 800a918:	4602      	mov	r2, r0
 800a91a:	460b      	mov	r3, r1
 800a91c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a920:	f7f5 fc22 	bl	8000168 <__aeabi_dsub>
 800a924:	4602      	mov	r2, r0
 800a926:	460b      	mov	r3, r1
 800a928:	3430      	adds	r4, #48	; 0x30
 800a92a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a92e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a932:	f807 4b01 	strb.w	r4, [r7], #1
 800a936:	f7f6 f841 	bl	80009bc <__aeabi_dcmplt>
 800a93a:	2800      	cmp	r0, #0
 800a93c:	d174      	bne.n	800aa28 <_dtoa_r+0x648>
 800a93e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a942:	2000      	movs	r0, #0
 800a944:	4911      	ldr	r1, [pc, #68]	; (800a98c <_dtoa_r+0x5ac>)
 800a946:	f7f5 fc0f 	bl	8000168 <__aeabi_dsub>
 800a94a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a94e:	f7f6 f835 	bl	80009bc <__aeabi_dcmplt>
 800a952:	2800      	cmp	r0, #0
 800a954:	f040 80b7 	bne.w	800aac6 <_dtoa_r+0x6e6>
 800a958:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a95a:	429f      	cmp	r7, r3
 800a95c:	f43f af7a 	beq.w	800a854 <_dtoa_r+0x474>
 800a960:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a964:	2200      	movs	r2, #0
 800a966:	4b0a      	ldr	r3, [pc, #40]	; (800a990 <_dtoa_r+0x5b0>)
 800a968:	f7f5 fdb6 	bl	80004d8 <__aeabi_dmul>
 800a96c:	2200      	movs	r2, #0
 800a96e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800a972:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a976:	4b06      	ldr	r3, [pc, #24]	; (800a990 <_dtoa_r+0x5b0>)
 800a978:	f7f5 fdae 	bl	80004d8 <__aeabi_dmul>
 800a97c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a980:	e7c3      	b.n	800a90a <_dtoa_r+0x52a>
 800a982:	bf00      	nop
 800a984:	0800d400 	.word	0x0800d400
 800a988:	0800d3d8 	.word	0x0800d3d8
 800a98c:	3ff00000 	.word	0x3ff00000
 800a990:	40240000 	.word	0x40240000
 800a994:	401c0000 	.word	0x401c0000
 800a998:	40140000 	.word	0x40140000
 800a99c:	3fe00000 	.word	0x3fe00000
 800a9a0:	4630      	mov	r0, r6
 800a9a2:	4639      	mov	r1, r7
 800a9a4:	f7f5 fd98 	bl	80004d8 <__aeabi_dmul>
 800a9a8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a9aa:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800a9ae:	9c03      	ldr	r4, [sp, #12]
 800a9b0:	9314      	str	r3, [sp, #80]	; 0x50
 800a9b2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a9b6:	f7f6 f83f 	bl	8000a38 <__aeabi_d2iz>
 800a9ba:	9015      	str	r0, [sp, #84]	; 0x54
 800a9bc:	f7f5 fd22 	bl	8000404 <__aeabi_i2d>
 800a9c0:	4602      	mov	r2, r0
 800a9c2:	460b      	mov	r3, r1
 800a9c4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a9c8:	f7f5 fbce 	bl	8000168 <__aeabi_dsub>
 800a9cc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a9ce:	4606      	mov	r6, r0
 800a9d0:	3330      	adds	r3, #48	; 0x30
 800a9d2:	f804 3b01 	strb.w	r3, [r4], #1
 800a9d6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a9d8:	460f      	mov	r7, r1
 800a9da:	429c      	cmp	r4, r3
 800a9dc:	f04f 0200 	mov.w	r2, #0
 800a9e0:	d124      	bne.n	800aa2c <_dtoa_r+0x64c>
 800a9e2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a9e6:	4bb0      	ldr	r3, [pc, #704]	; (800aca8 <_dtoa_r+0x8c8>)
 800a9e8:	f7f5 fbc0 	bl	800016c <__adddf3>
 800a9ec:	4602      	mov	r2, r0
 800a9ee:	460b      	mov	r3, r1
 800a9f0:	4630      	mov	r0, r6
 800a9f2:	4639      	mov	r1, r7
 800a9f4:	f7f6 f800 	bl	80009f8 <__aeabi_dcmpgt>
 800a9f8:	2800      	cmp	r0, #0
 800a9fa:	d163      	bne.n	800aac4 <_dtoa_r+0x6e4>
 800a9fc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800aa00:	2000      	movs	r0, #0
 800aa02:	49a9      	ldr	r1, [pc, #676]	; (800aca8 <_dtoa_r+0x8c8>)
 800aa04:	f7f5 fbb0 	bl	8000168 <__aeabi_dsub>
 800aa08:	4602      	mov	r2, r0
 800aa0a:	460b      	mov	r3, r1
 800aa0c:	4630      	mov	r0, r6
 800aa0e:	4639      	mov	r1, r7
 800aa10:	f7f5 ffd4 	bl	80009bc <__aeabi_dcmplt>
 800aa14:	2800      	cmp	r0, #0
 800aa16:	f43f af1d 	beq.w	800a854 <_dtoa_r+0x474>
 800aa1a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800aa1c:	1e7b      	subs	r3, r7, #1
 800aa1e:	9314      	str	r3, [sp, #80]	; 0x50
 800aa20:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800aa24:	2b30      	cmp	r3, #48	; 0x30
 800aa26:	d0f8      	beq.n	800aa1a <_dtoa_r+0x63a>
 800aa28:	46c2      	mov	sl, r8
 800aa2a:	e03b      	b.n	800aaa4 <_dtoa_r+0x6c4>
 800aa2c:	4b9f      	ldr	r3, [pc, #636]	; (800acac <_dtoa_r+0x8cc>)
 800aa2e:	f7f5 fd53 	bl	80004d8 <__aeabi_dmul>
 800aa32:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800aa36:	e7bc      	b.n	800a9b2 <_dtoa_r+0x5d2>
 800aa38:	9f03      	ldr	r7, [sp, #12]
 800aa3a:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800aa3e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800aa42:	4640      	mov	r0, r8
 800aa44:	4649      	mov	r1, r9
 800aa46:	f7f5 fe71 	bl	800072c <__aeabi_ddiv>
 800aa4a:	f7f5 fff5 	bl	8000a38 <__aeabi_d2iz>
 800aa4e:	4604      	mov	r4, r0
 800aa50:	f7f5 fcd8 	bl	8000404 <__aeabi_i2d>
 800aa54:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800aa58:	f7f5 fd3e 	bl	80004d8 <__aeabi_dmul>
 800aa5c:	4602      	mov	r2, r0
 800aa5e:	460b      	mov	r3, r1
 800aa60:	4640      	mov	r0, r8
 800aa62:	4649      	mov	r1, r9
 800aa64:	f7f5 fb80 	bl	8000168 <__aeabi_dsub>
 800aa68:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800aa6c:	f807 6b01 	strb.w	r6, [r7], #1
 800aa70:	9e03      	ldr	r6, [sp, #12]
 800aa72:	f8dd c020 	ldr.w	ip, [sp, #32]
 800aa76:	1bbe      	subs	r6, r7, r6
 800aa78:	45b4      	cmp	ip, r6
 800aa7a:	4602      	mov	r2, r0
 800aa7c:	460b      	mov	r3, r1
 800aa7e:	d136      	bne.n	800aaee <_dtoa_r+0x70e>
 800aa80:	f7f5 fb74 	bl	800016c <__adddf3>
 800aa84:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800aa88:	4680      	mov	r8, r0
 800aa8a:	4689      	mov	r9, r1
 800aa8c:	f7f5 ffb4 	bl	80009f8 <__aeabi_dcmpgt>
 800aa90:	bb58      	cbnz	r0, 800aaea <_dtoa_r+0x70a>
 800aa92:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800aa96:	4640      	mov	r0, r8
 800aa98:	4649      	mov	r1, r9
 800aa9a:	f7f5 ff85 	bl	80009a8 <__aeabi_dcmpeq>
 800aa9e:	b108      	cbz	r0, 800aaa4 <_dtoa_r+0x6c4>
 800aaa0:	07e1      	lsls	r1, r4, #31
 800aaa2:	d422      	bmi.n	800aaea <_dtoa_r+0x70a>
 800aaa4:	4628      	mov	r0, r5
 800aaa6:	4659      	mov	r1, fp
 800aaa8:	f000 fd16 	bl	800b4d8 <_Bfree>
 800aaac:	2300      	movs	r3, #0
 800aaae:	703b      	strb	r3, [r7, #0]
 800aab0:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800aab2:	f10a 0001 	add.w	r0, sl, #1
 800aab6:	6018      	str	r0, [r3, #0]
 800aab8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800aaba:	2b00      	cmp	r3, #0
 800aabc:	f43f acde 	beq.w	800a47c <_dtoa_r+0x9c>
 800aac0:	601f      	str	r7, [r3, #0]
 800aac2:	e4db      	b.n	800a47c <_dtoa_r+0x9c>
 800aac4:	4627      	mov	r7, r4
 800aac6:	463b      	mov	r3, r7
 800aac8:	461f      	mov	r7, r3
 800aaca:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800aace:	2a39      	cmp	r2, #57	; 0x39
 800aad0:	d107      	bne.n	800aae2 <_dtoa_r+0x702>
 800aad2:	9a03      	ldr	r2, [sp, #12]
 800aad4:	429a      	cmp	r2, r3
 800aad6:	d1f7      	bne.n	800aac8 <_dtoa_r+0x6e8>
 800aad8:	2230      	movs	r2, #48	; 0x30
 800aada:	9903      	ldr	r1, [sp, #12]
 800aadc:	f108 0801 	add.w	r8, r8, #1
 800aae0:	700a      	strb	r2, [r1, #0]
 800aae2:	781a      	ldrb	r2, [r3, #0]
 800aae4:	3201      	adds	r2, #1
 800aae6:	701a      	strb	r2, [r3, #0]
 800aae8:	e79e      	b.n	800aa28 <_dtoa_r+0x648>
 800aaea:	46d0      	mov	r8, sl
 800aaec:	e7eb      	b.n	800aac6 <_dtoa_r+0x6e6>
 800aaee:	2200      	movs	r2, #0
 800aaf0:	4b6e      	ldr	r3, [pc, #440]	; (800acac <_dtoa_r+0x8cc>)
 800aaf2:	f7f5 fcf1 	bl	80004d8 <__aeabi_dmul>
 800aaf6:	2200      	movs	r2, #0
 800aaf8:	2300      	movs	r3, #0
 800aafa:	4680      	mov	r8, r0
 800aafc:	4689      	mov	r9, r1
 800aafe:	f7f5 ff53 	bl	80009a8 <__aeabi_dcmpeq>
 800ab02:	2800      	cmp	r0, #0
 800ab04:	d09b      	beq.n	800aa3e <_dtoa_r+0x65e>
 800ab06:	e7cd      	b.n	800aaa4 <_dtoa_r+0x6c4>
 800ab08:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ab0a:	2a00      	cmp	r2, #0
 800ab0c:	f000 80d0 	beq.w	800acb0 <_dtoa_r+0x8d0>
 800ab10:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800ab12:	2a01      	cmp	r2, #1
 800ab14:	f300 80ae 	bgt.w	800ac74 <_dtoa_r+0x894>
 800ab18:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800ab1a:	2a00      	cmp	r2, #0
 800ab1c:	f000 80a6 	beq.w	800ac6c <_dtoa_r+0x88c>
 800ab20:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800ab24:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800ab26:	9f06      	ldr	r7, [sp, #24]
 800ab28:	9a06      	ldr	r2, [sp, #24]
 800ab2a:	2101      	movs	r1, #1
 800ab2c:	441a      	add	r2, r3
 800ab2e:	9206      	str	r2, [sp, #24]
 800ab30:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ab32:	4628      	mov	r0, r5
 800ab34:	441a      	add	r2, r3
 800ab36:	9209      	str	r2, [sp, #36]	; 0x24
 800ab38:	f000 fd84 	bl	800b644 <__i2b>
 800ab3c:	4606      	mov	r6, r0
 800ab3e:	2f00      	cmp	r7, #0
 800ab40:	dd0c      	ble.n	800ab5c <_dtoa_r+0x77c>
 800ab42:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ab44:	2b00      	cmp	r3, #0
 800ab46:	dd09      	ble.n	800ab5c <_dtoa_r+0x77c>
 800ab48:	42bb      	cmp	r3, r7
 800ab4a:	bfa8      	it	ge
 800ab4c:	463b      	movge	r3, r7
 800ab4e:	9a06      	ldr	r2, [sp, #24]
 800ab50:	1aff      	subs	r7, r7, r3
 800ab52:	1ad2      	subs	r2, r2, r3
 800ab54:	9206      	str	r2, [sp, #24]
 800ab56:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ab58:	1ad3      	subs	r3, r2, r3
 800ab5a:	9309      	str	r3, [sp, #36]	; 0x24
 800ab5c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ab5e:	b1f3      	cbz	r3, 800ab9e <_dtoa_r+0x7be>
 800ab60:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ab62:	2b00      	cmp	r3, #0
 800ab64:	f000 80a8 	beq.w	800acb8 <_dtoa_r+0x8d8>
 800ab68:	2c00      	cmp	r4, #0
 800ab6a:	dd10      	ble.n	800ab8e <_dtoa_r+0x7ae>
 800ab6c:	4631      	mov	r1, r6
 800ab6e:	4622      	mov	r2, r4
 800ab70:	4628      	mov	r0, r5
 800ab72:	f000 fe25 	bl	800b7c0 <__pow5mult>
 800ab76:	465a      	mov	r2, fp
 800ab78:	4601      	mov	r1, r0
 800ab7a:	4606      	mov	r6, r0
 800ab7c:	4628      	mov	r0, r5
 800ab7e:	f000 fd77 	bl	800b670 <__multiply>
 800ab82:	4680      	mov	r8, r0
 800ab84:	4659      	mov	r1, fp
 800ab86:	4628      	mov	r0, r5
 800ab88:	f000 fca6 	bl	800b4d8 <_Bfree>
 800ab8c:	46c3      	mov	fp, r8
 800ab8e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ab90:	1b1a      	subs	r2, r3, r4
 800ab92:	d004      	beq.n	800ab9e <_dtoa_r+0x7be>
 800ab94:	4659      	mov	r1, fp
 800ab96:	4628      	mov	r0, r5
 800ab98:	f000 fe12 	bl	800b7c0 <__pow5mult>
 800ab9c:	4683      	mov	fp, r0
 800ab9e:	2101      	movs	r1, #1
 800aba0:	4628      	mov	r0, r5
 800aba2:	f000 fd4f 	bl	800b644 <__i2b>
 800aba6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800aba8:	4604      	mov	r4, r0
 800abaa:	2b00      	cmp	r3, #0
 800abac:	f340 8086 	ble.w	800acbc <_dtoa_r+0x8dc>
 800abb0:	461a      	mov	r2, r3
 800abb2:	4601      	mov	r1, r0
 800abb4:	4628      	mov	r0, r5
 800abb6:	f000 fe03 	bl	800b7c0 <__pow5mult>
 800abba:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800abbc:	4604      	mov	r4, r0
 800abbe:	2b01      	cmp	r3, #1
 800abc0:	dd7f      	ble.n	800acc2 <_dtoa_r+0x8e2>
 800abc2:	f04f 0800 	mov.w	r8, #0
 800abc6:	6923      	ldr	r3, [r4, #16]
 800abc8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800abcc:	6918      	ldr	r0, [r3, #16]
 800abce:	f000 fceb 	bl	800b5a8 <__hi0bits>
 800abd2:	f1c0 0020 	rsb	r0, r0, #32
 800abd6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800abd8:	4418      	add	r0, r3
 800abda:	f010 001f 	ands.w	r0, r0, #31
 800abde:	f000 8092 	beq.w	800ad06 <_dtoa_r+0x926>
 800abe2:	f1c0 0320 	rsb	r3, r0, #32
 800abe6:	2b04      	cmp	r3, #4
 800abe8:	f340 808a 	ble.w	800ad00 <_dtoa_r+0x920>
 800abec:	f1c0 001c 	rsb	r0, r0, #28
 800abf0:	9b06      	ldr	r3, [sp, #24]
 800abf2:	4407      	add	r7, r0
 800abf4:	4403      	add	r3, r0
 800abf6:	9306      	str	r3, [sp, #24]
 800abf8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800abfa:	4403      	add	r3, r0
 800abfc:	9309      	str	r3, [sp, #36]	; 0x24
 800abfe:	9b06      	ldr	r3, [sp, #24]
 800ac00:	2b00      	cmp	r3, #0
 800ac02:	dd05      	ble.n	800ac10 <_dtoa_r+0x830>
 800ac04:	4659      	mov	r1, fp
 800ac06:	461a      	mov	r2, r3
 800ac08:	4628      	mov	r0, r5
 800ac0a:	f000 fe33 	bl	800b874 <__lshift>
 800ac0e:	4683      	mov	fp, r0
 800ac10:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ac12:	2b00      	cmp	r3, #0
 800ac14:	dd05      	ble.n	800ac22 <_dtoa_r+0x842>
 800ac16:	4621      	mov	r1, r4
 800ac18:	461a      	mov	r2, r3
 800ac1a:	4628      	mov	r0, r5
 800ac1c:	f000 fe2a 	bl	800b874 <__lshift>
 800ac20:	4604      	mov	r4, r0
 800ac22:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ac24:	2b00      	cmp	r3, #0
 800ac26:	d070      	beq.n	800ad0a <_dtoa_r+0x92a>
 800ac28:	4621      	mov	r1, r4
 800ac2a:	4658      	mov	r0, fp
 800ac2c:	f000 fe92 	bl	800b954 <__mcmp>
 800ac30:	2800      	cmp	r0, #0
 800ac32:	da6a      	bge.n	800ad0a <_dtoa_r+0x92a>
 800ac34:	2300      	movs	r3, #0
 800ac36:	4659      	mov	r1, fp
 800ac38:	220a      	movs	r2, #10
 800ac3a:	4628      	mov	r0, r5
 800ac3c:	f000 fc6e 	bl	800b51c <__multadd>
 800ac40:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ac42:	4683      	mov	fp, r0
 800ac44:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ac48:	2b00      	cmp	r3, #0
 800ac4a:	f000 8194 	beq.w	800af76 <_dtoa_r+0xb96>
 800ac4e:	4631      	mov	r1, r6
 800ac50:	2300      	movs	r3, #0
 800ac52:	220a      	movs	r2, #10
 800ac54:	4628      	mov	r0, r5
 800ac56:	f000 fc61 	bl	800b51c <__multadd>
 800ac5a:	f1b9 0f00 	cmp.w	r9, #0
 800ac5e:	4606      	mov	r6, r0
 800ac60:	f300 8093 	bgt.w	800ad8a <_dtoa_r+0x9aa>
 800ac64:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800ac66:	2b02      	cmp	r3, #2
 800ac68:	dc57      	bgt.n	800ad1a <_dtoa_r+0x93a>
 800ac6a:	e08e      	b.n	800ad8a <_dtoa_r+0x9aa>
 800ac6c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800ac6e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800ac72:	e757      	b.n	800ab24 <_dtoa_r+0x744>
 800ac74:	9b08      	ldr	r3, [sp, #32]
 800ac76:	1e5c      	subs	r4, r3, #1
 800ac78:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ac7a:	42a3      	cmp	r3, r4
 800ac7c:	bfb7      	itett	lt
 800ac7e:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800ac80:	1b1c      	subge	r4, r3, r4
 800ac82:	1ae2      	sublt	r2, r4, r3
 800ac84:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800ac86:	bfbe      	ittt	lt
 800ac88:	940a      	strlt	r4, [sp, #40]	; 0x28
 800ac8a:	189b      	addlt	r3, r3, r2
 800ac8c:	930e      	strlt	r3, [sp, #56]	; 0x38
 800ac8e:	9b08      	ldr	r3, [sp, #32]
 800ac90:	bfb8      	it	lt
 800ac92:	2400      	movlt	r4, #0
 800ac94:	2b00      	cmp	r3, #0
 800ac96:	bfbb      	ittet	lt
 800ac98:	9b06      	ldrlt	r3, [sp, #24]
 800ac9a:	9a08      	ldrlt	r2, [sp, #32]
 800ac9c:	9f06      	ldrge	r7, [sp, #24]
 800ac9e:	1a9f      	sublt	r7, r3, r2
 800aca0:	bfac      	ite	ge
 800aca2:	9b08      	ldrge	r3, [sp, #32]
 800aca4:	2300      	movlt	r3, #0
 800aca6:	e73f      	b.n	800ab28 <_dtoa_r+0x748>
 800aca8:	3fe00000 	.word	0x3fe00000
 800acac:	40240000 	.word	0x40240000
 800acb0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800acb2:	9f06      	ldr	r7, [sp, #24]
 800acb4:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800acb6:	e742      	b.n	800ab3e <_dtoa_r+0x75e>
 800acb8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800acba:	e76b      	b.n	800ab94 <_dtoa_r+0x7b4>
 800acbc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800acbe:	2b01      	cmp	r3, #1
 800acc0:	dc19      	bgt.n	800acf6 <_dtoa_r+0x916>
 800acc2:	9b04      	ldr	r3, [sp, #16]
 800acc4:	b9bb      	cbnz	r3, 800acf6 <_dtoa_r+0x916>
 800acc6:	9b05      	ldr	r3, [sp, #20]
 800acc8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800accc:	b99b      	cbnz	r3, 800acf6 <_dtoa_r+0x916>
 800acce:	9b05      	ldr	r3, [sp, #20]
 800acd0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800acd4:	0d1b      	lsrs	r3, r3, #20
 800acd6:	051b      	lsls	r3, r3, #20
 800acd8:	b183      	cbz	r3, 800acfc <_dtoa_r+0x91c>
 800acda:	f04f 0801 	mov.w	r8, #1
 800acde:	9b06      	ldr	r3, [sp, #24]
 800ace0:	3301      	adds	r3, #1
 800ace2:	9306      	str	r3, [sp, #24]
 800ace4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ace6:	3301      	adds	r3, #1
 800ace8:	9309      	str	r3, [sp, #36]	; 0x24
 800acea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800acec:	2b00      	cmp	r3, #0
 800acee:	f47f af6a 	bne.w	800abc6 <_dtoa_r+0x7e6>
 800acf2:	2001      	movs	r0, #1
 800acf4:	e76f      	b.n	800abd6 <_dtoa_r+0x7f6>
 800acf6:	f04f 0800 	mov.w	r8, #0
 800acfa:	e7f6      	b.n	800acea <_dtoa_r+0x90a>
 800acfc:	4698      	mov	r8, r3
 800acfe:	e7f4      	b.n	800acea <_dtoa_r+0x90a>
 800ad00:	f43f af7d 	beq.w	800abfe <_dtoa_r+0x81e>
 800ad04:	4618      	mov	r0, r3
 800ad06:	301c      	adds	r0, #28
 800ad08:	e772      	b.n	800abf0 <_dtoa_r+0x810>
 800ad0a:	9b08      	ldr	r3, [sp, #32]
 800ad0c:	2b00      	cmp	r3, #0
 800ad0e:	dc36      	bgt.n	800ad7e <_dtoa_r+0x99e>
 800ad10:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800ad12:	2b02      	cmp	r3, #2
 800ad14:	dd33      	ble.n	800ad7e <_dtoa_r+0x99e>
 800ad16:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800ad1a:	f1b9 0f00 	cmp.w	r9, #0
 800ad1e:	d10d      	bne.n	800ad3c <_dtoa_r+0x95c>
 800ad20:	4621      	mov	r1, r4
 800ad22:	464b      	mov	r3, r9
 800ad24:	2205      	movs	r2, #5
 800ad26:	4628      	mov	r0, r5
 800ad28:	f000 fbf8 	bl	800b51c <__multadd>
 800ad2c:	4601      	mov	r1, r0
 800ad2e:	4604      	mov	r4, r0
 800ad30:	4658      	mov	r0, fp
 800ad32:	f000 fe0f 	bl	800b954 <__mcmp>
 800ad36:	2800      	cmp	r0, #0
 800ad38:	f73f adb8 	bgt.w	800a8ac <_dtoa_r+0x4cc>
 800ad3c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800ad3e:	9f03      	ldr	r7, [sp, #12]
 800ad40:	ea6f 0a03 	mvn.w	sl, r3
 800ad44:	f04f 0800 	mov.w	r8, #0
 800ad48:	4621      	mov	r1, r4
 800ad4a:	4628      	mov	r0, r5
 800ad4c:	f000 fbc4 	bl	800b4d8 <_Bfree>
 800ad50:	2e00      	cmp	r6, #0
 800ad52:	f43f aea7 	beq.w	800aaa4 <_dtoa_r+0x6c4>
 800ad56:	f1b8 0f00 	cmp.w	r8, #0
 800ad5a:	d005      	beq.n	800ad68 <_dtoa_r+0x988>
 800ad5c:	45b0      	cmp	r8, r6
 800ad5e:	d003      	beq.n	800ad68 <_dtoa_r+0x988>
 800ad60:	4641      	mov	r1, r8
 800ad62:	4628      	mov	r0, r5
 800ad64:	f000 fbb8 	bl	800b4d8 <_Bfree>
 800ad68:	4631      	mov	r1, r6
 800ad6a:	4628      	mov	r0, r5
 800ad6c:	f000 fbb4 	bl	800b4d8 <_Bfree>
 800ad70:	e698      	b.n	800aaa4 <_dtoa_r+0x6c4>
 800ad72:	2400      	movs	r4, #0
 800ad74:	4626      	mov	r6, r4
 800ad76:	e7e1      	b.n	800ad3c <_dtoa_r+0x95c>
 800ad78:	46c2      	mov	sl, r8
 800ad7a:	4626      	mov	r6, r4
 800ad7c:	e596      	b.n	800a8ac <_dtoa_r+0x4cc>
 800ad7e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ad80:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800ad84:	2b00      	cmp	r3, #0
 800ad86:	f000 80fd 	beq.w	800af84 <_dtoa_r+0xba4>
 800ad8a:	2f00      	cmp	r7, #0
 800ad8c:	dd05      	ble.n	800ad9a <_dtoa_r+0x9ba>
 800ad8e:	4631      	mov	r1, r6
 800ad90:	463a      	mov	r2, r7
 800ad92:	4628      	mov	r0, r5
 800ad94:	f000 fd6e 	bl	800b874 <__lshift>
 800ad98:	4606      	mov	r6, r0
 800ad9a:	f1b8 0f00 	cmp.w	r8, #0
 800ad9e:	d05c      	beq.n	800ae5a <_dtoa_r+0xa7a>
 800ada0:	4628      	mov	r0, r5
 800ada2:	6871      	ldr	r1, [r6, #4]
 800ada4:	f000 fb58 	bl	800b458 <_Balloc>
 800ada8:	4607      	mov	r7, r0
 800adaa:	b928      	cbnz	r0, 800adb8 <_dtoa_r+0x9d8>
 800adac:	4602      	mov	r2, r0
 800adae:	f240 21ea 	movw	r1, #746	; 0x2ea
 800adb2:	4b7f      	ldr	r3, [pc, #508]	; (800afb0 <_dtoa_r+0xbd0>)
 800adb4:	f7ff bb28 	b.w	800a408 <_dtoa_r+0x28>
 800adb8:	6932      	ldr	r2, [r6, #16]
 800adba:	f106 010c 	add.w	r1, r6, #12
 800adbe:	3202      	adds	r2, #2
 800adc0:	0092      	lsls	r2, r2, #2
 800adc2:	300c      	adds	r0, #12
 800adc4:	f7fe fdf2 	bl	80099ac <memcpy>
 800adc8:	2201      	movs	r2, #1
 800adca:	4639      	mov	r1, r7
 800adcc:	4628      	mov	r0, r5
 800adce:	f000 fd51 	bl	800b874 <__lshift>
 800add2:	46b0      	mov	r8, r6
 800add4:	4606      	mov	r6, r0
 800add6:	9b03      	ldr	r3, [sp, #12]
 800add8:	3301      	adds	r3, #1
 800adda:	9308      	str	r3, [sp, #32]
 800addc:	9b03      	ldr	r3, [sp, #12]
 800adde:	444b      	add	r3, r9
 800ade0:	930a      	str	r3, [sp, #40]	; 0x28
 800ade2:	9b04      	ldr	r3, [sp, #16]
 800ade4:	f003 0301 	and.w	r3, r3, #1
 800ade8:	9309      	str	r3, [sp, #36]	; 0x24
 800adea:	9b08      	ldr	r3, [sp, #32]
 800adec:	4621      	mov	r1, r4
 800adee:	3b01      	subs	r3, #1
 800adf0:	4658      	mov	r0, fp
 800adf2:	9304      	str	r3, [sp, #16]
 800adf4:	f7ff fa68 	bl	800a2c8 <quorem>
 800adf8:	4603      	mov	r3, r0
 800adfa:	4641      	mov	r1, r8
 800adfc:	3330      	adds	r3, #48	; 0x30
 800adfe:	9006      	str	r0, [sp, #24]
 800ae00:	4658      	mov	r0, fp
 800ae02:	930b      	str	r3, [sp, #44]	; 0x2c
 800ae04:	f000 fda6 	bl	800b954 <__mcmp>
 800ae08:	4632      	mov	r2, r6
 800ae0a:	4681      	mov	r9, r0
 800ae0c:	4621      	mov	r1, r4
 800ae0e:	4628      	mov	r0, r5
 800ae10:	f000 fdbc 	bl	800b98c <__mdiff>
 800ae14:	68c2      	ldr	r2, [r0, #12]
 800ae16:	4607      	mov	r7, r0
 800ae18:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ae1a:	bb02      	cbnz	r2, 800ae5e <_dtoa_r+0xa7e>
 800ae1c:	4601      	mov	r1, r0
 800ae1e:	4658      	mov	r0, fp
 800ae20:	f000 fd98 	bl	800b954 <__mcmp>
 800ae24:	4602      	mov	r2, r0
 800ae26:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ae28:	4639      	mov	r1, r7
 800ae2a:	4628      	mov	r0, r5
 800ae2c:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 800ae30:	f000 fb52 	bl	800b4d8 <_Bfree>
 800ae34:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800ae36:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ae38:	9f08      	ldr	r7, [sp, #32]
 800ae3a:	ea43 0102 	orr.w	r1, r3, r2
 800ae3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ae40:	430b      	orrs	r3, r1
 800ae42:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ae44:	d10d      	bne.n	800ae62 <_dtoa_r+0xa82>
 800ae46:	2b39      	cmp	r3, #57	; 0x39
 800ae48:	d029      	beq.n	800ae9e <_dtoa_r+0xabe>
 800ae4a:	f1b9 0f00 	cmp.w	r9, #0
 800ae4e:	dd01      	ble.n	800ae54 <_dtoa_r+0xa74>
 800ae50:	9b06      	ldr	r3, [sp, #24]
 800ae52:	3331      	adds	r3, #49	; 0x31
 800ae54:	9a04      	ldr	r2, [sp, #16]
 800ae56:	7013      	strb	r3, [r2, #0]
 800ae58:	e776      	b.n	800ad48 <_dtoa_r+0x968>
 800ae5a:	4630      	mov	r0, r6
 800ae5c:	e7b9      	b.n	800add2 <_dtoa_r+0x9f2>
 800ae5e:	2201      	movs	r2, #1
 800ae60:	e7e2      	b.n	800ae28 <_dtoa_r+0xa48>
 800ae62:	f1b9 0f00 	cmp.w	r9, #0
 800ae66:	db06      	blt.n	800ae76 <_dtoa_r+0xa96>
 800ae68:	9922      	ldr	r1, [sp, #136]	; 0x88
 800ae6a:	ea41 0909 	orr.w	r9, r1, r9
 800ae6e:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ae70:	ea59 0101 	orrs.w	r1, r9, r1
 800ae74:	d120      	bne.n	800aeb8 <_dtoa_r+0xad8>
 800ae76:	2a00      	cmp	r2, #0
 800ae78:	ddec      	ble.n	800ae54 <_dtoa_r+0xa74>
 800ae7a:	4659      	mov	r1, fp
 800ae7c:	2201      	movs	r2, #1
 800ae7e:	4628      	mov	r0, r5
 800ae80:	9308      	str	r3, [sp, #32]
 800ae82:	f000 fcf7 	bl	800b874 <__lshift>
 800ae86:	4621      	mov	r1, r4
 800ae88:	4683      	mov	fp, r0
 800ae8a:	f000 fd63 	bl	800b954 <__mcmp>
 800ae8e:	2800      	cmp	r0, #0
 800ae90:	9b08      	ldr	r3, [sp, #32]
 800ae92:	dc02      	bgt.n	800ae9a <_dtoa_r+0xaba>
 800ae94:	d1de      	bne.n	800ae54 <_dtoa_r+0xa74>
 800ae96:	07da      	lsls	r2, r3, #31
 800ae98:	d5dc      	bpl.n	800ae54 <_dtoa_r+0xa74>
 800ae9a:	2b39      	cmp	r3, #57	; 0x39
 800ae9c:	d1d8      	bne.n	800ae50 <_dtoa_r+0xa70>
 800ae9e:	2339      	movs	r3, #57	; 0x39
 800aea0:	9a04      	ldr	r2, [sp, #16]
 800aea2:	7013      	strb	r3, [r2, #0]
 800aea4:	463b      	mov	r3, r7
 800aea6:	461f      	mov	r7, r3
 800aea8:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800aeac:	3b01      	subs	r3, #1
 800aeae:	2a39      	cmp	r2, #57	; 0x39
 800aeb0:	d050      	beq.n	800af54 <_dtoa_r+0xb74>
 800aeb2:	3201      	adds	r2, #1
 800aeb4:	701a      	strb	r2, [r3, #0]
 800aeb6:	e747      	b.n	800ad48 <_dtoa_r+0x968>
 800aeb8:	2a00      	cmp	r2, #0
 800aeba:	dd03      	ble.n	800aec4 <_dtoa_r+0xae4>
 800aebc:	2b39      	cmp	r3, #57	; 0x39
 800aebe:	d0ee      	beq.n	800ae9e <_dtoa_r+0xabe>
 800aec0:	3301      	adds	r3, #1
 800aec2:	e7c7      	b.n	800ae54 <_dtoa_r+0xa74>
 800aec4:	9a08      	ldr	r2, [sp, #32]
 800aec6:	990a      	ldr	r1, [sp, #40]	; 0x28
 800aec8:	f802 3c01 	strb.w	r3, [r2, #-1]
 800aecc:	428a      	cmp	r2, r1
 800aece:	d02a      	beq.n	800af26 <_dtoa_r+0xb46>
 800aed0:	4659      	mov	r1, fp
 800aed2:	2300      	movs	r3, #0
 800aed4:	220a      	movs	r2, #10
 800aed6:	4628      	mov	r0, r5
 800aed8:	f000 fb20 	bl	800b51c <__multadd>
 800aedc:	45b0      	cmp	r8, r6
 800aede:	4683      	mov	fp, r0
 800aee0:	f04f 0300 	mov.w	r3, #0
 800aee4:	f04f 020a 	mov.w	r2, #10
 800aee8:	4641      	mov	r1, r8
 800aeea:	4628      	mov	r0, r5
 800aeec:	d107      	bne.n	800aefe <_dtoa_r+0xb1e>
 800aeee:	f000 fb15 	bl	800b51c <__multadd>
 800aef2:	4680      	mov	r8, r0
 800aef4:	4606      	mov	r6, r0
 800aef6:	9b08      	ldr	r3, [sp, #32]
 800aef8:	3301      	adds	r3, #1
 800aefa:	9308      	str	r3, [sp, #32]
 800aefc:	e775      	b.n	800adea <_dtoa_r+0xa0a>
 800aefe:	f000 fb0d 	bl	800b51c <__multadd>
 800af02:	4631      	mov	r1, r6
 800af04:	4680      	mov	r8, r0
 800af06:	2300      	movs	r3, #0
 800af08:	220a      	movs	r2, #10
 800af0a:	4628      	mov	r0, r5
 800af0c:	f000 fb06 	bl	800b51c <__multadd>
 800af10:	4606      	mov	r6, r0
 800af12:	e7f0      	b.n	800aef6 <_dtoa_r+0xb16>
 800af14:	f1b9 0f00 	cmp.w	r9, #0
 800af18:	bfcc      	ite	gt
 800af1a:	464f      	movgt	r7, r9
 800af1c:	2701      	movle	r7, #1
 800af1e:	f04f 0800 	mov.w	r8, #0
 800af22:	9a03      	ldr	r2, [sp, #12]
 800af24:	4417      	add	r7, r2
 800af26:	4659      	mov	r1, fp
 800af28:	2201      	movs	r2, #1
 800af2a:	4628      	mov	r0, r5
 800af2c:	9308      	str	r3, [sp, #32]
 800af2e:	f000 fca1 	bl	800b874 <__lshift>
 800af32:	4621      	mov	r1, r4
 800af34:	4683      	mov	fp, r0
 800af36:	f000 fd0d 	bl	800b954 <__mcmp>
 800af3a:	2800      	cmp	r0, #0
 800af3c:	dcb2      	bgt.n	800aea4 <_dtoa_r+0xac4>
 800af3e:	d102      	bne.n	800af46 <_dtoa_r+0xb66>
 800af40:	9b08      	ldr	r3, [sp, #32]
 800af42:	07db      	lsls	r3, r3, #31
 800af44:	d4ae      	bmi.n	800aea4 <_dtoa_r+0xac4>
 800af46:	463b      	mov	r3, r7
 800af48:	461f      	mov	r7, r3
 800af4a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800af4e:	2a30      	cmp	r2, #48	; 0x30
 800af50:	d0fa      	beq.n	800af48 <_dtoa_r+0xb68>
 800af52:	e6f9      	b.n	800ad48 <_dtoa_r+0x968>
 800af54:	9a03      	ldr	r2, [sp, #12]
 800af56:	429a      	cmp	r2, r3
 800af58:	d1a5      	bne.n	800aea6 <_dtoa_r+0xac6>
 800af5a:	2331      	movs	r3, #49	; 0x31
 800af5c:	f10a 0a01 	add.w	sl, sl, #1
 800af60:	e779      	b.n	800ae56 <_dtoa_r+0xa76>
 800af62:	4b14      	ldr	r3, [pc, #80]	; (800afb4 <_dtoa_r+0xbd4>)
 800af64:	f7ff baa8 	b.w	800a4b8 <_dtoa_r+0xd8>
 800af68:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800af6a:	2b00      	cmp	r3, #0
 800af6c:	f47f aa81 	bne.w	800a472 <_dtoa_r+0x92>
 800af70:	4b11      	ldr	r3, [pc, #68]	; (800afb8 <_dtoa_r+0xbd8>)
 800af72:	f7ff baa1 	b.w	800a4b8 <_dtoa_r+0xd8>
 800af76:	f1b9 0f00 	cmp.w	r9, #0
 800af7a:	dc03      	bgt.n	800af84 <_dtoa_r+0xba4>
 800af7c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800af7e:	2b02      	cmp	r3, #2
 800af80:	f73f aecb 	bgt.w	800ad1a <_dtoa_r+0x93a>
 800af84:	9f03      	ldr	r7, [sp, #12]
 800af86:	4621      	mov	r1, r4
 800af88:	4658      	mov	r0, fp
 800af8a:	f7ff f99d 	bl	800a2c8 <quorem>
 800af8e:	9a03      	ldr	r2, [sp, #12]
 800af90:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800af94:	f807 3b01 	strb.w	r3, [r7], #1
 800af98:	1aba      	subs	r2, r7, r2
 800af9a:	4591      	cmp	r9, r2
 800af9c:	ddba      	ble.n	800af14 <_dtoa_r+0xb34>
 800af9e:	4659      	mov	r1, fp
 800afa0:	2300      	movs	r3, #0
 800afa2:	220a      	movs	r2, #10
 800afa4:	4628      	mov	r0, r5
 800afa6:	f000 fab9 	bl	800b51c <__multadd>
 800afaa:	4683      	mov	fp, r0
 800afac:	e7eb      	b.n	800af86 <_dtoa_r+0xba6>
 800afae:	bf00      	nop
 800afb0:	0800d30b 	.word	0x0800d30b
 800afb4:	0800d268 	.word	0x0800d268
 800afb8:	0800d28c 	.word	0x0800d28c

0800afbc <print_e>:
 800afbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800afbe:	b08b      	sub	sp, #44	; 0x2c
 800afc0:	460d      	mov	r5, r1
 800afc2:	a908      	add	r1, sp, #32
 800afc4:	9e10      	ldr	r6, [sp, #64]	; 0x40
 800afc6:	9104      	str	r1, [sp, #16]
 800afc8:	a907      	add	r1, sp, #28
 800afca:	9103      	str	r1, [sp, #12]
 800afcc:	a909      	add	r1, sp, #36	; 0x24
 800afce:	9102      	str	r1, [sp, #8]
 800afd0:	1c71      	adds	r1, r6, #1
 800afd2:	9101      	str	r1, [sp, #4]
 800afd4:	2102      	movs	r1, #2
 800afd6:	9100      	str	r1, [sp, #0]
 800afd8:	f89d 7044 	ldrb.w	r7, [sp, #68]	; 0x44
 800afdc:	9c12      	ldr	r4, [sp, #72]	; 0x48
 800afde:	f7ff f9ff 	bl	800a3e0 <_dtoa_r>
 800afe2:	f242 730f 	movw	r3, #9999	; 0x270f
 800afe6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800afe8:	4601      	mov	r1, r0
 800afea:	429a      	cmp	r2, r3
 800afec:	d104      	bne.n	800aff8 <print_e+0x3c>
 800afee:	4628      	mov	r0, r5
 800aff0:	f001 f86b 	bl	800c0ca <strcpy>
 800aff4:	b00b      	add	sp, #44	; 0x2c
 800aff6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800aff8:	462b      	mov	r3, r5
 800affa:	7800      	ldrb	r0, [r0, #0]
 800affc:	2e00      	cmp	r6, #0
 800affe:	f803 0b01 	strb.w	r0, [r3], #1
 800b002:	bfc8      	it	gt
 800b004:	2401      	movgt	r4, #1
 800b006:	202e      	movs	r0, #46	; 0x2e
 800b008:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 800b00c:	b10d      	cbz	r5, 800b012 <print_e+0x56>
 800b00e:	2e00      	cmp	r6, #0
 800b010:	dc37      	bgt.n	800b082 <print_e+0xc6>
 800b012:	2f67      	cmp	r7, #103	; 0x67
 800b014:	d046      	beq.n	800b0a4 <print_e+0xe8>
 800b016:	2f47      	cmp	r7, #71	; 0x47
 800b018:	d046      	beq.n	800b0a8 <print_e+0xec>
 800b01a:	212e      	movs	r1, #46	; 0x2e
 800b01c:	2030      	movs	r0, #48	; 0x30
 800b01e:	2e00      	cmp	r6, #0
 800b020:	dc38      	bgt.n	800b094 <print_e+0xd8>
 800b022:	1e51      	subs	r1, r2, #1
 800b024:	2900      	cmp	r1, #0
 800b026:	bfa8      	it	ge
 800b028:	222b      	movge	r2, #43	; 0x2b
 800b02a:	4618      	mov	r0, r3
 800b02c:	9109      	str	r1, [sp, #36]	; 0x24
 800b02e:	bfbe      	ittt	lt
 800b030:	212d      	movlt	r1, #45	; 0x2d
 800b032:	f1c2 0201 	rsblt	r2, r2, #1
 800b036:	9209      	strlt	r2, [sp, #36]	; 0x24
 800b038:	f800 7b02 	strb.w	r7, [r0], #2
 800b03c:	bfa8      	it	ge
 800b03e:	705a      	strbge	r2, [r3, #1]
 800b040:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b042:	bfb8      	it	lt
 800b044:	7059      	strblt	r1, [r3, #1]
 800b046:	2a63      	cmp	r2, #99	; 0x63
 800b048:	dd0b      	ble.n	800b062 <print_e+0xa6>
 800b04a:	2164      	movs	r1, #100	; 0x64
 800b04c:	fb92 f1f1 	sdiv	r1, r2, r1
 800b050:	f101 0430 	add.w	r4, r1, #48	; 0x30
 800b054:	1cd8      	adds	r0, r3, #3
 800b056:	709c      	strb	r4, [r3, #2]
 800b058:	f06f 0363 	mvn.w	r3, #99	; 0x63
 800b05c:	fb03 2201 	mla	r2, r3, r1, r2
 800b060:	9209      	str	r2, [sp, #36]	; 0x24
 800b062:	220a      	movs	r2, #10
 800b064:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b066:	fb93 f2f2 	sdiv	r2, r3, r2
 800b06a:	f102 0130 	add.w	r1, r2, #48	; 0x30
 800b06e:	7001      	strb	r1, [r0, #0]
 800b070:	f06f 0109 	mvn.w	r1, #9
 800b074:	fb01 3302 	mla	r3, r1, r2, r3
 800b078:	3330      	adds	r3, #48	; 0x30
 800b07a:	7043      	strb	r3, [r0, #1]
 800b07c:	2300      	movs	r3, #0
 800b07e:	7083      	strb	r3, [r0, #2]
 800b080:	e7b8      	b.n	800aff4 <print_e+0x38>
 800b082:	b10c      	cbz	r4, 800b088 <print_e+0xcc>
 800b084:	f803 0b01 	strb.w	r0, [r3], #1
 800b088:	780c      	ldrb	r4, [r1, #0]
 800b08a:	3e01      	subs	r6, #1
 800b08c:	f803 4b01 	strb.w	r4, [r3], #1
 800b090:	2400      	movs	r4, #0
 800b092:	e7b9      	b.n	800b008 <print_e+0x4c>
 800b094:	b10c      	cbz	r4, 800b09a <print_e+0xde>
 800b096:	f803 1b01 	strb.w	r1, [r3], #1
 800b09a:	2400      	movs	r4, #0
 800b09c:	f803 0b01 	strb.w	r0, [r3], #1
 800b0a0:	3e01      	subs	r6, #1
 800b0a2:	e7bc      	b.n	800b01e <print_e+0x62>
 800b0a4:	2765      	movs	r7, #101	; 0x65
 800b0a6:	e7bc      	b.n	800b022 <print_e+0x66>
 800b0a8:	2745      	movs	r7, #69	; 0x45
 800b0aa:	e7ba      	b.n	800b022 <print_e+0x66>
 800b0ac:	0000      	movs	r0, r0
	...

0800b0b0 <_gcvt>:
 800b0b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b0b4:	4690      	mov	r8, r2
 800b0b6:	461c      	mov	r4, r3
 800b0b8:	b08b      	sub	sp, #44	; 0x2c
 800b0ba:	4681      	mov	r9, r0
 800b0bc:	e9dd 7512 	ldrd	r7, r5, [sp, #72]	; 0x48
 800b0c0:	2200      	movs	r2, #0
 800b0c2:	2300      	movs	r3, #0
 800b0c4:	4640      	mov	r0, r8
 800b0c6:	4621      	mov	r1, r4
 800b0c8:	9e15      	ldr	r6, [sp, #84]	; 0x54
 800b0ca:	f7f5 fc77 	bl	80009bc <__aeabi_dcmplt>
 800b0ce:	b108      	cbz	r0, 800b0d4 <_gcvt+0x24>
 800b0d0:	f104 4400 	add.w	r4, r4, #2147483648	; 0x80000000
 800b0d4:	2200      	movs	r2, #0
 800b0d6:	2300      	movs	r3, #0
 800b0d8:	4640      	mov	r0, r8
 800b0da:	4621      	mov	r1, r4
 800b0dc:	f7f5 fc64 	bl	80009a8 <__aeabi_dcmpeq>
 800b0e0:	b138      	cbz	r0, 800b0f2 <_gcvt+0x42>
 800b0e2:	2330      	movs	r3, #48	; 0x30
 800b0e4:	702b      	strb	r3, [r5, #0]
 800b0e6:	2300      	movs	r3, #0
 800b0e8:	706b      	strb	r3, [r5, #1]
 800b0ea:	4628      	mov	r0, r5
 800b0ec:	b00b      	add	sp, #44	; 0x2c
 800b0ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b0f2:	4640      	mov	r0, r8
 800b0f4:	a34c      	add	r3, pc, #304	; (adr r3, 800b228 <_gcvt+0x178>)
 800b0f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0fa:	4621      	mov	r1, r4
 800b0fc:	f7f5 fc68 	bl	80009d0 <__aeabi_dcmple>
 800b100:	b160      	cbz	r0, 800b11c <_gcvt+0x6c>
 800b102:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 800b106:	3f01      	subs	r7, #1
 800b108:	9301      	str	r3, [sp, #4]
 800b10a:	4642      	mov	r2, r8
 800b10c:	4623      	mov	r3, r4
 800b10e:	4629      	mov	r1, r5
 800b110:	4648      	mov	r0, r9
 800b112:	9602      	str	r6, [sp, #8]
 800b114:	9700      	str	r7, [sp, #0]
 800b116:	f7ff ff51 	bl	800afbc <print_e>
 800b11a:	e7e6      	b.n	800b0ea <_gcvt+0x3a>
 800b11c:	4638      	mov	r0, r7
 800b11e:	f000 fd1d 	bl	800bb5c <_mprec_log10>
 800b122:	4642      	mov	r2, r8
 800b124:	4623      	mov	r3, r4
 800b126:	f7f5 fc53 	bl	80009d0 <__aeabi_dcmple>
 800b12a:	2800      	cmp	r0, #0
 800b12c:	d1e9      	bne.n	800b102 <_gcvt+0x52>
 800b12e:	ab09      	add	r3, sp, #36	; 0x24
 800b130:	9304      	str	r3, [sp, #16]
 800b132:	ab08      	add	r3, sp, #32
 800b134:	9303      	str	r3, [sp, #12]
 800b136:	ab07      	add	r3, sp, #28
 800b138:	e9cd 7301 	strd	r7, r3, [sp, #4]
 800b13c:	2302      	movs	r3, #2
 800b13e:	4642      	mov	r2, r8
 800b140:	9300      	str	r3, [sp, #0]
 800b142:	4648      	mov	r0, r9
 800b144:	4623      	mov	r3, r4
 800b146:	f7ff f94b 	bl	800a3e0 <_dtoa_r>
 800b14a:	f242 730f 	movw	r3, #9999	; 0x270f
 800b14e:	9a07      	ldr	r2, [sp, #28]
 800b150:	4601      	mov	r1, r0
 800b152:	429a      	cmp	r2, r3
 800b154:	d00f      	beq.n	800b176 <_gcvt+0xc6>
 800b156:	462b      	mov	r3, r5
 800b158:	442f      	add	r7, r5
 800b15a:	4608      	mov	r0, r1
 800b15c:	f811 cb01 	ldrb.w	ip, [r1], #1
 800b160:	9a07      	ldr	r2, [sp, #28]
 800b162:	1afc      	subs	r4, r7, r3
 800b164:	f1bc 0f00 	cmp.w	ip, #0
 800b168:	d001      	beq.n	800b16e <_gcvt+0xbe>
 800b16a:	2a00      	cmp	r2, #0
 800b16c:	dc07      	bgt.n	800b17e <_gcvt+0xce>
 800b16e:	2100      	movs	r1, #0
 800b170:	f04f 0c30 	mov.w	ip, #48	; 0x30
 800b174:	e00c      	b.n	800b190 <_gcvt+0xe0>
 800b176:	4628      	mov	r0, r5
 800b178:	f000 ffa7 	bl	800c0ca <strcpy>
 800b17c:	e7b5      	b.n	800b0ea <_gcvt+0x3a>
 800b17e:	3a01      	subs	r2, #1
 800b180:	f803 cb01 	strb.w	ip, [r3], #1
 800b184:	9207      	str	r2, [sp, #28]
 800b186:	e7e8      	b.n	800b15a <_gcvt+0xaa>
 800b188:	2101      	movs	r1, #1
 800b18a:	f803 cb01 	strb.w	ip, [r3], #1
 800b18e:	3c01      	subs	r4, #1
 800b190:	2a00      	cmp	r2, #0
 800b192:	4617      	mov	r7, r2
 800b194:	dc2a      	bgt.n	800b1ec <_gcvt+0x13c>
 800b196:	b101      	cbz	r1, 800b19a <_gcvt+0xea>
 800b198:	9207      	str	r2, [sp, #28]
 800b19a:	b90e      	cbnz	r6, 800b1a0 <_gcvt+0xf0>
 800b19c:	7802      	ldrb	r2, [r0, #0]
 800b19e:	b312      	cbz	r2, 800b1e6 <_gcvt+0x136>
 800b1a0:	42ab      	cmp	r3, r5
 800b1a2:	bf04      	itt	eq
 800b1a4:	2230      	moveq	r2, #48	; 0x30
 800b1a6:	f803 2b01 	strbeq.w	r2, [r3], #1
 800b1aa:	222e      	movs	r2, #46	; 0x2e
 800b1ac:	4619      	mov	r1, r3
 800b1ae:	2700      	movs	r7, #0
 800b1b0:	f04f 0e30 	mov.w	lr, #48	; 0x30
 800b1b4:	701a      	strb	r2, [r3, #0]
 800b1b6:	9a07      	ldr	r2, [sp, #28]
 800b1b8:	eba2 0c03 	sub.w	ip, r2, r3
 800b1bc:	eb1c 0f01 	cmn.w	ip, r1
 800b1c0:	d41c      	bmi.n	800b1fc <_gcvt+0x14c>
 800b1c2:	2a00      	cmp	r2, #0
 800b1c4:	f1c2 0100 	rsb	r1, r2, #0
 800b1c8:	bfc8      	it	gt
 800b1ca:	2100      	movgt	r1, #0
 800b1cc:	f101 0c01 	add.w	ip, r1, #1
 800b1d0:	4463      	add	r3, ip
 800b1d2:	440a      	add	r2, r1
 800b1d4:	b107      	cbz	r7, 800b1d8 <_gcvt+0x128>
 800b1d6:	9207      	str	r2, [sp, #28]
 800b1d8:	1e42      	subs	r2, r0, #1
 800b1da:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 800b1de:	b109      	cbz	r1, 800b1e4 <_gcvt+0x134>
 800b1e0:	2c00      	cmp	r4, #0
 800b1e2:	dc0f      	bgt.n	800b204 <_gcvt+0x154>
 800b1e4:	b9de      	cbnz	r6, 800b21e <_gcvt+0x16e>
 800b1e6:	2200      	movs	r2, #0
 800b1e8:	701a      	strb	r2, [r3, #0]
 800b1ea:	e77e      	b.n	800b0ea <_gcvt+0x3a>
 800b1ec:	2c00      	cmp	r4, #0
 800b1ee:	f102 32ff 	add.w	r2, r2, #4294967295
 800b1f2:	dcc9      	bgt.n	800b188 <_gcvt+0xd8>
 800b1f4:	2900      	cmp	r1, #0
 800b1f6:	d0d0      	beq.n	800b19a <_gcvt+0xea>
 800b1f8:	9707      	str	r7, [sp, #28]
 800b1fa:	e7ce      	b.n	800b19a <_gcvt+0xea>
 800b1fc:	2701      	movs	r7, #1
 800b1fe:	f801 ef01 	strb.w	lr, [r1, #1]!
 800b202:	e7db      	b.n	800b1bc <_gcvt+0x10c>
 800b204:	f803 1b01 	strb.w	r1, [r3], #1
 800b208:	3c01      	subs	r4, #1
 800b20a:	e7e6      	b.n	800b1da <_gcvt+0x12a>
 800b20c:	f802 6b01 	strb.w	r6, [r2], #1
 800b210:	1a81      	subs	r1, r0, r2
 800b212:	2900      	cmp	r1, #0
 800b214:	dcfa      	bgt.n	800b20c <_gcvt+0x15c>
 800b216:	2c00      	cmp	r4, #0
 800b218:	bfa8      	it	ge
 800b21a:	191b      	addge	r3, r3, r4
 800b21c:	e7e3      	b.n	800b1e6 <_gcvt+0x136>
 800b21e:	461a      	mov	r2, r3
 800b220:	2630      	movs	r6, #48	; 0x30
 800b222:	1918      	adds	r0, r3, r4
 800b224:	e7f4      	b.n	800b210 <_gcvt+0x160>
 800b226:	bf00      	nop
 800b228:	eb1c432d 	.word	0xeb1c432d
 800b22c:	3f1a36e2 	.word	0x3f1a36e2

0800b230 <std>:
 800b230:	2300      	movs	r3, #0
 800b232:	b510      	push	{r4, lr}
 800b234:	4604      	mov	r4, r0
 800b236:	e9c0 3300 	strd	r3, r3, [r0]
 800b23a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b23e:	6083      	str	r3, [r0, #8]
 800b240:	8181      	strh	r1, [r0, #12]
 800b242:	6643      	str	r3, [r0, #100]	; 0x64
 800b244:	81c2      	strh	r2, [r0, #14]
 800b246:	6183      	str	r3, [r0, #24]
 800b248:	4619      	mov	r1, r3
 800b24a:	2208      	movs	r2, #8
 800b24c:	305c      	adds	r0, #92	; 0x5c
 800b24e:	f7fe fbbb 	bl	80099c8 <memset>
 800b252:	4b05      	ldr	r3, [pc, #20]	; (800b268 <std+0x38>)
 800b254:	6224      	str	r4, [r4, #32]
 800b256:	6263      	str	r3, [r4, #36]	; 0x24
 800b258:	4b04      	ldr	r3, [pc, #16]	; (800b26c <std+0x3c>)
 800b25a:	62a3      	str	r3, [r4, #40]	; 0x28
 800b25c:	4b04      	ldr	r3, [pc, #16]	; (800b270 <std+0x40>)
 800b25e:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b260:	4b04      	ldr	r3, [pc, #16]	; (800b274 <std+0x44>)
 800b262:	6323      	str	r3, [r4, #48]	; 0x30
 800b264:	bd10      	pop	{r4, pc}
 800b266:	bf00      	nop
 800b268:	0800c045 	.word	0x0800c045
 800b26c:	0800c067 	.word	0x0800c067
 800b270:	0800c09f 	.word	0x0800c09f
 800b274:	0800c0c3 	.word	0x0800c0c3

0800b278 <_cleanup_r>:
 800b278:	4901      	ldr	r1, [pc, #4]	; (800b280 <_cleanup_r+0x8>)
 800b27a:	f000 b8af 	b.w	800b3dc <_fwalk_reent>
 800b27e:	bf00      	nop
 800b280:	0800c3e1 	.word	0x0800c3e1

0800b284 <__sfmoreglue>:
 800b284:	2268      	movs	r2, #104	; 0x68
 800b286:	b570      	push	{r4, r5, r6, lr}
 800b288:	1e4d      	subs	r5, r1, #1
 800b28a:	4355      	muls	r5, r2
 800b28c:	460e      	mov	r6, r1
 800b28e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b292:	f000 fcfb 	bl	800bc8c <_malloc_r>
 800b296:	4604      	mov	r4, r0
 800b298:	b140      	cbz	r0, 800b2ac <__sfmoreglue+0x28>
 800b29a:	2100      	movs	r1, #0
 800b29c:	e9c0 1600 	strd	r1, r6, [r0]
 800b2a0:	300c      	adds	r0, #12
 800b2a2:	60a0      	str	r0, [r4, #8]
 800b2a4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b2a8:	f7fe fb8e 	bl	80099c8 <memset>
 800b2ac:	4620      	mov	r0, r4
 800b2ae:	bd70      	pop	{r4, r5, r6, pc}

0800b2b0 <__sfp_lock_acquire>:
 800b2b0:	4801      	ldr	r0, [pc, #4]	; (800b2b8 <__sfp_lock_acquire+0x8>)
 800b2b2:	f000 b8b8 	b.w	800b426 <__retarget_lock_acquire_recursive>
 800b2b6:	bf00      	nop
 800b2b8:	20001591 	.word	0x20001591

0800b2bc <__sfp_lock_release>:
 800b2bc:	4801      	ldr	r0, [pc, #4]	; (800b2c4 <__sfp_lock_release+0x8>)
 800b2be:	f000 b8b3 	b.w	800b428 <__retarget_lock_release_recursive>
 800b2c2:	bf00      	nop
 800b2c4:	20001591 	.word	0x20001591

0800b2c8 <__sinit_lock_acquire>:
 800b2c8:	4801      	ldr	r0, [pc, #4]	; (800b2d0 <__sinit_lock_acquire+0x8>)
 800b2ca:	f000 b8ac 	b.w	800b426 <__retarget_lock_acquire_recursive>
 800b2ce:	bf00      	nop
 800b2d0:	20001592 	.word	0x20001592

0800b2d4 <__sinit_lock_release>:
 800b2d4:	4801      	ldr	r0, [pc, #4]	; (800b2dc <__sinit_lock_release+0x8>)
 800b2d6:	f000 b8a7 	b.w	800b428 <__retarget_lock_release_recursive>
 800b2da:	bf00      	nop
 800b2dc:	20001592 	.word	0x20001592

0800b2e0 <__sinit>:
 800b2e0:	b510      	push	{r4, lr}
 800b2e2:	4604      	mov	r4, r0
 800b2e4:	f7ff fff0 	bl	800b2c8 <__sinit_lock_acquire>
 800b2e8:	69a3      	ldr	r3, [r4, #24]
 800b2ea:	b11b      	cbz	r3, 800b2f4 <__sinit+0x14>
 800b2ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b2f0:	f7ff bff0 	b.w	800b2d4 <__sinit_lock_release>
 800b2f4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b2f8:	6523      	str	r3, [r4, #80]	; 0x50
 800b2fa:	4b13      	ldr	r3, [pc, #76]	; (800b348 <__sinit+0x68>)
 800b2fc:	4a13      	ldr	r2, [pc, #76]	; (800b34c <__sinit+0x6c>)
 800b2fe:	681b      	ldr	r3, [r3, #0]
 800b300:	62a2      	str	r2, [r4, #40]	; 0x28
 800b302:	42a3      	cmp	r3, r4
 800b304:	bf08      	it	eq
 800b306:	2301      	moveq	r3, #1
 800b308:	4620      	mov	r0, r4
 800b30a:	bf08      	it	eq
 800b30c:	61a3      	streq	r3, [r4, #24]
 800b30e:	f000 f81f 	bl	800b350 <__sfp>
 800b312:	6060      	str	r0, [r4, #4]
 800b314:	4620      	mov	r0, r4
 800b316:	f000 f81b 	bl	800b350 <__sfp>
 800b31a:	60a0      	str	r0, [r4, #8]
 800b31c:	4620      	mov	r0, r4
 800b31e:	f000 f817 	bl	800b350 <__sfp>
 800b322:	2200      	movs	r2, #0
 800b324:	2104      	movs	r1, #4
 800b326:	60e0      	str	r0, [r4, #12]
 800b328:	6860      	ldr	r0, [r4, #4]
 800b32a:	f7ff ff81 	bl	800b230 <std>
 800b32e:	2201      	movs	r2, #1
 800b330:	2109      	movs	r1, #9
 800b332:	68a0      	ldr	r0, [r4, #8]
 800b334:	f7ff ff7c 	bl	800b230 <std>
 800b338:	2202      	movs	r2, #2
 800b33a:	2112      	movs	r1, #18
 800b33c:	68e0      	ldr	r0, [r4, #12]
 800b33e:	f7ff ff77 	bl	800b230 <std>
 800b342:	2301      	movs	r3, #1
 800b344:	61a3      	str	r3, [r4, #24]
 800b346:	e7d1      	b.n	800b2ec <__sinit+0xc>
 800b348:	0800d254 	.word	0x0800d254
 800b34c:	0800b279 	.word	0x0800b279

0800b350 <__sfp>:
 800b350:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b352:	4607      	mov	r7, r0
 800b354:	f7ff ffac 	bl	800b2b0 <__sfp_lock_acquire>
 800b358:	4b1e      	ldr	r3, [pc, #120]	; (800b3d4 <__sfp+0x84>)
 800b35a:	681e      	ldr	r6, [r3, #0]
 800b35c:	69b3      	ldr	r3, [r6, #24]
 800b35e:	b913      	cbnz	r3, 800b366 <__sfp+0x16>
 800b360:	4630      	mov	r0, r6
 800b362:	f7ff ffbd 	bl	800b2e0 <__sinit>
 800b366:	3648      	adds	r6, #72	; 0x48
 800b368:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b36c:	3b01      	subs	r3, #1
 800b36e:	d503      	bpl.n	800b378 <__sfp+0x28>
 800b370:	6833      	ldr	r3, [r6, #0]
 800b372:	b30b      	cbz	r3, 800b3b8 <__sfp+0x68>
 800b374:	6836      	ldr	r6, [r6, #0]
 800b376:	e7f7      	b.n	800b368 <__sfp+0x18>
 800b378:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b37c:	b9d5      	cbnz	r5, 800b3b4 <__sfp+0x64>
 800b37e:	4b16      	ldr	r3, [pc, #88]	; (800b3d8 <__sfp+0x88>)
 800b380:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b384:	60e3      	str	r3, [r4, #12]
 800b386:	6665      	str	r5, [r4, #100]	; 0x64
 800b388:	f000 f84c 	bl	800b424 <__retarget_lock_init_recursive>
 800b38c:	f7ff ff96 	bl	800b2bc <__sfp_lock_release>
 800b390:	2208      	movs	r2, #8
 800b392:	4629      	mov	r1, r5
 800b394:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b398:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b39c:	6025      	str	r5, [r4, #0]
 800b39e:	61a5      	str	r5, [r4, #24]
 800b3a0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b3a4:	f7fe fb10 	bl	80099c8 <memset>
 800b3a8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b3ac:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b3b0:	4620      	mov	r0, r4
 800b3b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b3b4:	3468      	adds	r4, #104	; 0x68
 800b3b6:	e7d9      	b.n	800b36c <__sfp+0x1c>
 800b3b8:	2104      	movs	r1, #4
 800b3ba:	4638      	mov	r0, r7
 800b3bc:	f7ff ff62 	bl	800b284 <__sfmoreglue>
 800b3c0:	4604      	mov	r4, r0
 800b3c2:	6030      	str	r0, [r6, #0]
 800b3c4:	2800      	cmp	r0, #0
 800b3c6:	d1d5      	bne.n	800b374 <__sfp+0x24>
 800b3c8:	f7ff ff78 	bl	800b2bc <__sfp_lock_release>
 800b3cc:	230c      	movs	r3, #12
 800b3ce:	603b      	str	r3, [r7, #0]
 800b3d0:	e7ee      	b.n	800b3b0 <__sfp+0x60>
 800b3d2:	bf00      	nop
 800b3d4:	0800d254 	.word	0x0800d254
 800b3d8:	ffff0001 	.word	0xffff0001

0800b3dc <_fwalk_reent>:
 800b3dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b3e0:	4606      	mov	r6, r0
 800b3e2:	4688      	mov	r8, r1
 800b3e4:	2700      	movs	r7, #0
 800b3e6:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b3ea:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b3ee:	f1b9 0901 	subs.w	r9, r9, #1
 800b3f2:	d505      	bpl.n	800b400 <_fwalk_reent+0x24>
 800b3f4:	6824      	ldr	r4, [r4, #0]
 800b3f6:	2c00      	cmp	r4, #0
 800b3f8:	d1f7      	bne.n	800b3ea <_fwalk_reent+0xe>
 800b3fa:	4638      	mov	r0, r7
 800b3fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b400:	89ab      	ldrh	r3, [r5, #12]
 800b402:	2b01      	cmp	r3, #1
 800b404:	d907      	bls.n	800b416 <_fwalk_reent+0x3a>
 800b406:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b40a:	3301      	adds	r3, #1
 800b40c:	d003      	beq.n	800b416 <_fwalk_reent+0x3a>
 800b40e:	4629      	mov	r1, r5
 800b410:	4630      	mov	r0, r6
 800b412:	47c0      	blx	r8
 800b414:	4307      	orrs	r7, r0
 800b416:	3568      	adds	r5, #104	; 0x68
 800b418:	e7e9      	b.n	800b3ee <_fwalk_reent+0x12>
	...

0800b41c <_localeconv_r>:
 800b41c:	4800      	ldr	r0, [pc, #0]	; (800b420 <_localeconv_r+0x4>)
 800b41e:	4770      	bx	lr
 800b420:	20000170 	.word	0x20000170

0800b424 <__retarget_lock_init_recursive>:
 800b424:	4770      	bx	lr

0800b426 <__retarget_lock_acquire_recursive>:
 800b426:	4770      	bx	lr

0800b428 <__retarget_lock_release_recursive>:
 800b428:	4770      	bx	lr
	...

0800b42c <malloc>:
 800b42c:	4b02      	ldr	r3, [pc, #8]	; (800b438 <malloc+0xc>)
 800b42e:	4601      	mov	r1, r0
 800b430:	6818      	ldr	r0, [r3, #0]
 800b432:	f000 bc2b 	b.w	800bc8c <_malloc_r>
 800b436:	bf00      	nop
 800b438:	2000001c 	.word	0x2000001c

0800b43c <memchr>:
 800b43c:	4603      	mov	r3, r0
 800b43e:	b510      	push	{r4, lr}
 800b440:	b2c9      	uxtb	r1, r1
 800b442:	4402      	add	r2, r0
 800b444:	4293      	cmp	r3, r2
 800b446:	4618      	mov	r0, r3
 800b448:	d101      	bne.n	800b44e <memchr+0x12>
 800b44a:	2000      	movs	r0, #0
 800b44c:	e003      	b.n	800b456 <memchr+0x1a>
 800b44e:	7804      	ldrb	r4, [r0, #0]
 800b450:	3301      	adds	r3, #1
 800b452:	428c      	cmp	r4, r1
 800b454:	d1f6      	bne.n	800b444 <memchr+0x8>
 800b456:	bd10      	pop	{r4, pc}

0800b458 <_Balloc>:
 800b458:	b570      	push	{r4, r5, r6, lr}
 800b45a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b45c:	4604      	mov	r4, r0
 800b45e:	460d      	mov	r5, r1
 800b460:	b976      	cbnz	r6, 800b480 <_Balloc+0x28>
 800b462:	2010      	movs	r0, #16
 800b464:	f7ff ffe2 	bl	800b42c <malloc>
 800b468:	4602      	mov	r2, r0
 800b46a:	6260      	str	r0, [r4, #36]	; 0x24
 800b46c:	b920      	cbnz	r0, 800b478 <_Balloc+0x20>
 800b46e:	2166      	movs	r1, #102	; 0x66
 800b470:	4b17      	ldr	r3, [pc, #92]	; (800b4d0 <_Balloc+0x78>)
 800b472:	4818      	ldr	r0, [pc, #96]	; (800b4d4 <_Balloc+0x7c>)
 800b474:	f000 ff04 	bl	800c280 <__assert_func>
 800b478:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b47c:	6006      	str	r6, [r0, #0]
 800b47e:	60c6      	str	r6, [r0, #12]
 800b480:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800b482:	68f3      	ldr	r3, [r6, #12]
 800b484:	b183      	cbz	r3, 800b4a8 <_Balloc+0x50>
 800b486:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b488:	68db      	ldr	r3, [r3, #12]
 800b48a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b48e:	b9b8      	cbnz	r0, 800b4c0 <_Balloc+0x68>
 800b490:	2101      	movs	r1, #1
 800b492:	fa01 f605 	lsl.w	r6, r1, r5
 800b496:	1d72      	adds	r2, r6, #5
 800b498:	4620      	mov	r0, r4
 800b49a:	0092      	lsls	r2, r2, #2
 800b49c:	f000 fb7a 	bl	800bb94 <_calloc_r>
 800b4a0:	b160      	cbz	r0, 800b4bc <_Balloc+0x64>
 800b4a2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b4a6:	e00e      	b.n	800b4c6 <_Balloc+0x6e>
 800b4a8:	2221      	movs	r2, #33	; 0x21
 800b4aa:	2104      	movs	r1, #4
 800b4ac:	4620      	mov	r0, r4
 800b4ae:	f000 fb71 	bl	800bb94 <_calloc_r>
 800b4b2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b4b4:	60f0      	str	r0, [r6, #12]
 800b4b6:	68db      	ldr	r3, [r3, #12]
 800b4b8:	2b00      	cmp	r3, #0
 800b4ba:	d1e4      	bne.n	800b486 <_Balloc+0x2e>
 800b4bc:	2000      	movs	r0, #0
 800b4be:	bd70      	pop	{r4, r5, r6, pc}
 800b4c0:	6802      	ldr	r2, [r0, #0]
 800b4c2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b4c6:	2300      	movs	r3, #0
 800b4c8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b4cc:	e7f7      	b.n	800b4be <_Balloc+0x66>
 800b4ce:	bf00      	nop
 800b4d0:	0800d299 	.word	0x0800d299
 800b4d4:	0800d37c 	.word	0x0800d37c

0800b4d8 <_Bfree>:
 800b4d8:	b570      	push	{r4, r5, r6, lr}
 800b4da:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b4dc:	4605      	mov	r5, r0
 800b4de:	460c      	mov	r4, r1
 800b4e0:	b976      	cbnz	r6, 800b500 <_Bfree+0x28>
 800b4e2:	2010      	movs	r0, #16
 800b4e4:	f7ff ffa2 	bl	800b42c <malloc>
 800b4e8:	4602      	mov	r2, r0
 800b4ea:	6268      	str	r0, [r5, #36]	; 0x24
 800b4ec:	b920      	cbnz	r0, 800b4f8 <_Bfree+0x20>
 800b4ee:	218a      	movs	r1, #138	; 0x8a
 800b4f0:	4b08      	ldr	r3, [pc, #32]	; (800b514 <_Bfree+0x3c>)
 800b4f2:	4809      	ldr	r0, [pc, #36]	; (800b518 <_Bfree+0x40>)
 800b4f4:	f000 fec4 	bl	800c280 <__assert_func>
 800b4f8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b4fc:	6006      	str	r6, [r0, #0]
 800b4fe:	60c6      	str	r6, [r0, #12]
 800b500:	b13c      	cbz	r4, 800b512 <_Bfree+0x3a>
 800b502:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b504:	6862      	ldr	r2, [r4, #4]
 800b506:	68db      	ldr	r3, [r3, #12]
 800b508:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b50c:	6021      	str	r1, [r4, #0]
 800b50e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b512:	bd70      	pop	{r4, r5, r6, pc}
 800b514:	0800d299 	.word	0x0800d299
 800b518:	0800d37c 	.word	0x0800d37c

0800b51c <__multadd>:
 800b51c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b520:	4607      	mov	r7, r0
 800b522:	460c      	mov	r4, r1
 800b524:	461e      	mov	r6, r3
 800b526:	2000      	movs	r0, #0
 800b528:	690d      	ldr	r5, [r1, #16]
 800b52a:	f101 0c14 	add.w	ip, r1, #20
 800b52e:	f8dc 3000 	ldr.w	r3, [ip]
 800b532:	3001      	adds	r0, #1
 800b534:	b299      	uxth	r1, r3
 800b536:	fb02 6101 	mla	r1, r2, r1, r6
 800b53a:	0c1e      	lsrs	r6, r3, #16
 800b53c:	0c0b      	lsrs	r3, r1, #16
 800b53e:	fb02 3306 	mla	r3, r2, r6, r3
 800b542:	b289      	uxth	r1, r1
 800b544:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b548:	4285      	cmp	r5, r0
 800b54a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b54e:	f84c 1b04 	str.w	r1, [ip], #4
 800b552:	dcec      	bgt.n	800b52e <__multadd+0x12>
 800b554:	b30e      	cbz	r6, 800b59a <__multadd+0x7e>
 800b556:	68a3      	ldr	r3, [r4, #8]
 800b558:	42ab      	cmp	r3, r5
 800b55a:	dc19      	bgt.n	800b590 <__multadd+0x74>
 800b55c:	6861      	ldr	r1, [r4, #4]
 800b55e:	4638      	mov	r0, r7
 800b560:	3101      	adds	r1, #1
 800b562:	f7ff ff79 	bl	800b458 <_Balloc>
 800b566:	4680      	mov	r8, r0
 800b568:	b928      	cbnz	r0, 800b576 <__multadd+0x5a>
 800b56a:	4602      	mov	r2, r0
 800b56c:	21b5      	movs	r1, #181	; 0xb5
 800b56e:	4b0c      	ldr	r3, [pc, #48]	; (800b5a0 <__multadd+0x84>)
 800b570:	480c      	ldr	r0, [pc, #48]	; (800b5a4 <__multadd+0x88>)
 800b572:	f000 fe85 	bl	800c280 <__assert_func>
 800b576:	6922      	ldr	r2, [r4, #16]
 800b578:	f104 010c 	add.w	r1, r4, #12
 800b57c:	3202      	adds	r2, #2
 800b57e:	0092      	lsls	r2, r2, #2
 800b580:	300c      	adds	r0, #12
 800b582:	f7fe fa13 	bl	80099ac <memcpy>
 800b586:	4621      	mov	r1, r4
 800b588:	4638      	mov	r0, r7
 800b58a:	f7ff ffa5 	bl	800b4d8 <_Bfree>
 800b58e:	4644      	mov	r4, r8
 800b590:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b594:	3501      	adds	r5, #1
 800b596:	615e      	str	r6, [r3, #20]
 800b598:	6125      	str	r5, [r4, #16]
 800b59a:	4620      	mov	r0, r4
 800b59c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b5a0:	0800d30b 	.word	0x0800d30b
 800b5a4:	0800d37c 	.word	0x0800d37c

0800b5a8 <__hi0bits>:
 800b5a8:	0c02      	lsrs	r2, r0, #16
 800b5aa:	0412      	lsls	r2, r2, #16
 800b5ac:	4603      	mov	r3, r0
 800b5ae:	b9ca      	cbnz	r2, 800b5e4 <__hi0bits+0x3c>
 800b5b0:	0403      	lsls	r3, r0, #16
 800b5b2:	2010      	movs	r0, #16
 800b5b4:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800b5b8:	bf04      	itt	eq
 800b5ba:	021b      	lsleq	r3, r3, #8
 800b5bc:	3008      	addeq	r0, #8
 800b5be:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800b5c2:	bf04      	itt	eq
 800b5c4:	011b      	lsleq	r3, r3, #4
 800b5c6:	3004      	addeq	r0, #4
 800b5c8:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800b5cc:	bf04      	itt	eq
 800b5ce:	009b      	lsleq	r3, r3, #2
 800b5d0:	3002      	addeq	r0, #2
 800b5d2:	2b00      	cmp	r3, #0
 800b5d4:	db05      	blt.n	800b5e2 <__hi0bits+0x3a>
 800b5d6:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800b5da:	f100 0001 	add.w	r0, r0, #1
 800b5de:	bf08      	it	eq
 800b5e0:	2020      	moveq	r0, #32
 800b5e2:	4770      	bx	lr
 800b5e4:	2000      	movs	r0, #0
 800b5e6:	e7e5      	b.n	800b5b4 <__hi0bits+0xc>

0800b5e8 <__lo0bits>:
 800b5e8:	6803      	ldr	r3, [r0, #0]
 800b5ea:	4602      	mov	r2, r0
 800b5ec:	f013 0007 	ands.w	r0, r3, #7
 800b5f0:	d00b      	beq.n	800b60a <__lo0bits+0x22>
 800b5f2:	07d9      	lsls	r1, r3, #31
 800b5f4:	d421      	bmi.n	800b63a <__lo0bits+0x52>
 800b5f6:	0798      	lsls	r0, r3, #30
 800b5f8:	bf49      	itett	mi
 800b5fa:	085b      	lsrmi	r3, r3, #1
 800b5fc:	089b      	lsrpl	r3, r3, #2
 800b5fe:	2001      	movmi	r0, #1
 800b600:	6013      	strmi	r3, [r2, #0]
 800b602:	bf5c      	itt	pl
 800b604:	2002      	movpl	r0, #2
 800b606:	6013      	strpl	r3, [r2, #0]
 800b608:	4770      	bx	lr
 800b60a:	b299      	uxth	r1, r3
 800b60c:	b909      	cbnz	r1, 800b612 <__lo0bits+0x2a>
 800b60e:	2010      	movs	r0, #16
 800b610:	0c1b      	lsrs	r3, r3, #16
 800b612:	b2d9      	uxtb	r1, r3
 800b614:	b909      	cbnz	r1, 800b61a <__lo0bits+0x32>
 800b616:	3008      	adds	r0, #8
 800b618:	0a1b      	lsrs	r3, r3, #8
 800b61a:	0719      	lsls	r1, r3, #28
 800b61c:	bf04      	itt	eq
 800b61e:	091b      	lsreq	r3, r3, #4
 800b620:	3004      	addeq	r0, #4
 800b622:	0799      	lsls	r1, r3, #30
 800b624:	bf04      	itt	eq
 800b626:	089b      	lsreq	r3, r3, #2
 800b628:	3002      	addeq	r0, #2
 800b62a:	07d9      	lsls	r1, r3, #31
 800b62c:	d403      	bmi.n	800b636 <__lo0bits+0x4e>
 800b62e:	085b      	lsrs	r3, r3, #1
 800b630:	f100 0001 	add.w	r0, r0, #1
 800b634:	d003      	beq.n	800b63e <__lo0bits+0x56>
 800b636:	6013      	str	r3, [r2, #0]
 800b638:	4770      	bx	lr
 800b63a:	2000      	movs	r0, #0
 800b63c:	4770      	bx	lr
 800b63e:	2020      	movs	r0, #32
 800b640:	4770      	bx	lr
	...

0800b644 <__i2b>:
 800b644:	b510      	push	{r4, lr}
 800b646:	460c      	mov	r4, r1
 800b648:	2101      	movs	r1, #1
 800b64a:	f7ff ff05 	bl	800b458 <_Balloc>
 800b64e:	4602      	mov	r2, r0
 800b650:	b928      	cbnz	r0, 800b65e <__i2b+0x1a>
 800b652:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800b656:	4b04      	ldr	r3, [pc, #16]	; (800b668 <__i2b+0x24>)
 800b658:	4804      	ldr	r0, [pc, #16]	; (800b66c <__i2b+0x28>)
 800b65a:	f000 fe11 	bl	800c280 <__assert_func>
 800b65e:	2301      	movs	r3, #1
 800b660:	6144      	str	r4, [r0, #20]
 800b662:	6103      	str	r3, [r0, #16]
 800b664:	bd10      	pop	{r4, pc}
 800b666:	bf00      	nop
 800b668:	0800d30b 	.word	0x0800d30b
 800b66c:	0800d37c 	.word	0x0800d37c

0800b670 <__multiply>:
 800b670:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b674:	4691      	mov	r9, r2
 800b676:	690a      	ldr	r2, [r1, #16]
 800b678:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b67c:	460c      	mov	r4, r1
 800b67e:	429a      	cmp	r2, r3
 800b680:	bfbe      	ittt	lt
 800b682:	460b      	movlt	r3, r1
 800b684:	464c      	movlt	r4, r9
 800b686:	4699      	movlt	r9, r3
 800b688:	6927      	ldr	r7, [r4, #16]
 800b68a:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800b68e:	68a3      	ldr	r3, [r4, #8]
 800b690:	6861      	ldr	r1, [r4, #4]
 800b692:	eb07 060a 	add.w	r6, r7, sl
 800b696:	42b3      	cmp	r3, r6
 800b698:	b085      	sub	sp, #20
 800b69a:	bfb8      	it	lt
 800b69c:	3101      	addlt	r1, #1
 800b69e:	f7ff fedb 	bl	800b458 <_Balloc>
 800b6a2:	b930      	cbnz	r0, 800b6b2 <__multiply+0x42>
 800b6a4:	4602      	mov	r2, r0
 800b6a6:	f240 115d 	movw	r1, #349	; 0x15d
 800b6aa:	4b43      	ldr	r3, [pc, #268]	; (800b7b8 <__multiply+0x148>)
 800b6ac:	4843      	ldr	r0, [pc, #268]	; (800b7bc <__multiply+0x14c>)
 800b6ae:	f000 fde7 	bl	800c280 <__assert_func>
 800b6b2:	f100 0514 	add.w	r5, r0, #20
 800b6b6:	462b      	mov	r3, r5
 800b6b8:	2200      	movs	r2, #0
 800b6ba:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b6be:	4543      	cmp	r3, r8
 800b6c0:	d321      	bcc.n	800b706 <__multiply+0x96>
 800b6c2:	f104 0314 	add.w	r3, r4, #20
 800b6c6:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800b6ca:	f109 0314 	add.w	r3, r9, #20
 800b6ce:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800b6d2:	9202      	str	r2, [sp, #8]
 800b6d4:	1b3a      	subs	r2, r7, r4
 800b6d6:	3a15      	subs	r2, #21
 800b6d8:	f022 0203 	bic.w	r2, r2, #3
 800b6dc:	3204      	adds	r2, #4
 800b6de:	f104 0115 	add.w	r1, r4, #21
 800b6e2:	428f      	cmp	r7, r1
 800b6e4:	bf38      	it	cc
 800b6e6:	2204      	movcc	r2, #4
 800b6e8:	9201      	str	r2, [sp, #4]
 800b6ea:	9a02      	ldr	r2, [sp, #8]
 800b6ec:	9303      	str	r3, [sp, #12]
 800b6ee:	429a      	cmp	r2, r3
 800b6f0:	d80c      	bhi.n	800b70c <__multiply+0x9c>
 800b6f2:	2e00      	cmp	r6, #0
 800b6f4:	dd03      	ble.n	800b6fe <__multiply+0x8e>
 800b6f6:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b6fa:	2b00      	cmp	r3, #0
 800b6fc:	d059      	beq.n	800b7b2 <__multiply+0x142>
 800b6fe:	6106      	str	r6, [r0, #16]
 800b700:	b005      	add	sp, #20
 800b702:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b706:	f843 2b04 	str.w	r2, [r3], #4
 800b70a:	e7d8      	b.n	800b6be <__multiply+0x4e>
 800b70c:	f8b3 a000 	ldrh.w	sl, [r3]
 800b710:	f1ba 0f00 	cmp.w	sl, #0
 800b714:	d023      	beq.n	800b75e <__multiply+0xee>
 800b716:	46a9      	mov	r9, r5
 800b718:	f04f 0c00 	mov.w	ip, #0
 800b71c:	f104 0e14 	add.w	lr, r4, #20
 800b720:	f85e 2b04 	ldr.w	r2, [lr], #4
 800b724:	f8d9 1000 	ldr.w	r1, [r9]
 800b728:	fa1f fb82 	uxth.w	fp, r2
 800b72c:	b289      	uxth	r1, r1
 800b72e:	fb0a 110b 	mla	r1, sl, fp, r1
 800b732:	4461      	add	r1, ip
 800b734:	f8d9 c000 	ldr.w	ip, [r9]
 800b738:	0c12      	lsrs	r2, r2, #16
 800b73a:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800b73e:	fb0a c202 	mla	r2, sl, r2, ip
 800b742:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800b746:	b289      	uxth	r1, r1
 800b748:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b74c:	4577      	cmp	r7, lr
 800b74e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b752:	f849 1b04 	str.w	r1, [r9], #4
 800b756:	d8e3      	bhi.n	800b720 <__multiply+0xb0>
 800b758:	9a01      	ldr	r2, [sp, #4]
 800b75a:	f845 c002 	str.w	ip, [r5, r2]
 800b75e:	9a03      	ldr	r2, [sp, #12]
 800b760:	3304      	adds	r3, #4
 800b762:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800b766:	f1b9 0f00 	cmp.w	r9, #0
 800b76a:	d020      	beq.n	800b7ae <__multiply+0x13e>
 800b76c:	46ae      	mov	lr, r5
 800b76e:	f04f 0a00 	mov.w	sl, #0
 800b772:	6829      	ldr	r1, [r5, #0]
 800b774:	f104 0c14 	add.w	ip, r4, #20
 800b778:	f8bc b000 	ldrh.w	fp, [ip]
 800b77c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800b780:	b289      	uxth	r1, r1
 800b782:	fb09 220b 	mla	r2, r9, fp, r2
 800b786:	4492      	add	sl, r2
 800b788:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800b78c:	f84e 1b04 	str.w	r1, [lr], #4
 800b790:	f85c 2b04 	ldr.w	r2, [ip], #4
 800b794:	f8be 1000 	ldrh.w	r1, [lr]
 800b798:	0c12      	lsrs	r2, r2, #16
 800b79a:	fb09 1102 	mla	r1, r9, r2, r1
 800b79e:	4567      	cmp	r7, ip
 800b7a0:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800b7a4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800b7a8:	d8e6      	bhi.n	800b778 <__multiply+0x108>
 800b7aa:	9a01      	ldr	r2, [sp, #4]
 800b7ac:	50a9      	str	r1, [r5, r2]
 800b7ae:	3504      	adds	r5, #4
 800b7b0:	e79b      	b.n	800b6ea <__multiply+0x7a>
 800b7b2:	3e01      	subs	r6, #1
 800b7b4:	e79d      	b.n	800b6f2 <__multiply+0x82>
 800b7b6:	bf00      	nop
 800b7b8:	0800d30b 	.word	0x0800d30b
 800b7bc:	0800d37c 	.word	0x0800d37c

0800b7c0 <__pow5mult>:
 800b7c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b7c4:	4615      	mov	r5, r2
 800b7c6:	f012 0203 	ands.w	r2, r2, #3
 800b7ca:	4606      	mov	r6, r0
 800b7cc:	460f      	mov	r7, r1
 800b7ce:	d007      	beq.n	800b7e0 <__pow5mult+0x20>
 800b7d0:	4c25      	ldr	r4, [pc, #148]	; (800b868 <__pow5mult+0xa8>)
 800b7d2:	3a01      	subs	r2, #1
 800b7d4:	2300      	movs	r3, #0
 800b7d6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b7da:	f7ff fe9f 	bl	800b51c <__multadd>
 800b7de:	4607      	mov	r7, r0
 800b7e0:	10ad      	asrs	r5, r5, #2
 800b7e2:	d03d      	beq.n	800b860 <__pow5mult+0xa0>
 800b7e4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800b7e6:	b97c      	cbnz	r4, 800b808 <__pow5mult+0x48>
 800b7e8:	2010      	movs	r0, #16
 800b7ea:	f7ff fe1f 	bl	800b42c <malloc>
 800b7ee:	4602      	mov	r2, r0
 800b7f0:	6270      	str	r0, [r6, #36]	; 0x24
 800b7f2:	b928      	cbnz	r0, 800b800 <__pow5mult+0x40>
 800b7f4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800b7f8:	4b1c      	ldr	r3, [pc, #112]	; (800b86c <__pow5mult+0xac>)
 800b7fa:	481d      	ldr	r0, [pc, #116]	; (800b870 <__pow5mult+0xb0>)
 800b7fc:	f000 fd40 	bl	800c280 <__assert_func>
 800b800:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b804:	6004      	str	r4, [r0, #0]
 800b806:	60c4      	str	r4, [r0, #12]
 800b808:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800b80c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b810:	b94c      	cbnz	r4, 800b826 <__pow5mult+0x66>
 800b812:	f240 2171 	movw	r1, #625	; 0x271
 800b816:	4630      	mov	r0, r6
 800b818:	f7ff ff14 	bl	800b644 <__i2b>
 800b81c:	2300      	movs	r3, #0
 800b81e:	4604      	mov	r4, r0
 800b820:	f8c8 0008 	str.w	r0, [r8, #8]
 800b824:	6003      	str	r3, [r0, #0]
 800b826:	f04f 0900 	mov.w	r9, #0
 800b82a:	07eb      	lsls	r3, r5, #31
 800b82c:	d50a      	bpl.n	800b844 <__pow5mult+0x84>
 800b82e:	4639      	mov	r1, r7
 800b830:	4622      	mov	r2, r4
 800b832:	4630      	mov	r0, r6
 800b834:	f7ff ff1c 	bl	800b670 <__multiply>
 800b838:	4680      	mov	r8, r0
 800b83a:	4639      	mov	r1, r7
 800b83c:	4630      	mov	r0, r6
 800b83e:	f7ff fe4b 	bl	800b4d8 <_Bfree>
 800b842:	4647      	mov	r7, r8
 800b844:	106d      	asrs	r5, r5, #1
 800b846:	d00b      	beq.n	800b860 <__pow5mult+0xa0>
 800b848:	6820      	ldr	r0, [r4, #0]
 800b84a:	b938      	cbnz	r0, 800b85c <__pow5mult+0x9c>
 800b84c:	4622      	mov	r2, r4
 800b84e:	4621      	mov	r1, r4
 800b850:	4630      	mov	r0, r6
 800b852:	f7ff ff0d 	bl	800b670 <__multiply>
 800b856:	6020      	str	r0, [r4, #0]
 800b858:	f8c0 9000 	str.w	r9, [r0]
 800b85c:	4604      	mov	r4, r0
 800b85e:	e7e4      	b.n	800b82a <__pow5mult+0x6a>
 800b860:	4638      	mov	r0, r7
 800b862:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b866:	bf00      	nop
 800b868:	0800d4c8 	.word	0x0800d4c8
 800b86c:	0800d299 	.word	0x0800d299
 800b870:	0800d37c 	.word	0x0800d37c

0800b874 <__lshift>:
 800b874:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b878:	460c      	mov	r4, r1
 800b87a:	4607      	mov	r7, r0
 800b87c:	4691      	mov	r9, r2
 800b87e:	6923      	ldr	r3, [r4, #16]
 800b880:	6849      	ldr	r1, [r1, #4]
 800b882:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b886:	68a3      	ldr	r3, [r4, #8]
 800b888:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b88c:	f108 0601 	add.w	r6, r8, #1
 800b890:	42b3      	cmp	r3, r6
 800b892:	db0b      	blt.n	800b8ac <__lshift+0x38>
 800b894:	4638      	mov	r0, r7
 800b896:	f7ff fddf 	bl	800b458 <_Balloc>
 800b89a:	4605      	mov	r5, r0
 800b89c:	b948      	cbnz	r0, 800b8b2 <__lshift+0x3e>
 800b89e:	4602      	mov	r2, r0
 800b8a0:	f240 11d9 	movw	r1, #473	; 0x1d9
 800b8a4:	4b29      	ldr	r3, [pc, #164]	; (800b94c <__lshift+0xd8>)
 800b8a6:	482a      	ldr	r0, [pc, #168]	; (800b950 <__lshift+0xdc>)
 800b8a8:	f000 fcea 	bl	800c280 <__assert_func>
 800b8ac:	3101      	adds	r1, #1
 800b8ae:	005b      	lsls	r3, r3, #1
 800b8b0:	e7ee      	b.n	800b890 <__lshift+0x1c>
 800b8b2:	2300      	movs	r3, #0
 800b8b4:	f100 0114 	add.w	r1, r0, #20
 800b8b8:	f100 0210 	add.w	r2, r0, #16
 800b8bc:	4618      	mov	r0, r3
 800b8be:	4553      	cmp	r3, sl
 800b8c0:	db37      	blt.n	800b932 <__lshift+0xbe>
 800b8c2:	6920      	ldr	r0, [r4, #16]
 800b8c4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b8c8:	f104 0314 	add.w	r3, r4, #20
 800b8cc:	f019 091f 	ands.w	r9, r9, #31
 800b8d0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b8d4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800b8d8:	d02f      	beq.n	800b93a <__lshift+0xc6>
 800b8da:	468a      	mov	sl, r1
 800b8dc:	f04f 0c00 	mov.w	ip, #0
 800b8e0:	f1c9 0e20 	rsb	lr, r9, #32
 800b8e4:	681a      	ldr	r2, [r3, #0]
 800b8e6:	fa02 f209 	lsl.w	r2, r2, r9
 800b8ea:	ea42 020c 	orr.w	r2, r2, ip
 800b8ee:	f84a 2b04 	str.w	r2, [sl], #4
 800b8f2:	f853 2b04 	ldr.w	r2, [r3], #4
 800b8f6:	4298      	cmp	r0, r3
 800b8f8:	fa22 fc0e 	lsr.w	ip, r2, lr
 800b8fc:	d8f2      	bhi.n	800b8e4 <__lshift+0x70>
 800b8fe:	1b03      	subs	r3, r0, r4
 800b900:	3b15      	subs	r3, #21
 800b902:	f023 0303 	bic.w	r3, r3, #3
 800b906:	3304      	adds	r3, #4
 800b908:	f104 0215 	add.w	r2, r4, #21
 800b90c:	4290      	cmp	r0, r2
 800b90e:	bf38      	it	cc
 800b910:	2304      	movcc	r3, #4
 800b912:	f841 c003 	str.w	ip, [r1, r3]
 800b916:	f1bc 0f00 	cmp.w	ip, #0
 800b91a:	d001      	beq.n	800b920 <__lshift+0xac>
 800b91c:	f108 0602 	add.w	r6, r8, #2
 800b920:	3e01      	subs	r6, #1
 800b922:	4638      	mov	r0, r7
 800b924:	4621      	mov	r1, r4
 800b926:	612e      	str	r6, [r5, #16]
 800b928:	f7ff fdd6 	bl	800b4d8 <_Bfree>
 800b92c:	4628      	mov	r0, r5
 800b92e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b932:	f842 0f04 	str.w	r0, [r2, #4]!
 800b936:	3301      	adds	r3, #1
 800b938:	e7c1      	b.n	800b8be <__lshift+0x4a>
 800b93a:	3904      	subs	r1, #4
 800b93c:	f853 2b04 	ldr.w	r2, [r3], #4
 800b940:	4298      	cmp	r0, r3
 800b942:	f841 2f04 	str.w	r2, [r1, #4]!
 800b946:	d8f9      	bhi.n	800b93c <__lshift+0xc8>
 800b948:	e7ea      	b.n	800b920 <__lshift+0xac>
 800b94a:	bf00      	nop
 800b94c:	0800d30b 	.word	0x0800d30b
 800b950:	0800d37c 	.word	0x0800d37c

0800b954 <__mcmp>:
 800b954:	4603      	mov	r3, r0
 800b956:	690a      	ldr	r2, [r1, #16]
 800b958:	6900      	ldr	r0, [r0, #16]
 800b95a:	b530      	push	{r4, r5, lr}
 800b95c:	1a80      	subs	r0, r0, r2
 800b95e:	d10d      	bne.n	800b97c <__mcmp+0x28>
 800b960:	3314      	adds	r3, #20
 800b962:	3114      	adds	r1, #20
 800b964:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800b968:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800b96c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800b970:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800b974:	4295      	cmp	r5, r2
 800b976:	d002      	beq.n	800b97e <__mcmp+0x2a>
 800b978:	d304      	bcc.n	800b984 <__mcmp+0x30>
 800b97a:	2001      	movs	r0, #1
 800b97c:	bd30      	pop	{r4, r5, pc}
 800b97e:	42a3      	cmp	r3, r4
 800b980:	d3f4      	bcc.n	800b96c <__mcmp+0x18>
 800b982:	e7fb      	b.n	800b97c <__mcmp+0x28>
 800b984:	f04f 30ff 	mov.w	r0, #4294967295
 800b988:	e7f8      	b.n	800b97c <__mcmp+0x28>
	...

0800b98c <__mdiff>:
 800b98c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b990:	460d      	mov	r5, r1
 800b992:	4607      	mov	r7, r0
 800b994:	4611      	mov	r1, r2
 800b996:	4628      	mov	r0, r5
 800b998:	4614      	mov	r4, r2
 800b99a:	f7ff ffdb 	bl	800b954 <__mcmp>
 800b99e:	1e06      	subs	r6, r0, #0
 800b9a0:	d111      	bne.n	800b9c6 <__mdiff+0x3a>
 800b9a2:	4631      	mov	r1, r6
 800b9a4:	4638      	mov	r0, r7
 800b9a6:	f7ff fd57 	bl	800b458 <_Balloc>
 800b9aa:	4602      	mov	r2, r0
 800b9ac:	b928      	cbnz	r0, 800b9ba <__mdiff+0x2e>
 800b9ae:	f240 2132 	movw	r1, #562	; 0x232
 800b9b2:	4b3a      	ldr	r3, [pc, #232]	; (800ba9c <__mdiff+0x110>)
 800b9b4:	483a      	ldr	r0, [pc, #232]	; (800baa0 <__mdiff+0x114>)
 800b9b6:	f000 fc63 	bl	800c280 <__assert_func>
 800b9ba:	2301      	movs	r3, #1
 800b9bc:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800b9c0:	4610      	mov	r0, r2
 800b9c2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b9c6:	bfa4      	itt	ge
 800b9c8:	4623      	movge	r3, r4
 800b9ca:	462c      	movge	r4, r5
 800b9cc:	4638      	mov	r0, r7
 800b9ce:	6861      	ldr	r1, [r4, #4]
 800b9d0:	bfa6      	itte	ge
 800b9d2:	461d      	movge	r5, r3
 800b9d4:	2600      	movge	r6, #0
 800b9d6:	2601      	movlt	r6, #1
 800b9d8:	f7ff fd3e 	bl	800b458 <_Balloc>
 800b9dc:	4602      	mov	r2, r0
 800b9de:	b918      	cbnz	r0, 800b9e8 <__mdiff+0x5c>
 800b9e0:	f44f 7110 	mov.w	r1, #576	; 0x240
 800b9e4:	4b2d      	ldr	r3, [pc, #180]	; (800ba9c <__mdiff+0x110>)
 800b9e6:	e7e5      	b.n	800b9b4 <__mdiff+0x28>
 800b9e8:	f102 0814 	add.w	r8, r2, #20
 800b9ec:	46c2      	mov	sl, r8
 800b9ee:	f04f 0c00 	mov.w	ip, #0
 800b9f2:	6927      	ldr	r7, [r4, #16]
 800b9f4:	60c6      	str	r6, [r0, #12]
 800b9f6:	692e      	ldr	r6, [r5, #16]
 800b9f8:	f104 0014 	add.w	r0, r4, #20
 800b9fc:	f105 0914 	add.w	r9, r5, #20
 800ba00:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 800ba04:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800ba08:	3410      	adds	r4, #16
 800ba0a:	f854 bf04 	ldr.w	fp, [r4, #4]!
 800ba0e:	f859 3b04 	ldr.w	r3, [r9], #4
 800ba12:	fa1f f18b 	uxth.w	r1, fp
 800ba16:	448c      	add	ip, r1
 800ba18:	b299      	uxth	r1, r3
 800ba1a:	0c1b      	lsrs	r3, r3, #16
 800ba1c:	ebac 0101 	sub.w	r1, ip, r1
 800ba20:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800ba24:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800ba28:	b289      	uxth	r1, r1
 800ba2a:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800ba2e:	454e      	cmp	r6, r9
 800ba30:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800ba34:	f84a 3b04 	str.w	r3, [sl], #4
 800ba38:	d8e7      	bhi.n	800ba0a <__mdiff+0x7e>
 800ba3a:	1b73      	subs	r3, r6, r5
 800ba3c:	3b15      	subs	r3, #21
 800ba3e:	f023 0303 	bic.w	r3, r3, #3
 800ba42:	3515      	adds	r5, #21
 800ba44:	3304      	adds	r3, #4
 800ba46:	42ae      	cmp	r6, r5
 800ba48:	bf38      	it	cc
 800ba4a:	2304      	movcc	r3, #4
 800ba4c:	4418      	add	r0, r3
 800ba4e:	4443      	add	r3, r8
 800ba50:	461e      	mov	r6, r3
 800ba52:	4605      	mov	r5, r0
 800ba54:	4575      	cmp	r5, lr
 800ba56:	d30e      	bcc.n	800ba76 <__mdiff+0xea>
 800ba58:	f10e 0103 	add.w	r1, lr, #3
 800ba5c:	1a09      	subs	r1, r1, r0
 800ba5e:	f021 0103 	bic.w	r1, r1, #3
 800ba62:	3803      	subs	r0, #3
 800ba64:	4586      	cmp	lr, r0
 800ba66:	bf38      	it	cc
 800ba68:	2100      	movcc	r1, #0
 800ba6a:	4419      	add	r1, r3
 800ba6c:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800ba70:	b18b      	cbz	r3, 800ba96 <__mdiff+0x10a>
 800ba72:	6117      	str	r7, [r2, #16]
 800ba74:	e7a4      	b.n	800b9c0 <__mdiff+0x34>
 800ba76:	f855 8b04 	ldr.w	r8, [r5], #4
 800ba7a:	fa1f f188 	uxth.w	r1, r8
 800ba7e:	4461      	add	r1, ip
 800ba80:	140c      	asrs	r4, r1, #16
 800ba82:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800ba86:	b289      	uxth	r1, r1
 800ba88:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800ba8c:	ea4f 4c24 	mov.w	ip, r4, asr #16
 800ba90:	f846 1b04 	str.w	r1, [r6], #4
 800ba94:	e7de      	b.n	800ba54 <__mdiff+0xc8>
 800ba96:	3f01      	subs	r7, #1
 800ba98:	e7e8      	b.n	800ba6c <__mdiff+0xe0>
 800ba9a:	bf00      	nop
 800ba9c:	0800d30b 	.word	0x0800d30b
 800baa0:	0800d37c 	.word	0x0800d37c

0800baa4 <__d2b>:
 800baa4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800baa8:	2101      	movs	r1, #1
 800baaa:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800baae:	4690      	mov	r8, r2
 800bab0:	461d      	mov	r5, r3
 800bab2:	f7ff fcd1 	bl	800b458 <_Balloc>
 800bab6:	4604      	mov	r4, r0
 800bab8:	b930      	cbnz	r0, 800bac8 <__d2b+0x24>
 800baba:	4602      	mov	r2, r0
 800babc:	f240 310a 	movw	r1, #778	; 0x30a
 800bac0:	4b24      	ldr	r3, [pc, #144]	; (800bb54 <__d2b+0xb0>)
 800bac2:	4825      	ldr	r0, [pc, #148]	; (800bb58 <__d2b+0xb4>)
 800bac4:	f000 fbdc 	bl	800c280 <__assert_func>
 800bac8:	f3c5 0313 	ubfx	r3, r5, #0, #20
 800bacc:	f3c5 550a 	ubfx	r5, r5, #20, #11
 800bad0:	bb2d      	cbnz	r5, 800bb1e <__d2b+0x7a>
 800bad2:	9301      	str	r3, [sp, #4]
 800bad4:	f1b8 0300 	subs.w	r3, r8, #0
 800bad8:	d026      	beq.n	800bb28 <__d2b+0x84>
 800bada:	4668      	mov	r0, sp
 800badc:	9300      	str	r3, [sp, #0]
 800bade:	f7ff fd83 	bl	800b5e8 <__lo0bits>
 800bae2:	9900      	ldr	r1, [sp, #0]
 800bae4:	b1f0      	cbz	r0, 800bb24 <__d2b+0x80>
 800bae6:	9a01      	ldr	r2, [sp, #4]
 800bae8:	f1c0 0320 	rsb	r3, r0, #32
 800baec:	fa02 f303 	lsl.w	r3, r2, r3
 800baf0:	430b      	orrs	r3, r1
 800baf2:	40c2      	lsrs	r2, r0
 800baf4:	6163      	str	r3, [r4, #20]
 800baf6:	9201      	str	r2, [sp, #4]
 800baf8:	9b01      	ldr	r3, [sp, #4]
 800bafa:	2b00      	cmp	r3, #0
 800bafc:	bf14      	ite	ne
 800bafe:	2102      	movne	r1, #2
 800bb00:	2101      	moveq	r1, #1
 800bb02:	61a3      	str	r3, [r4, #24]
 800bb04:	6121      	str	r1, [r4, #16]
 800bb06:	b1c5      	cbz	r5, 800bb3a <__d2b+0x96>
 800bb08:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800bb0c:	4405      	add	r5, r0
 800bb0e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800bb12:	603d      	str	r5, [r7, #0]
 800bb14:	6030      	str	r0, [r6, #0]
 800bb16:	4620      	mov	r0, r4
 800bb18:	b002      	add	sp, #8
 800bb1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bb1e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800bb22:	e7d6      	b.n	800bad2 <__d2b+0x2e>
 800bb24:	6161      	str	r1, [r4, #20]
 800bb26:	e7e7      	b.n	800baf8 <__d2b+0x54>
 800bb28:	a801      	add	r0, sp, #4
 800bb2a:	f7ff fd5d 	bl	800b5e8 <__lo0bits>
 800bb2e:	2101      	movs	r1, #1
 800bb30:	9b01      	ldr	r3, [sp, #4]
 800bb32:	6121      	str	r1, [r4, #16]
 800bb34:	6163      	str	r3, [r4, #20]
 800bb36:	3020      	adds	r0, #32
 800bb38:	e7e5      	b.n	800bb06 <__d2b+0x62>
 800bb3a:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800bb3e:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800bb42:	6038      	str	r0, [r7, #0]
 800bb44:	6918      	ldr	r0, [r3, #16]
 800bb46:	f7ff fd2f 	bl	800b5a8 <__hi0bits>
 800bb4a:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800bb4e:	6031      	str	r1, [r6, #0]
 800bb50:	e7e1      	b.n	800bb16 <__d2b+0x72>
 800bb52:	bf00      	nop
 800bb54:	0800d30b 	.word	0x0800d30b
 800bb58:	0800d37c 	.word	0x0800d37c

0800bb5c <_mprec_log10>:
 800bb5c:	2817      	cmp	r0, #23
 800bb5e:	b5d0      	push	{r4, r6, r7, lr}
 800bb60:	4604      	mov	r4, r0
 800bb62:	dc05      	bgt.n	800bb70 <_mprec_log10+0x14>
 800bb64:	4808      	ldr	r0, [pc, #32]	; (800bb88 <_mprec_log10+0x2c>)
 800bb66:	eb00 04c4 	add.w	r4, r0, r4, lsl #3
 800bb6a:	e9d4 0100 	ldrd	r0, r1, [r4]
 800bb6e:	bdd0      	pop	{r4, r6, r7, pc}
 800bb70:	2000      	movs	r0, #0
 800bb72:	2600      	movs	r6, #0
 800bb74:	4905      	ldr	r1, [pc, #20]	; (800bb8c <_mprec_log10+0x30>)
 800bb76:	4f06      	ldr	r7, [pc, #24]	; (800bb90 <_mprec_log10+0x34>)
 800bb78:	4632      	mov	r2, r6
 800bb7a:	463b      	mov	r3, r7
 800bb7c:	f7f4 fcac 	bl	80004d8 <__aeabi_dmul>
 800bb80:	3c01      	subs	r4, #1
 800bb82:	d1f9      	bne.n	800bb78 <_mprec_log10+0x1c>
 800bb84:	e7f3      	b.n	800bb6e <_mprec_log10+0x12>
 800bb86:	bf00      	nop
 800bb88:	0800d400 	.word	0x0800d400
 800bb8c:	3ff00000 	.word	0x3ff00000
 800bb90:	40240000 	.word	0x40240000

0800bb94 <_calloc_r>:
 800bb94:	b570      	push	{r4, r5, r6, lr}
 800bb96:	fba1 5402 	umull	r5, r4, r1, r2
 800bb9a:	b934      	cbnz	r4, 800bbaa <_calloc_r+0x16>
 800bb9c:	4629      	mov	r1, r5
 800bb9e:	f000 f875 	bl	800bc8c <_malloc_r>
 800bba2:	4606      	mov	r6, r0
 800bba4:	b928      	cbnz	r0, 800bbb2 <_calloc_r+0x1e>
 800bba6:	4630      	mov	r0, r6
 800bba8:	bd70      	pop	{r4, r5, r6, pc}
 800bbaa:	220c      	movs	r2, #12
 800bbac:	2600      	movs	r6, #0
 800bbae:	6002      	str	r2, [r0, #0]
 800bbb0:	e7f9      	b.n	800bba6 <_calloc_r+0x12>
 800bbb2:	462a      	mov	r2, r5
 800bbb4:	4621      	mov	r1, r4
 800bbb6:	f7fd ff07 	bl	80099c8 <memset>
 800bbba:	e7f4      	b.n	800bba6 <_calloc_r+0x12>

0800bbbc <_free_r>:
 800bbbc:	b538      	push	{r3, r4, r5, lr}
 800bbbe:	4605      	mov	r5, r0
 800bbc0:	2900      	cmp	r1, #0
 800bbc2:	d040      	beq.n	800bc46 <_free_r+0x8a>
 800bbc4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bbc8:	1f0c      	subs	r4, r1, #4
 800bbca:	2b00      	cmp	r3, #0
 800bbcc:	bfb8      	it	lt
 800bbce:	18e4      	addlt	r4, r4, r3
 800bbd0:	f000 fcde 	bl	800c590 <__malloc_lock>
 800bbd4:	4a1c      	ldr	r2, [pc, #112]	; (800bc48 <_free_r+0x8c>)
 800bbd6:	6813      	ldr	r3, [r2, #0]
 800bbd8:	b933      	cbnz	r3, 800bbe8 <_free_r+0x2c>
 800bbda:	6063      	str	r3, [r4, #4]
 800bbdc:	6014      	str	r4, [r2, #0]
 800bbde:	4628      	mov	r0, r5
 800bbe0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bbe4:	f000 bcda 	b.w	800c59c <__malloc_unlock>
 800bbe8:	42a3      	cmp	r3, r4
 800bbea:	d908      	bls.n	800bbfe <_free_r+0x42>
 800bbec:	6820      	ldr	r0, [r4, #0]
 800bbee:	1821      	adds	r1, r4, r0
 800bbf0:	428b      	cmp	r3, r1
 800bbf2:	bf01      	itttt	eq
 800bbf4:	6819      	ldreq	r1, [r3, #0]
 800bbf6:	685b      	ldreq	r3, [r3, #4]
 800bbf8:	1809      	addeq	r1, r1, r0
 800bbfa:	6021      	streq	r1, [r4, #0]
 800bbfc:	e7ed      	b.n	800bbda <_free_r+0x1e>
 800bbfe:	461a      	mov	r2, r3
 800bc00:	685b      	ldr	r3, [r3, #4]
 800bc02:	b10b      	cbz	r3, 800bc08 <_free_r+0x4c>
 800bc04:	42a3      	cmp	r3, r4
 800bc06:	d9fa      	bls.n	800bbfe <_free_r+0x42>
 800bc08:	6811      	ldr	r1, [r2, #0]
 800bc0a:	1850      	adds	r0, r2, r1
 800bc0c:	42a0      	cmp	r0, r4
 800bc0e:	d10b      	bne.n	800bc28 <_free_r+0x6c>
 800bc10:	6820      	ldr	r0, [r4, #0]
 800bc12:	4401      	add	r1, r0
 800bc14:	1850      	adds	r0, r2, r1
 800bc16:	4283      	cmp	r3, r0
 800bc18:	6011      	str	r1, [r2, #0]
 800bc1a:	d1e0      	bne.n	800bbde <_free_r+0x22>
 800bc1c:	6818      	ldr	r0, [r3, #0]
 800bc1e:	685b      	ldr	r3, [r3, #4]
 800bc20:	4401      	add	r1, r0
 800bc22:	6011      	str	r1, [r2, #0]
 800bc24:	6053      	str	r3, [r2, #4]
 800bc26:	e7da      	b.n	800bbde <_free_r+0x22>
 800bc28:	d902      	bls.n	800bc30 <_free_r+0x74>
 800bc2a:	230c      	movs	r3, #12
 800bc2c:	602b      	str	r3, [r5, #0]
 800bc2e:	e7d6      	b.n	800bbde <_free_r+0x22>
 800bc30:	6820      	ldr	r0, [r4, #0]
 800bc32:	1821      	adds	r1, r4, r0
 800bc34:	428b      	cmp	r3, r1
 800bc36:	bf01      	itttt	eq
 800bc38:	6819      	ldreq	r1, [r3, #0]
 800bc3a:	685b      	ldreq	r3, [r3, #4]
 800bc3c:	1809      	addeq	r1, r1, r0
 800bc3e:	6021      	streq	r1, [r4, #0]
 800bc40:	6063      	str	r3, [r4, #4]
 800bc42:	6054      	str	r4, [r2, #4]
 800bc44:	e7cb      	b.n	800bbde <_free_r+0x22>
 800bc46:	bd38      	pop	{r3, r4, r5, pc}
 800bc48:	20001594 	.word	0x20001594

0800bc4c <sbrk_aligned>:
 800bc4c:	b570      	push	{r4, r5, r6, lr}
 800bc4e:	4e0e      	ldr	r6, [pc, #56]	; (800bc88 <sbrk_aligned+0x3c>)
 800bc50:	460c      	mov	r4, r1
 800bc52:	6831      	ldr	r1, [r6, #0]
 800bc54:	4605      	mov	r5, r0
 800bc56:	b911      	cbnz	r1, 800bc5e <sbrk_aligned+0x12>
 800bc58:	f000 f9e4 	bl	800c024 <_sbrk_r>
 800bc5c:	6030      	str	r0, [r6, #0]
 800bc5e:	4621      	mov	r1, r4
 800bc60:	4628      	mov	r0, r5
 800bc62:	f000 f9df 	bl	800c024 <_sbrk_r>
 800bc66:	1c43      	adds	r3, r0, #1
 800bc68:	d00a      	beq.n	800bc80 <sbrk_aligned+0x34>
 800bc6a:	1cc4      	adds	r4, r0, #3
 800bc6c:	f024 0403 	bic.w	r4, r4, #3
 800bc70:	42a0      	cmp	r0, r4
 800bc72:	d007      	beq.n	800bc84 <sbrk_aligned+0x38>
 800bc74:	1a21      	subs	r1, r4, r0
 800bc76:	4628      	mov	r0, r5
 800bc78:	f000 f9d4 	bl	800c024 <_sbrk_r>
 800bc7c:	3001      	adds	r0, #1
 800bc7e:	d101      	bne.n	800bc84 <sbrk_aligned+0x38>
 800bc80:	f04f 34ff 	mov.w	r4, #4294967295
 800bc84:	4620      	mov	r0, r4
 800bc86:	bd70      	pop	{r4, r5, r6, pc}
 800bc88:	20001598 	.word	0x20001598

0800bc8c <_malloc_r>:
 800bc8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bc90:	1ccd      	adds	r5, r1, #3
 800bc92:	f025 0503 	bic.w	r5, r5, #3
 800bc96:	3508      	adds	r5, #8
 800bc98:	2d0c      	cmp	r5, #12
 800bc9a:	bf38      	it	cc
 800bc9c:	250c      	movcc	r5, #12
 800bc9e:	2d00      	cmp	r5, #0
 800bca0:	4607      	mov	r7, r0
 800bca2:	db01      	blt.n	800bca8 <_malloc_r+0x1c>
 800bca4:	42a9      	cmp	r1, r5
 800bca6:	d905      	bls.n	800bcb4 <_malloc_r+0x28>
 800bca8:	230c      	movs	r3, #12
 800bcaa:	2600      	movs	r6, #0
 800bcac:	603b      	str	r3, [r7, #0]
 800bcae:	4630      	mov	r0, r6
 800bcb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bcb4:	4e2e      	ldr	r6, [pc, #184]	; (800bd70 <_malloc_r+0xe4>)
 800bcb6:	f000 fc6b 	bl	800c590 <__malloc_lock>
 800bcba:	6833      	ldr	r3, [r6, #0]
 800bcbc:	461c      	mov	r4, r3
 800bcbe:	bb34      	cbnz	r4, 800bd0e <_malloc_r+0x82>
 800bcc0:	4629      	mov	r1, r5
 800bcc2:	4638      	mov	r0, r7
 800bcc4:	f7ff ffc2 	bl	800bc4c <sbrk_aligned>
 800bcc8:	1c43      	adds	r3, r0, #1
 800bcca:	4604      	mov	r4, r0
 800bccc:	d14d      	bne.n	800bd6a <_malloc_r+0xde>
 800bcce:	6834      	ldr	r4, [r6, #0]
 800bcd0:	4626      	mov	r6, r4
 800bcd2:	2e00      	cmp	r6, #0
 800bcd4:	d140      	bne.n	800bd58 <_malloc_r+0xcc>
 800bcd6:	6823      	ldr	r3, [r4, #0]
 800bcd8:	4631      	mov	r1, r6
 800bcda:	4638      	mov	r0, r7
 800bcdc:	eb04 0803 	add.w	r8, r4, r3
 800bce0:	f000 f9a0 	bl	800c024 <_sbrk_r>
 800bce4:	4580      	cmp	r8, r0
 800bce6:	d13a      	bne.n	800bd5e <_malloc_r+0xd2>
 800bce8:	6821      	ldr	r1, [r4, #0]
 800bcea:	3503      	adds	r5, #3
 800bcec:	1a6d      	subs	r5, r5, r1
 800bcee:	f025 0503 	bic.w	r5, r5, #3
 800bcf2:	3508      	adds	r5, #8
 800bcf4:	2d0c      	cmp	r5, #12
 800bcf6:	bf38      	it	cc
 800bcf8:	250c      	movcc	r5, #12
 800bcfa:	4638      	mov	r0, r7
 800bcfc:	4629      	mov	r1, r5
 800bcfe:	f7ff ffa5 	bl	800bc4c <sbrk_aligned>
 800bd02:	3001      	adds	r0, #1
 800bd04:	d02b      	beq.n	800bd5e <_malloc_r+0xd2>
 800bd06:	6823      	ldr	r3, [r4, #0]
 800bd08:	442b      	add	r3, r5
 800bd0a:	6023      	str	r3, [r4, #0]
 800bd0c:	e00e      	b.n	800bd2c <_malloc_r+0xa0>
 800bd0e:	6822      	ldr	r2, [r4, #0]
 800bd10:	1b52      	subs	r2, r2, r5
 800bd12:	d41e      	bmi.n	800bd52 <_malloc_r+0xc6>
 800bd14:	2a0b      	cmp	r2, #11
 800bd16:	d916      	bls.n	800bd46 <_malloc_r+0xba>
 800bd18:	1961      	adds	r1, r4, r5
 800bd1a:	42a3      	cmp	r3, r4
 800bd1c:	6025      	str	r5, [r4, #0]
 800bd1e:	bf18      	it	ne
 800bd20:	6059      	strne	r1, [r3, #4]
 800bd22:	6863      	ldr	r3, [r4, #4]
 800bd24:	bf08      	it	eq
 800bd26:	6031      	streq	r1, [r6, #0]
 800bd28:	5162      	str	r2, [r4, r5]
 800bd2a:	604b      	str	r3, [r1, #4]
 800bd2c:	4638      	mov	r0, r7
 800bd2e:	f104 060b 	add.w	r6, r4, #11
 800bd32:	f000 fc33 	bl	800c59c <__malloc_unlock>
 800bd36:	f026 0607 	bic.w	r6, r6, #7
 800bd3a:	1d23      	adds	r3, r4, #4
 800bd3c:	1af2      	subs	r2, r6, r3
 800bd3e:	d0b6      	beq.n	800bcae <_malloc_r+0x22>
 800bd40:	1b9b      	subs	r3, r3, r6
 800bd42:	50a3      	str	r3, [r4, r2]
 800bd44:	e7b3      	b.n	800bcae <_malloc_r+0x22>
 800bd46:	6862      	ldr	r2, [r4, #4]
 800bd48:	42a3      	cmp	r3, r4
 800bd4a:	bf0c      	ite	eq
 800bd4c:	6032      	streq	r2, [r6, #0]
 800bd4e:	605a      	strne	r2, [r3, #4]
 800bd50:	e7ec      	b.n	800bd2c <_malloc_r+0xa0>
 800bd52:	4623      	mov	r3, r4
 800bd54:	6864      	ldr	r4, [r4, #4]
 800bd56:	e7b2      	b.n	800bcbe <_malloc_r+0x32>
 800bd58:	4634      	mov	r4, r6
 800bd5a:	6876      	ldr	r6, [r6, #4]
 800bd5c:	e7b9      	b.n	800bcd2 <_malloc_r+0x46>
 800bd5e:	230c      	movs	r3, #12
 800bd60:	4638      	mov	r0, r7
 800bd62:	603b      	str	r3, [r7, #0]
 800bd64:	f000 fc1a 	bl	800c59c <__malloc_unlock>
 800bd68:	e7a1      	b.n	800bcae <_malloc_r+0x22>
 800bd6a:	6025      	str	r5, [r4, #0]
 800bd6c:	e7de      	b.n	800bd2c <_malloc_r+0xa0>
 800bd6e:	bf00      	nop
 800bd70:	20001594 	.word	0x20001594

0800bd74 <__sfputc_r>:
 800bd74:	6893      	ldr	r3, [r2, #8]
 800bd76:	b410      	push	{r4}
 800bd78:	3b01      	subs	r3, #1
 800bd7a:	2b00      	cmp	r3, #0
 800bd7c:	6093      	str	r3, [r2, #8]
 800bd7e:	da07      	bge.n	800bd90 <__sfputc_r+0x1c>
 800bd80:	6994      	ldr	r4, [r2, #24]
 800bd82:	42a3      	cmp	r3, r4
 800bd84:	db01      	blt.n	800bd8a <__sfputc_r+0x16>
 800bd86:	290a      	cmp	r1, #10
 800bd88:	d102      	bne.n	800bd90 <__sfputc_r+0x1c>
 800bd8a:	bc10      	pop	{r4}
 800bd8c:	f000 b9a6 	b.w	800c0dc <__swbuf_r>
 800bd90:	6813      	ldr	r3, [r2, #0]
 800bd92:	1c58      	adds	r0, r3, #1
 800bd94:	6010      	str	r0, [r2, #0]
 800bd96:	7019      	strb	r1, [r3, #0]
 800bd98:	4608      	mov	r0, r1
 800bd9a:	bc10      	pop	{r4}
 800bd9c:	4770      	bx	lr

0800bd9e <__sfputs_r>:
 800bd9e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bda0:	4606      	mov	r6, r0
 800bda2:	460f      	mov	r7, r1
 800bda4:	4614      	mov	r4, r2
 800bda6:	18d5      	adds	r5, r2, r3
 800bda8:	42ac      	cmp	r4, r5
 800bdaa:	d101      	bne.n	800bdb0 <__sfputs_r+0x12>
 800bdac:	2000      	movs	r0, #0
 800bdae:	e007      	b.n	800bdc0 <__sfputs_r+0x22>
 800bdb0:	463a      	mov	r2, r7
 800bdb2:	4630      	mov	r0, r6
 800bdb4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bdb8:	f7ff ffdc 	bl	800bd74 <__sfputc_r>
 800bdbc:	1c43      	adds	r3, r0, #1
 800bdbe:	d1f3      	bne.n	800bda8 <__sfputs_r+0xa>
 800bdc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800bdc4 <_vfiprintf_r>:
 800bdc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bdc8:	460d      	mov	r5, r1
 800bdca:	4614      	mov	r4, r2
 800bdcc:	4698      	mov	r8, r3
 800bdce:	4606      	mov	r6, r0
 800bdd0:	b09d      	sub	sp, #116	; 0x74
 800bdd2:	b118      	cbz	r0, 800bddc <_vfiprintf_r+0x18>
 800bdd4:	6983      	ldr	r3, [r0, #24]
 800bdd6:	b90b      	cbnz	r3, 800bddc <_vfiprintf_r+0x18>
 800bdd8:	f7ff fa82 	bl	800b2e0 <__sinit>
 800bddc:	4b89      	ldr	r3, [pc, #548]	; (800c004 <_vfiprintf_r+0x240>)
 800bdde:	429d      	cmp	r5, r3
 800bde0:	d11b      	bne.n	800be1a <_vfiprintf_r+0x56>
 800bde2:	6875      	ldr	r5, [r6, #4]
 800bde4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bde6:	07d9      	lsls	r1, r3, #31
 800bde8:	d405      	bmi.n	800bdf6 <_vfiprintf_r+0x32>
 800bdea:	89ab      	ldrh	r3, [r5, #12]
 800bdec:	059a      	lsls	r2, r3, #22
 800bdee:	d402      	bmi.n	800bdf6 <_vfiprintf_r+0x32>
 800bdf0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bdf2:	f7ff fb18 	bl	800b426 <__retarget_lock_acquire_recursive>
 800bdf6:	89ab      	ldrh	r3, [r5, #12]
 800bdf8:	071b      	lsls	r3, r3, #28
 800bdfa:	d501      	bpl.n	800be00 <_vfiprintf_r+0x3c>
 800bdfc:	692b      	ldr	r3, [r5, #16]
 800bdfe:	b9eb      	cbnz	r3, 800be3c <_vfiprintf_r+0x78>
 800be00:	4629      	mov	r1, r5
 800be02:	4630      	mov	r0, r6
 800be04:	f000 f9ce 	bl	800c1a4 <__swsetup_r>
 800be08:	b1c0      	cbz	r0, 800be3c <_vfiprintf_r+0x78>
 800be0a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800be0c:	07dc      	lsls	r4, r3, #31
 800be0e:	d50e      	bpl.n	800be2e <_vfiprintf_r+0x6a>
 800be10:	f04f 30ff 	mov.w	r0, #4294967295
 800be14:	b01d      	add	sp, #116	; 0x74
 800be16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800be1a:	4b7b      	ldr	r3, [pc, #492]	; (800c008 <_vfiprintf_r+0x244>)
 800be1c:	429d      	cmp	r5, r3
 800be1e:	d101      	bne.n	800be24 <_vfiprintf_r+0x60>
 800be20:	68b5      	ldr	r5, [r6, #8]
 800be22:	e7df      	b.n	800bde4 <_vfiprintf_r+0x20>
 800be24:	4b79      	ldr	r3, [pc, #484]	; (800c00c <_vfiprintf_r+0x248>)
 800be26:	429d      	cmp	r5, r3
 800be28:	bf08      	it	eq
 800be2a:	68f5      	ldreq	r5, [r6, #12]
 800be2c:	e7da      	b.n	800bde4 <_vfiprintf_r+0x20>
 800be2e:	89ab      	ldrh	r3, [r5, #12]
 800be30:	0598      	lsls	r0, r3, #22
 800be32:	d4ed      	bmi.n	800be10 <_vfiprintf_r+0x4c>
 800be34:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800be36:	f7ff faf7 	bl	800b428 <__retarget_lock_release_recursive>
 800be3a:	e7e9      	b.n	800be10 <_vfiprintf_r+0x4c>
 800be3c:	2300      	movs	r3, #0
 800be3e:	9309      	str	r3, [sp, #36]	; 0x24
 800be40:	2320      	movs	r3, #32
 800be42:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800be46:	2330      	movs	r3, #48	; 0x30
 800be48:	f04f 0901 	mov.w	r9, #1
 800be4c:	f8cd 800c 	str.w	r8, [sp, #12]
 800be50:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800c010 <_vfiprintf_r+0x24c>
 800be54:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800be58:	4623      	mov	r3, r4
 800be5a:	469a      	mov	sl, r3
 800be5c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800be60:	b10a      	cbz	r2, 800be66 <_vfiprintf_r+0xa2>
 800be62:	2a25      	cmp	r2, #37	; 0x25
 800be64:	d1f9      	bne.n	800be5a <_vfiprintf_r+0x96>
 800be66:	ebba 0b04 	subs.w	fp, sl, r4
 800be6a:	d00b      	beq.n	800be84 <_vfiprintf_r+0xc0>
 800be6c:	465b      	mov	r3, fp
 800be6e:	4622      	mov	r2, r4
 800be70:	4629      	mov	r1, r5
 800be72:	4630      	mov	r0, r6
 800be74:	f7ff ff93 	bl	800bd9e <__sfputs_r>
 800be78:	3001      	adds	r0, #1
 800be7a:	f000 80aa 	beq.w	800bfd2 <_vfiprintf_r+0x20e>
 800be7e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800be80:	445a      	add	r2, fp
 800be82:	9209      	str	r2, [sp, #36]	; 0x24
 800be84:	f89a 3000 	ldrb.w	r3, [sl]
 800be88:	2b00      	cmp	r3, #0
 800be8a:	f000 80a2 	beq.w	800bfd2 <_vfiprintf_r+0x20e>
 800be8e:	2300      	movs	r3, #0
 800be90:	f04f 32ff 	mov.w	r2, #4294967295
 800be94:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800be98:	f10a 0a01 	add.w	sl, sl, #1
 800be9c:	9304      	str	r3, [sp, #16]
 800be9e:	9307      	str	r3, [sp, #28]
 800bea0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bea4:	931a      	str	r3, [sp, #104]	; 0x68
 800bea6:	4654      	mov	r4, sl
 800bea8:	2205      	movs	r2, #5
 800beaa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800beae:	4858      	ldr	r0, [pc, #352]	; (800c010 <_vfiprintf_r+0x24c>)
 800beb0:	f7ff fac4 	bl	800b43c <memchr>
 800beb4:	9a04      	ldr	r2, [sp, #16]
 800beb6:	b9d8      	cbnz	r0, 800bef0 <_vfiprintf_r+0x12c>
 800beb8:	06d1      	lsls	r1, r2, #27
 800beba:	bf44      	itt	mi
 800bebc:	2320      	movmi	r3, #32
 800bebe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bec2:	0713      	lsls	r3, r2, #28
 800bec4:	bf44      	itt	mi
 800bec6:	232b      	movmi	r3, #43	; 0x2b
 800bec8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800becc:	f89a 3000 	ldrb.w	r3, [sl]
 800bed0:	2b2a      	cmp	r3, #42	; 0x2a
 800bed2:	d015      	beq.n	800bf00 <_vfiprintf_r+0x13c>
 800bed4:	4654      	mov	r4, sl
 800bed6:	2000      	movs	r0, #0
 800bed8:	f04f 0c0a 	mov.w	ip, #10
 800bedc:	9a07      	ldr	r2, [sp, #28]
 800bede:	4621      	mov	r1, r4
 800bee0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bee4:	3b30      	subs	r3, #48	; 0x30
 800bee6:	2b09      	cmp	r3, #9
 800bee8:	d94e      	bls.n	800bf88 <_vfiprintf_r+0x1c4>
 800beea:	b1b0      	cbz	r0, 800bf1a <_vfiprintf_r+0x156>
 800beec:	9207      	str	r2, [sp, #28]
 800beee:	e014      	b.n	800bf1a <_vfiprintf_r+0x156>
 800bef0:	eba0 0308 	sub.w	r3, r0, r8
 800bef4:	fa09 f303 	lsl.w	r3, r9, r3
 800bef8:	4313      	orrs	r3, r2
 800befa:	46a2      	mov	sl, r4
 800befc:	9304      	str	r3, [sp, #16]
 800befe:	e7d2      	b.n	800bea6 <_vfiprintf_r+0xe2>
 800bf00:	9b03      	ldr	r3, [sp, #12]
 800bf02:	1d19      	adds	r1, r3, #4
 800bf04:	681b      	ldr	r3, [r3, #0]
 800bf06:	9103      	str	r1, [sp, #12]
 800bf08:	2b00      	cmp	r3, #0
 800bf0a:	bfbb      	ittet	lt
 800bf0c:	425b      	neglt	r3, r3
 800bf0e:	f042 0202 	orrlt.w	r2, r2, #2
 800bf12:	9307      	strge	r3, [sp, #28]
 800bf14:	9307      	strlt	r3, [sp, #28]
 800bf16:	bfb8      	it	lt
 800bf18:	9204      	strlt	r2, [sp, #16]
 800bf1a:	7823      	ldrb	r3, [r4, #0]
 800bf1c:	2b2e      	cmp	r3, #46	; 0x2e
 800bf1e:	d10c      	bne.n	800bf3a <_vfiprintf_r+0x176>
 800bf20:	7863      	ldrb	r3, [r4, #1]
 800bf22:	2b2a      	cmp	r3, #42	; 0x2a
 800bf24:	d135      	bne.n	800bf92 <_vfiprintf_r+0x1ce>
 800bf26:	9b03      	ldr	r3, [sp, #12]
 800bf28:	3402      	adds	r4, #2
 800bf2a:	1d1a      	adds	r2, r3, #4
 800bf2c:	681b      	ldr	r3, [r3, #0]
 800bf2e:	9203      	str	r2, [sp, #12]
 800bf30:	2b00      	cmp	r3, #0
 800bf32:	bfb8      	it	lt
 800bf34:	f04f 33ff 	movlt.w	r3, #4294967295
 800bf38:	9305      	str	r3, [sp, #20]
 800bf3a:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800c014 <_vfiprintf_r+0x250>
 800bf3e:	2203      	movs	r2, #3
 800bf40:	4650      	mov	r0, sl
 800bf42:	7821      	ldrb	r1, [r4, #0]
 800bf44:	f7ff fa7a 	bl	800b43c <memchr>
 800bf48:	b140      	cbz	r0, 800bf5c <_vfiprintf_r+0x198>
 800bf4a:	2340      	movs	r3, #64	; 0x40
 800bf4c:	eba0 000a 	sub.w	r0, r0, sl
 800bf50:	fa03 f000 	lsl.w	r0, r3, r0
 800bf54:	9b04      	ldr	r3, [sp, #16]
 800bf56:	3401      	adds	r4, #1
 800bf58:	4303      	orrs	r3, r0
 800bf5a:	9304      	str	r3, [sp, #16]
 800bf5c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bf60:	2206      	movs	r2, #6
 800bf62:	482d      	ldr	r0, [pc, #180]	; (800c018 <_vfiprintf_r+0x254>)
 800bf64:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bf68:	f7ff fa68 	bl	800b43c <memchr>
 800bf6c:	2800      	cmp	r0, #0
 800bf6e:	d03f      	beq.n	800bff0 <_vfiprintf_r+0x22c>
 800bf70:	4b2a      	ldr	r3, [pc, #168]	; (800c01c <_vfiprintf_r+0x258>)
 800bf72:	bb1b      	cbnz	r3, 800bfbc <_vfiprintf_r+0x1f8>
 800bf74:	9b03      	ldr	r3, [sp, #12]
 800bf76:	3307      	adds	r3, #7
 800bf78:	f023 0307 	bic.w	r3, r3, #7
 800bf7c:	3308      	adds	r3, #8
 800bf7e:	9303      	str	r3, [sp, #12]
 800bf80:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bf82:	443b      	add	r3, r7
 800bf84:	9309      	str	r3, [sp, #36]	; 0x24
 800bf86:	e767      	b.n	800be58 <_vfiprintf_r+0x94>
 800bf88:	460c      	mov	r4, r1
 800bf8a:	2001      	movs	r0, #1
 800bf8c:	fb0c 3202 	mla	r2, ip, r2, r3
 800bf90:	e7a5      	b.n	800bede <_vfiprintf_r+0x11a>
 800bf92:	2300      	movs	r3, #0
 800bf94:	f04f 0c0a 	mov.w	ip, #10
 800bf98:	4619      	mov	r1, r3
 800bf9a:	3401      	adds	r4, #1
 800bf9c:	9305      	str	r3, [sp, #20]
 800bf9e:	4620      	mov	r0, r4
 800bfa0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bfa4:	3a30      	subs	r2, #48	; 0x30
 800bfa6:	2a09      	cmp	r2, #9
 800bfa8:	d903      	bls.n	800bfb2 <_vfiprintf_r+0x1ee>
 800bfaa:	2b00      	cmp	r3, #0
 800bfac:	d0c5      	beq.n	800bf3a <_vfiprintf_r+0x176>
 800bfae:	9105      	str	r1, [sp, #20]
 800bfb0:	e7c3      	b.n	800bf3a <_vfiprintf_r+0x176>
 800bfb2:	4604      	mov	r4, r0
 800bfb4:	2301      	movs	r3, #1
 800bfb6:	fb0c 2101 	mla	r1, ip, r1, r2
 800bfba:	e7f0      	b.n	800bf9e <_vfiprintf_r+0x1da>
 800bfbc:	ab03      	add	r3, sp, #12
 800bfbe:	9300      	str	r3, [sp, #0]
 800bfc0:	462a      	mov	r2, r5
 800bfc2:	4630      	mov	r0, r6
 800bfc4:	4b16      	ldr	r3, [pc, #88]	; (800c020 <_vfiprintf_r+0x25c>)
 800bfc6:	a904      	add	r1, sp, #16
 800bfc8:	f7fd fda4 	bl	8009b14 <_printf_float>
 800bfcc:	4607      	mov	r7, r0
 800bfce:	1c78      	adds	r0, r7, #1
 800bfd0:	d1d6      	bne.n	800bf80 <_vfiprintf_r+0x1bc>
 800bfd2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bfd4:	07d9      	lsls	r1, r3, #31
 800bfd6:	d405      	bmi.n	800bfe4 <_vfiprintf_r+0x220>
 800bfd8:	89ab      	ldrh	r3, [r5, #12]
 800bfda:	059a      	lsls	r2, r3, #22
 800bfdc:	d402      	bmi.n	800bfe4 <_vfiprintf_r+0x220>
 800bfde:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bfe0:	f7ff fa22 	bl	800b428 <__retarget_lock_release_recursive>
 800bfe4:	89ab      	ldrh	r3, [r5, #12]
 800bfe6:	065b      	lsls	r3, r3, #25
 800bfe8:	f53f af12 	bmi.w	800be10 <_vfiprintf_r+0x4c>
 800bfec:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bfee:	e711      	b.n	800be14 <_vfiprintf_r+0x50>
 800bff0:	ab03      	add	r3, sp, #12
 800bff2:	9300      	str	r3, [sp, #0]
 800bff4:	462a      	mov	r2, r5
 800bff6:	4630      	mov	r0, r6
 800bff8:	4b09      	ldr	r3, [pc, #36]	; (800c020 <_vfiprintf_r+0x25c>)
 800bffa:	a904      	add	r1, sp, #16
 800bffc:	f7fe f826 	bl	800a04c <_printf_i>
 800c000:	e7e4      	b.n	800bfcc <_vfiprintf_r+0x208>
 800c002:	bf00      	nop
 800c004:	0800d33c 	.word	0x0800d33c
 800c008:	0800d35c 	.word	0x0800d35c
 800c00c:	0800d31c 	.word	0x0800d31c
 800c010:	0800d4d4 	.word	0x0800d4d4
 800c014:	0800d4da 	.word	0x0800d4da
 800c018:	0800d4de 	.word	0x0800d4de
 800c01c:	08009b15 	.word	0x08009b15
 800c020:	0800bd9f 	.word	0x0800bd9f

0800c024 <_sbrk_r>:
 800c024:	b538      	push	{r3, r4, r5, lr}
 800c026:	2300      	movs	r3, #0
 800c028:	4d05      	ldr	r5, [pc, #20]	; (800c040 <_sbrk_r+0x1c>)
 800c02a:	4604      	mov	r4, r0
 800c02c:	4608      	mov	r0, r1
 800c02e:	602b      	str	r3, [r5, #0]
 800c030:	f7f8 fde6 	bl	8004c00 <_sbrk>
 800c034:	1c43      	adds	r3, r0, #1
 800c036:	d102      	bne.n	800c03e <_sbrk_r+0x1a>
 800c038:	682b      	ldr	r3, [r5, #0]
 800c03a:	b103      	cbz	r3, 800c03e <_sbrk_r+0x1a>
 800c03c:	6023      	str	r3, [r4, #0]
 800c03e:	bd38      	pop	{r3, r4, r5, pc}
 800c040:	2000159c 	.word	0x2000159c

0800c044 <__sread>:
 800c044:	b510      	push	{r4, lr}
 800c046:	460c      	mov	r4, r1
 800c048:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c04c:	f000 faac 	bl	800c5a8 <_read_r>
 800c050:	2800      	cmp	r0, #0
 800c052:	bfab      	itete	ge
 800c054:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c056:	89a3      	ldrhlt	r3, [r4, #12]
 800c058:	181b      	addge	r3, r3, r0
 800c05a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c05e:	bfac      	ite	ge
 800c060:	6563      	strge	r3, [r4, #84]	; 0x54
 800c062:	81a3      	strhlt	r3, [r4, #12]
 800c064:	bd10      	pop	{r4, pc}

0800c066 <__swrite>:
 800c066:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c06a:	461f      	mov	r7, r3
 800c06c:	898b      	ldrh	r3, [r1, #12]
 800c06e:	4605      	mov	r5, r0
 800c070:	05db      	lsls	r3, r3, #23
 800c072:	460c      	mov	r4, r1
 800c074:	4616      	mov	r6, r2
 800c076:	d505      	bpl.n	800c084 <__swrite+0x1e>
 800c078:	2302      	movs	r3, #2
 800c07a:	2200      	movs	r2, #0
 800c07c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c080:	f000 f9fc 	bl	800c47c <_lseek_r>
 800c084:	89a3      	ldrh	r3, [r4, #12]
 800c086:	4632      	mov	r2, r6
 800c088:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c08c:	81a3      	strh	r3, [r4, #12]
 800c08e:	4628      	mov	r0, r5
 800c090:	463b      	mov	r3, r7
 800c092:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c096:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c09a:	f000 b871 	b.w	800c180 <_write_r>

0800c09e <__sseek>:
 800c09e:	b510      	push	{r4, lr}
 800c0a0:	460c      	mov	r4, r1
 800c0a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c0a6:	f000 f9e9 	bl	800c47c <_lseek_r>
 800c0aa:	1c43      	adds	r3, r0, #1
 800c0ac:	89a3      	ldrh	r3, [r4, #12]
 800c0ae:	bf15      	itete	ne
 800c0b0:	6560      	strne	r0, [r4, #84]	; 0x54
 800c0b2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c0b6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c0ba:	81a3      	strheq	r3, [r4, #12]
 800c0bc:	bf18      	it	ne
 800c0be:	81a3      	strhne	r3, [r4, #12]
 800c0c0:	bd10      	pop	{r4, pc}

0800c0c2 <__sclose>:
 800c0c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c0c6:	f000 b8f9 	b.w	800c2bc <_close_r>

0800c0ca <strcpy>:
 800c0ca:	4603      	mov	r3, r0
 800c0cc:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c0d0:	f803 2b01 	strb.w	r2, [r3], #1
 800c0d4:	2a00      	cmp	r2, #0
 800c0d6:	d1f9      	bne.n	800c0cc <strcpy+0x2>
 800c0d8:	4770      	bx	lr
	...

0800c0dc <__swbuf_r>:
 800c0dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c0de:	460e      	mov	r6, r1
 800c0e0:	4614      	mov	r4, r2
 800c0e2:	4605      	mov	r5, r0
 800c0e4:	b118      	cbz	r0, 800c0ee <__swbuf_r+0x12>
 800c0e6:	6983      	ldr	r3, [r0, #24]
 800c0e8:	b90b      	cbnz	r3, 800c0ee <__swbuf_r+0x12>
 800c0ea:	f7ff f8f9 	bl	800b2e0 <__sinit>
 800c0ee:	4b21      	ldr	r3, [pc, #132]	; (800c174 <__swbuf_r+0x98>)
 800c0f0:	429c      	cmp	r4, r3
 800c0f2:	d12b      	bne.n	800c14c <__swbuf_r+0x70>
 800c0f4:	686c      	ldr	r4, [r5, #4]
 800c0f6:	69a3      	ldr	r3, [r4, #24]
 800c0f8:	60a3      	str	r3, [r4, #8]
 800c0fa:	89a3      	ldrh	r3, [r4, #12]
 800c0fc:	071a      	lsls	r2, r3, #28
 800c0fe:	d52f      	bpl.n	800c160 <__swbuf_r+0x84>
 800c100:	6923      	ldr	r3, [r4, #16]
 800c102:	b36b      	cbz	r3, 800c160 <__swbuf_r+0x84>
 800c104:	6923      	ldr	r3, [r4, #16]
 800c106:	6820      	ldr	r0, [r4, #0]
 800c108:	b2f6      	uxtb	r6, r6
 800c10a:	1ac0      	subs	r0, r0, r3
 800c10c:	6963      	ldr	r3, [r4, #20]
 800c10e:	4637      	mov	r7, r6
 800c110:	4283      	cmp	r3, r0
 800c112:	dc04      	bgt.n	800c11e <__swbuf_r+0x42>
 800c114:	4621      	mov	r1, r4
 800c116:	4628      	mov	r0, r5
 800c118:	f000 f962 	bl	800c3e0 <_fflush_r>
 800c11c:	bb30      	cbnz	r0, 800c16c <__swbuf_r+0x90>
 800c11e:	68a3      	ldr	r3, [r4, #8]
 800c120:	3001      	adds	r0, #1
 800c122:	3b01      	subs	r3, #1
 800c124:	60a3      	str	r3, [r4, #8]
 800c126:	6823      	ldr	r3, [r4, #0]
 800c128:	1c5a      	adds	r2, r3, #1
 800c12a:	6022      	str	r2, [r4, #0]
 800c12c:	701e      	strb	r6, [r3, #0]
 800c12e:	6963      	ldr	r3, [r4, #20]
 800c130:	4283      	cmp	r3, r0
 800c132:	d004      	beq.n	800c13e <__swbuf_r+0x62>
 800c134:	89a3      	ldrh	r3, [r4, #12]
 800c136:	07db      	lsls	r3, r3, #31
 800c138:	d506      	bpl.n	800c148 <__swbuf_r+0x6c>
 800c13a:	2e0a      	cmp	r6, #10
 800c13c:	d104      	bne.n	800c148 <__swbuf_r+0x6c>
 800c13e:	4621      	mov	r1, r4
 800c140:	4628      	mov	r0, r5
 800c142:	f000 f94d 	bl	800c3e0 <_fflush_r>
 800c146:	b988      	cbnz	r0, 800c16c <__swbuf_r+0x90>
 800c148:	4638      	mov	r0, r7
 800c14a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c14c:	4b0a      	ldr	r3, [pc, #40]	; (800c178 <__swbuf_r+0x9c>)
 800c14e:	429c      	cmp	r4, r3
 800c150:	d101      	bne.n	800c156 <__swbuf_r+0x7a>
 800c152:	68ac      	ldr	r4, [r5, #8]
 800c154:	e7cf      	b.n	800c0f6 <__swbuf_r+0x1a>
 800c156:	4b09      	ldr	r3, [pc, #36]	; (800c17c <__swbuf_r+0xa0>)
 800c158:	429c      	cmp	r4, r3
 800c15a:	bf08      	it	eq
 800c15c:	68ec      	ldreq	r4, [r5, #12]
 800c15e:	e7ca      	b.n	800c0f6 <__swbuf_r+0x1a>
 800c160:	4621      	mov	r1, r4
 800c162:	4628      	mov	r0, r5
 800c164:	f000 f81e 	bl	800c1a4 <__swsetup_r>
 800c168:	2800      	cmp	r0, #0
 800c16a:	d0cb      	beq.n	800c104 <__swbuf_r+0x28>
 800c16c:	f04f 37ff 	mov.w	r7, #4294967295
 800c170:	e7ea      	b.n	800c148 <__swbuf_r+0x6c>
 800c172:	bf00      	nop
 800c174:	0800d33c 	.word	0x0800d33c
 800c178:	0800d35c 	.word	0x0800d35c
 800c17c:	0800d31c 	.word	0x0800d31c

0800c180 <_write_r>:
 800c180:	b538      	push	{r3, r4, r5, lr}
 800c182:	4604      	mov	r4, r0
 800c184:	4608      	mov	r0, r1
 800c186:	4611      	mov	r1, r2
 800c188:	2200      	movs	r2, #0
 800c18a:	4d05      	ldr	r5, [pc, #20]	; (800c1a0 <_write_r+0x20>)
 800c18c:	602a      	str	r2, [r5, #0]
 800c18e:	461a      	mov	r2, r3
 800c190:	f7f8 fcea 	bl	8004b68 <_write>
 800c194:	1c43      	adds	r3, r0, #1
 800c196:	d102      	bne.n	800c19e <_write_r+0x1e>
 800c198:	682b      	ldr	r3, [r5, #0]
 800c19a:	b103      	cbz	r3, 800c19e <_write_r+0x1e>
 800c19c:	6023      	str	r3, [r4, #0]
 800c19e:	bd38      	pop	{r3, r4, r5, pc}
 800c1a0:	2000159c 	.word	0x2000159c

0800c1a4 <__swsetup_r>:
 800c1a4:	4b32      	ldr	r3, [pc, #200]	; (800c270 <__swsetup_r+0xcc>)
 800c1a6:	b570      	push	{r4, r5, r6, lr}
 800c1a8:	681d      	ldr	r5, [r3, #0]
 800c1aa:	4606      	mov	r6, r0
 800c1ac:	460c      	mov	r4, r1
 800c1ae:	b125      	cbz	r5, 800c1ba <__swsetup_r+0x16>
 800c1b0:	69ab      	ldr	r3, [r5, #24]
 800c1b2:	b913      	cbnz	r3, 800c1ba <__swsetup_r+0x16>
 800c1b4:	4628      	mov	r0, r5
 800c1b6:	f7ff f893 	bl	800b2e0 <__sinit>
 800c1ba:	4b2e      	ldr	r3, [pc, #184]	; (800c274 <__swsetup_r+0xd0>)
 800c1bc:	429c      	cmp	r4, r3
 800c1be:	d10f      	bne.n	800c1e0 <__swsetup_r+0x3c>
 800c1c0:	686c      	ldr	r4, [r5, #4]
 800c1c2:	89a3      	ldrh	r3, [r4, #12]
 800c1c4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c1c8:	0719      	lsls	r1, r3, #28
 800c1ca:	d42c      	bmi.n	800c226 <__swsetup_r+0x82>
 800c1cc:	06dd      	lsls	r5, r3, #27
 800c1ce:	d411      	bmi.n	800c1f4 <__swsetup_r+0x50>
 800c1d0:	2309      	movs	r3, #9
 800c1d2:	6033      	str	r3, [r6, #0]
 800c1d4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c1d8:	f04f 30ff 	mov.w	r0, #4294967295
 800c1dc:	81a3      	strh	r3, [r4, #12]
 800c1de:	e03e      	b.n	800c25e <__swsetup_r+0xba>
 800c1e0:	4b25      	ldr	r3, [pc, #148]	; (800c278 <__swsetup_r+0xd4>)
 800c1e2:	429c      	cmp	r4, r3
 800c1e4:	d101      	bne.n	800c1ea <__swsetup_r+0x46>
 800c1e6:	68ac      	ldr	r4, [r5, #8]
 800c1e8:	e7eb      	b.n	800c1c2 <__swsetup_r+0x1e>
 800c1ea:	4b24      	ldr	r3, [pc, #144]	; (800c27c <__swsetup_r+0xd8>)
 800c1ec:	429c      	cmp	r4, r3
 800c1ee:	bf08      	it	eq
 800c1f0:	68ec      	ldreq	r4, [r5, #12]
 800c1f2:	e7e6      	b.n	800c1c2 <__swsetup_r+0x1e>
 800c1f4:	0758      	lsls	r0, r3, #29
 800c1f6:	d512      	bpl.n	800c21e <__swsetup_r+0x7a>
 800c1f8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c1fa:	b141      	cbz	r1, 800c20e <__swsetup_r+0x6a>
 800c1fc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c200:	4299      	cmp	r1, r3
 800c202:	d002      	beq.n	800c20a <__swsetup_r+0x66>
 800c204:	4630      	mov	r0, r6
 800c206:	f7ff fcd9 	bl	800bbbc <_free_r>
 800c20a:	2300      	movs	r3, #0
 800c20c:	6363      	str	r3, [r4, #52]	; 0x34
 800c20e:	89a3      	ldrh	r3, [r4, #12]
 800c210:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c214:	81a3      	strh	r3, [r4, #12]
 800c216:	2300      	movs	r3, #0
 800c218:	6063      	str	r3, [r4, #4]
 800c21a:	6923      	ldr	r3, [r4, #16]
 800c21c:	6023      	str	r3, [r4, #0]
 800c21e:	89a3      	ldrh	r3, [r4, #12]
 800c220:	f043 0308 	orr.w	r3, r3, #8
 800c224:	81a3      	strh	r3, [r4, #12]
 800c226:	6923      	ldr	r3, [r4, #16]
 800c228:	b94b      	cbnz	r3, 800c23e <__swsetup_r+0x9a>
 800c22a:	89a3      	ldrh	r3, [r4, #12]
 800c22c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c230:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c234:	d003      	beq.n	800c23e <__swsetup_r+0x9a>
 800c236:	4621      	mov	r1, r4
 800c238:	4630      	mov	r0, r6
 800c23a:	f000 f957 	bl	800c4ec <__smakebuf_r>
 800c23e:	89a0      	ldrh	r0, [r4, #12]
 800c240:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c244:	f010 0301 	ands.w	r3, r0, #1
 800c248:	d00a      	beq.n	800c260 <__swsetup_r+0xbc>
 800c24a:	2300      	movs	r3, #0
 800c24c:	60a3      	str	r3, [r4, #8]
 800c24e:	6963      	ldr	r3, [r4, #20]
 800c250:	425b      	negs	r3, r3
 800c252:	61a3      	str	r3, [r4, #24]
 800c254:	6923      	ldr	r3, [r4, #16]
 800c256:	b943      	cbnz	r3, 800c26a <__swsetup_r+0xc6>
 800c258:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c25c:	d1ba      	bne.n	800c1d4 <__swsetup_r+0x30>
 800c25e:	bd70      	pop	{r4, r5, r6, pc}
 800c260:	0781      	lsls	r1, r0, #30
 800c262:	bf58      	it	pl
 800c264:	6963      	ldrpl	r3, [r4, #20]
 800c266:	60a3      	str	r3, [r4, #8]
 800c268:	e7f4      	b.n	800c254 <__swsetup_r+0xb0>
 800c26a:	2000      	movs	r0, #0
 800c26c:	e7f7      	b.n	800c25e <__swsetup_r+0xba>
 800c26e:	bf00      	nop
 800c270:	2000001c 	.word	0x2000001c
 800c274:	0800d33c 	.word	0x0800d33c
 800c278:	0800d35c 	.word	0x0800d35c
 800c27c:	0800d31c 	.word	0x0800d31c

0800c280 <__assert_func>:
 800c280:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c282:	4614      	mov	r4, r2
 800c284:	461a      	mov	r2, r3
 800c286:	4b09      	ldr	r3, [pc, #36]	; (800c2ac <__assert_func+0x2c>)
 800c288:	4605      	mov	r5, r0
 800c28a:	681b      	ldr	r3, [r3, #0]
 800c28c:	68d8      	ldr	r0, [r3, #12]
 800c28e:	b14c      	cbz	r4, 800c2a4 <__assert_func+0x24>
 800c290:	4b07      	ldr	r3, [pc, #28]	; (800c2b0 <__assert_func+0x30>)
 800c292:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c296:	9100      	str	r1, [sp, #0]
 800c298:	462b      	mov	r3, r5
 800c29a:	4906      	ldr	r1, [pc, #24]	; (800c2b4 <__assert_func+0x34>)
 800c29c:	f000 f8dc 	bl	800c458 <fiprintf>
 800c2a0:	f000 f9a1 	bl	800c5e6 <abort>
 800c2a4:	4b04      	ldr	r3, [pc, #16]	; (800c2b8 <__assert_func+0x38>)
 800c2a6:	461c      	mov	r4, r3
 800c2a8:	e7f3      	b.n	800c292 <__assert_func+0x12>
 800c2aa:	bf00      	nop
 800c2ac:	2000001c 	.word	0x2000001c
 800c2b0:	0800d4e5 	.word	0x0800d4e5
 800c2b4:	0800d4f2 	.word	0x0800d4f2
 800c2b8:	0800d520 	.word	0x0800d520

0800c2bc <_close_r>:
 800c2bc:	b538      	push	{r3, r4, r5, lr}
 800c2be:	2300      	movs	r3, #0
 800c2c0:	4d05      	ldr	r5, [pc, #20]	; (800c2d8 <_close_r+0x1c>)
 800c2c2:	4604      	mov	r4, r0
 800c2c4:	4608      	mov	r0, r1
 800c2c6:	602b      	str	r3, [r5, #0]
 800c2c8:	f7f8 fc6a 	bl	8004ba0 <_close>
 800c2cc:	1c43      	adds	r3, r0, #1
 800c2ce:	d102      	bne.n	800c2d6 <_close_r+0x1a>
 800c2d0:	682b      	ldr	r3, [r5, #0]
 800c2d2:	b103      	cbz	r3, 800c2d6 <_close_r+0x1a>
 800c2d4:	6023      	str	r3, [r4, #0]
 800c2d6:	bd38      	pop	{r3, r4, r5, pc}
 800c2d8:	2000159c 	.word	0x2000159c

0800c2dc <__sflush_r>:
 800c2dc:	898a      	ldrh	r2, [r1, #12]
 800c2de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c2e0:	4605      	mov	r5, r0
 800c2e2:	0710      	lsls	r0, r2, #28
 800c2e4:	460c      	mov	r4, r1
 800c2e6:	d457      	bmi.n	800c398 <__sflush_r+0xbc>
 800c2e8:	684b      	ldr	r3, [r1, #4]
 800c2ea:	2b00      	cmp	r3, #0
 800c2ec:	dc04      	bgt.n	800c2f8 <__sflush_r+0x1c>
 800c2ee:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c2f0:	2b00      	cmp	r3, #0
 800c2f2:	dc01      	bgt.n	800c2f8 <__sflush_r+0x1c>
 800c2f4:	2000      	movs	r0, #0
 800c2f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c2f8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c2fa:	2e00      	cmp	r6, #0
 800c2fc:	d0fa      	beq.n	800c2f4 <__sflush_r+0x18>
 800c2fe:	2300      	movs	r3, #0
 800c300:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c304:	682f      	ldr	r7, [r5, #0]
 800c306:	602b      	str	r3, [r5, #0]
 800c308:	d032      	beq.n	800c370 <__sflush_r+0x94>
 800c30a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c30c:	89a3      	ldrh	r3, [r4, #12]
 800c30e:	075a      	lsls	r2, r3, #29
 800c310:	d505      	bpl.n	800c31e <__sflush_r+0x42>
 800c312:	6863      	ldr	r3, [r4, #4]
 800c314:	1ac0      	subs	r0, r0, r3
 800c316:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c318:	b10b      	cbz	r3, 800c31e <__sflush_r+0x42>
 800c31a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c31c:	1ac0      	subs	r0, r0, r3
 800c31e:	2300      	movs	r3, #0
 800c320:	4602      	mov	r2, r0
 800c322:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c324:	4628      	mov	r0, r5
 800c326:	6a21      	ldr	r1, [r4, #32]
 800c328:	47b0      	blx	r6
 800c32a:	1c43      	adds	r3, r0, #1
 800c32c:	89a3      	ldrh	r3, [r4, #12]
 800c32e:	d106      	bne.n	800c33e <__sflush_r+0x62>
 800c330:	6829      	ldr	r1, [r5, #0]
 800c332:	291d      	cmp	r1, #29
 800c334:	d82c      	bhi.n	800c390 <__sflush_r+0xb4>
 800c336:	4a29      	ldr	r2, [pc, #164]	; (800c3dc <__sflush_r+0x100>)
 800c338:	40ca      	lsrs	r2, r1
 800c33a:	07d6      	lsls	r6, r2, #31
 800c33c:	d528      	bpl.n	800c390 <__sflush_r+0xb4>
 800c33e:	2200      	movs	r2, #0
 800c340:	6062      	str	r2, [r4, #4]
 800c342:	6922      	ldr	r2, [r4, #16]
 800c344:	04d9      	lsls	r1, r3, #19
 800c346:	6022      	str	r2, [r4, #0]
 800c348:	d504      	bpl.n	800c354 <__sflush_r+0x78>
 800c34a:	1c42      	adds	r2, r0, #1
 800c34c:	d101      	bne.n	800c352 <__sflush_r+0x76>
 800c34e:	682b      	ldr	r3, [r5, #0]
 800c350:	b903      	cbnz	r3, 800c354 <__sflush_r+0x78>
 800c352:	6560      	str	r0, [r4, #84]	; 0x54
 800c354:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c356:	602f      	str	r7, [r5, #0]
 800c358:	2900      	cmp	r1, #0
 800c35a:	d0cb      	beq.n	800c2f4 <__sflush_r+0x18>
 800c35c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c360:	4299      	cmp	r1, r3
 800c362:	d002      	beq.n	800c36a <__sflush_r+0x8e>
 800c364:	4628      	mov	r0, r5
 800c366:	f7ff fc29 	bl	800bbbc <_free_r>
 800c36a:	2000      	movs	r0, #0
 800c36c:	6360      	str	r0, [r4, #52]	; 0x34
 800c36e:	e7c2      	b.n	800c2f6 <__sflush_r+0x1a>
 800c370:	6a21      	ldr	r1, [r4, #32]
 800c372:	2301      	movs	r3, #1
 800c374:	4628      	mov	r0, r5
 800c376:	47b0      	blx	r6
 800c378:	1c41      	adds	r1, r0, #1
 800c37a:	d1c7      	bne.n	800c30c <__sflush_r+0x30>
 800c37c:	682b      	ldr	r3, [r5, #0]
 800c37e:	2b00      	cmp	r3, #0
 800c380:	d0c4      	beq.n	800c30c <__sflush_r+0x30>
 800c382:	2b1d      	cmp	r3, #29
 800c384:	d001      	beq.n	800c38a <__sflush_r+0xae>
 800c386:	2b16      	cmp	r3, #22
 800c388:	d101      	bne.n	800c38e <__sflush_r+0xb2>
 800c38a:	602f      	str	r7, [r5, #0]
 800c38c:	e7b2      	b.n	800c2f4 <__sflush_r+0x18>
 800c38e:	89a3      	ldrh	r3, [r4, #12]
 800c390:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c394:	81a3      	strh	r3, [r4, #12]
 800c396:	e7ae      	b.n	800c2f6 <__sflush_r+0x1a>
 800c398:	690f      	ldr	r7, [r1, #16]
 800c39a:	2f00      	cmp	r7, #0
 800c39c:	d0aa      	beq.n	800c2f4 <__sflush_r+0x18>
 800c39e:	0793      	lsls	r3, r2, #30
 800c3a0:	bf18      	it	ne
 800c3a2:	2300      	movne	r3, #0
 800c3a4:	680e      	ldr	r6, [r1, #0]
 800c3a6:	bf08      	it	eq
 800c3a8:	694b      	ldreq	r3, [r1, #20]
 800c3aa:	1bf6      	subs	r6, r6, r7
 800c3ac:	600f      	str	r7, [r1, #0]
 800c3ae:	608b      	str	r3, [r1, #8]
 800c3b0:	2e00      	cmp	r6, #0
 800c3b2:	dd9f      	ble.n	800c2f4 <__sflush_r+0x18>
 800c3b4:	4633      	mov	r3, r6
 800c3b6:	463a      	mov	r2, r7
 800c3b8:	4628      	mov	r0, r5
 800c3ba:	6a21      	ldr	r1, [r4, #32]
 800c3bc:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800c3c0:	47e0      	blx	ip
 800c3c2:	2800      	cmp	r0, #0
 800c3c4:	dc06      	bgt.n	800c3d4 <__sflush_r+0xf8>
 800c3c6:	89a3      	ldrh	r3, [r4, #12]
 800c3c8:	f04f 30ff 	mov.w	r0, #4294967295
 800c3cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c3d0:	81a3      	strh	r3, [r4, #12]
 800c3d2:	e790      	b.n	800c2f6 <__sflush_r+0x1a>
 800c3d4:	4407      	add	r7, r0
 800c3d6:	1a36      	subs	r6, r6, r0
 800c3d8:	e7ea      	b.n	800c3b0 <__sflush_r+0xd4>
 800c3da:	bf00      	nop
 800c3dc:	20400001 	.word	0x20400001

0800c3e0 <_fflush_r>:
 800c3e0:	b538      	push	{r3, r4, r5, lr}
 800c3e2:	690b      	ldr	r3, [r1, #16]
 800c3e4:	4605      	mov	r5, r0
 800c3e6:	460c      	mov	r4, r1
 800c3e8:	b913      	cbnz	r3, 800c3f0 <_fflush_r+0x10>
 800c3ea:	2500      	movs	r5, #0
 800c3ec:	4628      	mov	r0, r5
 800c3ee:	bd38      	pop	{r3, r4, r5, pc}
 800c3f0:	b118      	cbz	r0, 800c3fa <_fflush_r+0x1a>
 800c3f2:	6983      	ldr	r3, [r0, #24]
 800c3f4:	b90b      	cbnz	r3, 800c3fa <_fflush_r+0x1a>
 800c3f6:	f7fe ff73 	bl	800b2e0 <__sinit>
 800c3fa:	4b14      	ldr	r3, [pc, #80]	; (800c44c <_fflush_r+0x6c>)
 800c3fc:	429c      	cmp	r4, r3
 800c3fe:	d11b      	bne.n	800c438 <_fflush_r+0x58>
 800c400:	686c      	ldr	r4, [r5, #4]
 800c402:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c406:	2b00      	cmp	r3, #0
 800c408:	d0ef      	beq.n	800c3ea <_fflush_r+0xa>
 800c40a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c40c:	07d0      	lsls	r0, r2, #31
 800c40e:	d404      	bmi.n	800c41a <_fflush_r+0x3a>
 800c410:	0599      	lsls	r1, r3, #22
 800c412:	d402      	bmi.n	800c41a <_fflush_r+0x3a>
 800c414:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c416:	f7ff f806 	bl	800b426 <__retarget_lock_acquire_recursive>
 800c41a:	4628      	mov	r0, r5
 800c41c:	4621      	mov	r1, r4
 800c41e:	f7ff ff5d 	bl	800c2dc <__sflush_r>
 800c422:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c424:	4605      	mov	r5, r0
 800c426:	07da      	lsls	r2, r3, #31
 800c428:	d4e0      	bmi.n	800c3ec <_fflush_r+0xc>
 800c42a:	89a3      	ldrh	r3, [r4, #12]
 800c42c:	059b      	lsls	r3, r3, #22
 800c42e:	d4dd      	bmi.n	800c3ec <_fflush_r+0xc>
 800c430:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c432:	f7fe fff9 	bl	800b428 <__retarget_lock_release_recursive>
 800c436:	e7d9      	b.n	800c3ec <_fflush_r+0xc>
 800c438:	4b05      	ldr	r3, [pc, #20]	; (800c450 <_fflush_r+0x70>)
 800c43a:	429c      	cmp	r4, r3
 800c43c:	d101      	bne.n	800c442 <_fflush_r+0x62>
 800c43e:	68ac      	ldr	r4, [r5, #8]
 800c440:	e7df      	b.n	800c402 <_fflush_r+0x22>
 800c442:	4b04      	ldr	r3, [pc, #16]	; (800c454 <_fflush_r+0x74>)
 800c444:	429c      	cmp	r4, r3
 800c446:	bf08      	it	eq
 800c448:	68ec      	ldreq	r4, [r5, #12]
 800c44a:	e7da      	b.n	800c402 <_fflush_r+0x22>
 800c44c:	0800d33c 	.word	0x0800d33c
 800c450:	0800d35c 	.word	0x0800d35c
 800c454:	0800d31c 	.word	0x0800d31c

0800c458 <fiprintf>:
 800c458:	b40e      	push	{r1, r2, r3}
 800c45a:	b503      	push	{r0, r1, lr}
 800c45c:	4601      	mov	r1, r0
 800c45e:	ab03      	add	r3, sp, #12
 800c460:	4805      	ldr	r0, [pc, #20]	; (800c478 <fiprintf+0x20>)
 800c462:	f853 2b04 	ldr.w	r2, [r3], #4
 800c466:	6800      	ldr	r0, [r0, #0]
 800c468:	9301      	str	r3, [sp, #4]
 800c46a:	f7ff fcab 	bl	800bdc4 <_vfiprintf_r>
 800c46e:	b002      	add	sp, #8
 800c470:	f85d eb04 	ldr.w	lr, [sp], #4
 800c474:	b003      	add	sp, #12
 800c476:	4770      	bx	lr
 800c478:	2000001c 	.word	0x2000001c

0800c47c <_lseek_r>:
 800c47c:	b538      	push	{r3, r4, r5, lr}
 800c47e:	4604      	mov	r4, r0
 800c480:	4608      	mov	r0, r1
 800c482:	4611      	mov	r1, r2
 800c484:	2200      	movs	r2, #0
 800c486:	4d05      	ldr	r5, [pc, #20]	; (800c49c <_lseek_r+0x20>)
 800c488:	602a      	str	r2, [r5, #0]
 800c48a:	461a      	mov	r2, r3
 800c48c:	f7f8 fbac 	bl	8004be8 <_lseek>
 800c490:	1c43      	adds	r3, r0, #1
 800c492:	d102      	bne.n	800c49a <_lseek_r+0x1e>
 800c494:	682b      	ldr	r3, [r5, #0]
 800c496:	b103      	cbz	r3, 800c49a <_lseek_r+0x1e>
 800c498:	6023      	str	r3, [r4, #0]
 800c49a:	bd38      	pop	{r3, r4, r5, pc}
 800c49c:	2000159c 	.word	0x2000159c

0800c4a0 <__swhatbuf_r>:
 800c4a0:	b570      	push	{r4, r5, r6, lr}
 800c4a2:	460e      	mov	r6, r1
 800c4a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c4a8:	4614      	mov	r4, r2
 800c4aa:	2900      	cmp	r1, #0
 800c4ac:	461d      	mov	r5, r3
 800c4ae:	b096      	sub	sp, #88	; 0x58
 800c4b0:	da08      	bge.n	800c4c4 <__swhatbuf_r+0x24>
 800c4b2:	2200      	movs	r2, #0
 800c4b4:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800c4b8:	602a      	str	r2, [r5, #0]
 800c4ba:	061a      	lsls	r2, r3, #24
 800c4bc:	d410      	bmi.n	800c4e0 <__swhatbuf_r+0x40>
 800c4be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c4c2:	e00e      	b.n	800c4e2 <__swhatbuf_r+0x42>
 800c4c4:	466a      	mov	r2, sp
 800c4c6:	f000 f895 	bl	800c5f4 <_fstat_r>
 800c4ca:	2800      	cmp	r0, #0
 800c4cc:	dbf1      	blt.n	800c4b2 <__swhatbuf_r+0x12>
 800c4ce:	9a01      	ldr	r2, [sp, #4]
 800c4d0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800c4d4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800c4d8:	425a      	negs	r2, r3
 800c4da:	415a      	adcs	r2, r3
 800c4dc:	602a      	str	r2, [r5, #0]
 800c4de:	e7ee      	b.n	800c4be <__swhatbuf_r+0x1e>
 800c4e0:	2340      	movs	r3, #64	; 0x40
 800c4e2:	2000      	movs	r0, #0
 800c4e4:	6023      	str	r3, [r4, #0]
 800c4e6:	b016      	add	sp, #88	; 0x58
 800c4e8:	bd70      	pop	{r4, r5, r6, pc}
	...

0800c4ec <__smakebuf_r>:
 800c4ec:	898b      	ldrh	r3, [r1, #12]
 800c4ee:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c4f0:	079d      	lsls	r5, r3, #30
 800c4f2:	4606      	mov	r6, r0
 800c4f4:	460c      	mov	r4, r1
 800c4f6:	d507      	bpl.n	800c508 <__smakebuf_r+0x1c>
 800c4f8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c4fc:	6023      	str	r3, [r4, #0]
 800c4fe:	6123      	str	r3, [r4, #16]
 800c500:	2301      	movs	r3, #1
 800c502:	6163      	str	r3, [r4, #20]
 800c504:	b002      	add	sp, #8
 800c506:	bd70      	pop	{r4, r5, r6, pc}
 800c508:	466a      	mov	r2, sp
 800c50a:	ab01      	add	r3, sp, #4
 800c50c:	f7ff ffc8 	bl	800c4a0 <__swhatbuf_r>
 800c510:	9900      	ldr	r1, [sp, #0]
 800c512:	4605      	mov	r5, r0
 800c514:	4630      	mov	r0, r6
 800c516:	f7ff fbb9 	bl	800bc8c <_malloc_r>
 800c51a:	b948      	cbnz	r0, 800c530 <__smakebuf_r+0x44>
 800c51c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c520:	059a      	lsls	r2, r3, #22
 800c522:	d4ef      	bmi.n	800c504 <__smakebuf_r+0x18>
 800c524:	f023 0303 	bic.w	r3, r3, #3
 800c528:	f043 0302 	orr.w	r3, r3, #2
 800c52c:	81a3      	strh	r3, [r4, #12]
 800c52e:	e7e3      	b.n	800c4f8 <__smakebuf_r+0xc>
 800c530:	4b0d      	ldr	r3, [pc, #52]	; (800c568 <__smakebuf_r+0x7c>)
 800c532:	62b3      	str	r3, [r6, #40]	; 0x28
 800c534:	89a3      	ldrh	r3, [r4, #12]
 800c536:	6020      	str	r0, [r4, #0]
 800c538:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c53c:	81a3      	strh	r3, [r4, #12]
 800c53e:	9b00      	ldr	r3, [sp, #0]
 800c540:	6120      	str	r0, [r4, #16]
 800c542:	6163      	str	r3, [r4, #20]
 800c544:	9b01      	ldr	r3, [sp, #4]
 800c546:	b15b      	cbz	r3, 800c560 <__smakebuf_r+0x74>
 800c548:	4630      	mov	r0, r6
 800c54a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c54e:	f000 f863 	bl	800c618 <_isatty_r>
 800c552:	b128      	cbz	r0, 800c560 <__smakebuf_r+0x74>
 800c554:	89a3      	ldrh	r3, [r4, #12]
 800c556:	f023 0303 	bic.w	r3, r3, #3
 800c55a:	f043 0301 	orr.w	r3, r3, #1
 800c55e:	81a3      	strh	r3, [r4, #12]
 800c560:	89a0      	ldrh	r0, [r4, #12]
 800c562:	4305      	orrs	r5, r0
 800c564:	81a5      	strh	r5, [r4, #12]
 800c566:	e7cd      	b.n	800c504 <__smakebuf_r+0x18>
 800c568:	0800b279 	.word	0x0800b279

0800c56c <__ascii_mbtowc>:
 800c56c:	b082      	sub	sp, #8
 800c56e:	b901      	cbnz	r1, 800c572 <__ascii_mbtowc+0x6>
 800c570:	a901      	add	r1, sp, #4
 800c572:	b142      	cbz	r2, 800c586 <__ascii_mbtowc+0x1a>
 800c574:	b14b      	cbz	r3, 800c58a <__ascii_mbtowc+0x1e>
 800c576:	7813      	ldrb	r3, [r2, #0]
 800c578:	600b      	str	r3, [r1, #0]
 800c57a:	7812      	ldrb	r2, [r2, #0]
 800c57c:	1e10      	subs	r0, r2, #0
 800c57e:	bf18      	it	ne
 800c580:	2001      	movne	r0, #1
 800c582:	b002      	add	sp, #8
 800c584:	4770      	bx	lr
 800c586:	4610      	mov	r0, r2
 800c588:	e7fb      	b.n	800c582 <__ascii_mbtowc+0x16>
 800c58a:	f06f 0001 	mvn.w	r0, #1
 800c58e:	e7f8      	b.n	800c582 <__ascii_mbtowc+0x16>

0800c590 <__malloc_lock>:
 800c590:	4801      	ldr	r0, [pc, #4]	; (800c598 <__malloc_lock+0x8>)
 800c592:	f7fe bf48 	b.w	800b426 <__retarget_lock_acquire_recursive>
 800c596:	bf00      	nop
 800c598:	20001590 	.word	0x20001590

0800c59c <__malloc_unlock>:
 800c59c:	4801      	ldr	r0, [pc, #4]	; (800c5a4 <__malloc_unlock+0x8>)
 800c59e:	f7fe bf43 	b.w	800b428 <__retarget_lock_release_recursive>
 800c5a2:	bf00      	nop
 800c5a4:	20001590 	.word	0x20001590

0800c5a8 <_read_r>:
 800c5a8:	b538      	push	{r3, r4, r5, lr}
 800c5aa:	4604      	mov	r4, r0
 800c5ac:	4608      	mov	r0, r1
 800c5ae:	4611      	mov	r1, r2
 800c5b0:	2200      	movs	r2, #0
 800c5b2:	4d05      	ldr	r5, [pc, #20]	; (800c5c8 <_read_r+0x20>)
 800c5b4:	602a      	str	r2, [r5, #0]
 800c5b6:	461a      	mov	r2, r3
 800c5b8:	f7f8 fab9 	bl	8004b2e <_read>
 800c5bc:	1c43      	adds	r3, r0, #1
 800c5be:	d102      	bne.n	800c5c6 <_read_r+0x1e>
 800c5c0:	682b      	ldr	r3, [r5, #0]
 800c5c2:	b103      	cbz	r3, 800c5c6 <_read_r+0x1e>
 800c5c4:	6023      	str	r3, [r4, #0]
 800c5c6:	bd38      	pop	{r3, r4, r5, pc}
 800c5c8:	2000159c 	.word	0x2000159c

0800c5cc <__ascii_wctomb>:
 800c5cc:	4603      	mov	r3, r0
 800c5ce:	4608      	mov	r0, r1
 800c5d0:	b141      	cbz	r1, 800c5e4 <__ascii_wctomb+0x18>
 800c5d2:	2aff      	cmp	r2, #255	; 0xff
 800c5d4:	d904      	bls.n	800c5e0 <__ascii_wctomb+0x14>
 800c5d6:	228a      	movs	r2, #138	; 0x8a
 800c5d8:	f04f 30ff 	mov.w	r0, #4294967295
 800c5dc:	601a      	str	r2, [r3, #0]
 800c5de:	4770      	bx	lr
 800c5e0:	2001      	movs	r0, #1
 800c5e2:	700a      	strb	r2, [r1, #0]
 800c5e4:	4770      	bx	lr

0800c5e6 <abort>:
 800c5e6:	2006      	movs	r0, #6
 800c5e8:	b508      	push	{r3, lr}
 800c5ea:	f000 f84d 	bl	800c688 <raise>
 800c5ee:	2001      	movs	r0, #1
 800c5f0:	f7f8 fa93 	bl	8004b1a <_exit>

0800c5f4 <_fstat_r>:
 800c5f4:	b538      	push	{r3, r4, r5, lr}
 800c5f6:	2300      	movs	r3, #0
 800c5f8:	4d06      	ldr	r5, [pc, #24]	; (800c614 <_fstat_r+0x20>)
 800c5fa:	4604      	mov	r4, r0
 800c5fc:	4608      	mov	r0, r1
 800c5fe:	4611      	mov	r1, r2
 800c600:	602b      	str	r3, [r5, #0]
 800c602:	f7f8 fad8 	bl	8004bb6 <_fstat>
 800c606:	1c43      	adds	r3, r0, #1
 800c608:	d102      	bne.n	800c610 <_fstat_r+0x1c>
 800c60a:	682b      	ldr	r3, [r5, #0]
 800c60c:	b103      	cbz	r3, 800c610 <_fstat_r+0x1c>
 800c60e:	6023      	str	r3, [r4, #0]
 800c610:	bd38      	pop	{r3, r4, r5, pc}
 800c612:	bf00      	nop
 800c614:	2000159c 	.word	0x2000159c

0800c618 <_isatty_r>:
 800c618:	b538      	push	{r3, r4, r5, lr}
 800c61a:	2300      	movs	r3, #0
 800c61c:	4d05      	ldr	r5, [pc, #20]	; (800c634 <_isatty_r+0x1c>)
 800c61e:	4604      	mov	r4, r0
 800c620:	4608      	mov	r0, r1
 800c622:	602b      	str	r3, [r5, #0]
 800c624:	f7f8 fad6 	bl	8004bd4 <_isatty>
 800c628:	1c43      	adds	r3, r0, #1
 800c62a:	d102      	bne.n	800c632 <_isatty_r+0x1a>
 800c62c:	682b      	ldr	r3, [r5, #0]
 800c62e:	b103      	cbz	r3, 800c632 <_isatty_r+0x1a>
 800c630:	6023      	str	r3, [r4, #0]
 800c632:	bd38      	pop	{r3, r4, r5, pc}
 800c634:	2000159c 	.word	0x2000159c

0800c638 <_raise_r>:
 800c638:	291f      	cmp	r1, #31
 800c63a:	b538      	push	{r3, r4, r5, lr}
 800c63c:	4604      	mov	r4, r0
 800c63e:	460d      	mov	r5, r1
 800c640:	d904      	bls.n	800c64c <_raise_r+0x14>
 800c642:	2316      	movs	r3, #22
 800c644:	6003      	str	r3, [r0, #0]
 800c646:	f04f 30ff 	mov.w	r0, #4294967295
 800c64a:	bd38      	pop	{r3, r4, r5, pc}
 800c64c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800c64e:	b112      	cbz	r2, 800c656 <_raise_r+0x1e>
 800c650:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c654:	b94b      	cbnz	r3, 800c66a <_raise_r+0x32>
 800c656:	4620      	mov	r0, r4
 800c658:	f000 f830 	bl	800c6bc <_getpid_r>
 800c65c:	462a      	mov	r2, r5
 800c65e:	4601      	mov	r1, r0
 800c660:	4620      	mov	r0, r4
 800c662:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c666:	f000 b817 	b.w	800c698 <_kill_r>
 800c66a:	2b01      	cmp	r3, #1
 800c66c:	d00a      	beq.n	800c684 <_raise_r+0x4c>
 800c66e:	1c59      	adds	r1, r3, #1
 800c670:	d103      	bne.n	800c67a <_raise_r+0x42>
 800c672:	2316      	movs	r3, #22
 800c674:	6003      	str	r3, [r0, #0]
 800c676:	2001      	movs	r0, #1
 800c678:	e7e7      	b.n	800c64a <_raise_r+0x12>
 800c67a:	2400      	movs	r4, #0
 800c67c:	4628      	mov	r0, r5
 800c67e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c682:	4798      	blx	r3
 800c684:	2000      	movs	r0, #0
 800c686:	e7e0      	b.n	800c64a <_raise_r+0x12>

0800c688 <raise>:
 800c688:	4b02      	ldr	r3, [pc, #8]	; (800c694 <raise+0xc>)
 800c68a:	4601      	mov	r1, r0
 800c68c:	6818      	ldr	r0, [r3, #0]
 800c68e:	f7ff bfd3 	b.w	800c638 <_raise_r>
 800c692:	bf00      	nop
 800c694:	2000001c 	.word	0x2000001c

0800c698 <_kill_r>:
 800c698:	b538      	push	{r3, r4, r5, lr}
 800c69a:	2300      	movs	r3, #0
 800c69c:	4d06      	ldr	r5, [pc, #24]	; (800c6b8 <_kill_r+0x20>)
 800c69e:	4604      	mov	r4, r0
 800c6a0:	4608      	mov	r0, r1
 800c6a2:	4611      	mov	r1, r2
 800c6a4:	602b      	str	r3, [r5, #0]
 800c6a6:	f7f8 fa28 	bl	8004afa <_kill>
 800c6aa:	1c43      	adds	r3, r0, #1
 800c6ac:	d102      	bne.n	800c6b4 <_kill_r+0x1c>
 800c6ae:	682b      	ldr	r3, [r5, #0]
 800c6b0:	b103      	cbz	r3, 800c6b4 <_kill_r+0x1c>
 800c6b2:	6023      	str	r3, [r4, #0]
 800c6b4:	bd38      	pop	{r3, r4, r5, pc}
 800c6b6:	bf00      	nop
 800c6b8:	2000159c 	.word	0x2000159c

0800c6bc <_getpid_r>:
 800c6bc:	f7f8 ba16 	b.w	8004aec <_getpid>

0800c6c0 <asin>:
 800c6c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c6c2:	4604      	mov	r4, r0
 800c6c4:	460d      	mov	r5, r1
 800c6c6:	f000 f84b 	bl	800c760 <__ieee754_asin>
 800c6ca:	4622      	mov	r2, r4
 800c6cc:	4606      	mov	r6, r0
 800c6ce:	460f      	mov	r7, r1
 800c6d0:	462b      	mov	r3, r5
 800c6d2:	4620      	mov	r0, r4
 800c6d4:	4629      	mov	r1, r5
 800c6d6:	f7f4 f999 	bl	8000a0c <__aeabi_dcmpun>
 800c6da:	b988      	cbnz	r0, 800c700 <asin+0x40>
 800c6dc:	4620      	mov	r0, r4
 800c6de:	4629      	mov	r1, r5
 800c6e0:	f000 fd48 	bl	800d174 <fabs>
 800c6e4:	2200      	movs	r2, #0
 800c6e6:	4b08      	ldr	r3, [pc, #32]	; (800c708 <asin+0x48>)
 800c6e8:	f7f4 f986 	bl	80009f8 <__aeabi_dcmpgt>
 800c6ec:	b140      	cbz	r0, 800c700 <asin+0x40>
 800c6ee:	f7fd f933 	bl	8009958 <__errno>
 800c6f2:	2321      	movs	r3, #33	; 0x21
 800c6f4:	6003      	str	r3, [r0, #0]
 800c6f6:	4805      	ldr	r0, [pc, #20]	; (800c70c <asin+0x4c>)
 800c6f8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800c6fc:	f000 bd3e 	b.w	800d17c <nan>
 800c700:	4630      	mov	r0, r6
 800c702:	4639      	mov	r1, r7
 800c704:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c706:	bf00      	nop
 800c708:	3ff00000 	.word	0x3ff00000
 800c70c:	0800d520 	.word	0x0800d520

0800c710 <atan2>:
 800c710:	f000 ba22 	b.w	800cb58 <__ieee754_atan2>

0800c714 <sqrt>:
 800c714:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c716:	4606      	mov	r6, r0
 800c718:	460f      	mov	r7, r1
 800c71a:	f000 faef 	bl	800ccfc <__ieee754_sqrt>
 800c71e:	4632      	mov	r2, r6
 800c720:	4604      	mov	r4, r0
 800c722:	460d      	mov	r5, r1
 800c724:	463b      	mov	r3, r7
 800c726:	4630      	mov	r0, r6
 800c728:	4639      	mov	r1, r7
 800c72a:	f7f4 f96f 	bl	8000a0c <__aeabi_dcmpun>
 800c72e:	b990      	cbnz	r0, 800c756 <sqrt+0x42>
 800c730:	2200      	movs	r2, #0
 800c732:	2300      	movs	r3, #0
 800c734:	4630      	mov	r0, r6
 800c736:	4639      	mov	r1, r7
 800c738:	f7f4 f940 	bl	80009bc <__aeabi_dcmplt>
 800c73c:	b158      	cbz	r0, 800c756 <sqrt+0x42>
 800c73e:	f7fd f90b 	bl	8009958 <__errno>
 800c742:	2321      	movs	r3, #33	; 0x21
 800c744:	2200      	movs	r2, #0
 800c746:	6003      	str	r3, [r0, #0]
 800c748:	2300      	movs	r3, #0
 800c74a:	4610      	mov	r0, r2
 800c74c:	4619      	mov	r1, r3
 800c74e:	f7f3 ffed 	bl	800072c <__aeabi_ddiv>
 800c752:	4604      	mov	r4, r0
 800c754:	460d      	mov	r5, r1
 800c756:	4620      	mov	r0, r4
 800c758:	4629      	mov	r1, r5
 800c75a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c75c:	0000      	movs	r0, r0
	...

0800c760 <__ieee754_asin>:
 800c760:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c764:	4bc4      	ldr	r3, [pc, #784]	; (800ca78 <__ieee754_asin+0x318>)
 800c766:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800c76a:	b087      	sub	sp, #28
 800c76c:	429e      	cmp	r6, r3
 800c76e:	4602      	mov	r2, r0
 800c770:	4604      	mov	r4, r0
 800c772:	460d      	mov	r5, r1
 800c774:	9105      	str	r1, [sp, #20]
 800c776:	dd29      	ble.n	800c7cc <__ieee754_asin+0x6c>
 800c778:	4603      	mov	r3, r0
 800c77a:	f106 4640 	add.w	r6, r6, #3221225472	; 0xc0000000
 800c77e:	f506 1680 	add.w	r6, r6, #1048576	; 0x100000
 800c782:	4333      	orrs	r3, r6
 800c784:	d114      	bne.n	800c7b0 <__ieee754_asin+0x50>
 800c786:	a3a2      	add	r3, pc, #648	; (adr r3, 800ca10 <__ieee754_asin+0x2b0>)
 800c788:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c78c:	f7f3 fea4 	bl	80004d8 <__aeabi_dmul>
 800c790:	a3a1      	add	r3, pc, #644	; (adr r3, 800ca18 <__ieee754_asin+0x2b8>)
 800c792:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c796:	4606      	mov	r6, r0
 800c798:	460f      	mov	r7, r1
 800c79a:	4620      	mov	r0, r4
 800c79c:	4629      	mov	r1, r5
 800c79e:	f7f3 fe9b 	bl	80004d8 <__aeabi_dmul>
 800c7a2:	4602      	mov	r2, r0
 800c7a4:	460b      	mov	r3, r1
 800c7a6:	4630      	mov	r0, r6
 800c7a8:	4639      	mov	r1, r7
 800c7aa:	f7f3 fcdf 	bl	800016c <__adddf3>
 800c7ae:	e006      	b.n	800c7be <__ieee754_asin+0x5e>
 800c7b0:	460b      	mov	r3, r1
 800c7b2:	f7f3 fcd9 	bl	8000168 <__aeabi_dsub>
 800c7b6:	4602      	mov	r2, r0
 800c7b8:	460b      	mov	r3, r1
 800c7ba:	f7f3 ffb7 	bl	800072c <__aeabi_ddiv>
 800c7be:	4604      	mov	r4, r0
 800c7c0:	460d      	mov	r5, r1
 800c7c2:	4620      	mov	r0, r4
 800c7c4:	4629      	mov	r1, r5
 800c7c6:	b007      	add	sp, #28
 800c7c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c7cc:	4bab      	ldr	r3, [pc, #684]	; (800ca7c <__ieee754_asin+0x31c>)
 800c7ce:	429e      	cmp	r6, r3
 800c7d0:	dc0e      	bgt.n	800c7f0 <__ieee754_asin+0x90>
 800c7d2:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 800c7d6:	f280 80ab 	bge.w	800c930 <__ieee754_asin+0x1d0>
 800c7da:	a391      	add	r3, pc, #580	; (adr r3, 800ca20 <__ieee754_asin+0x2c0>)
 800c7dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7e0:	f7f3 fcc4 	bl	800016c <__adddf3>
 800c7e4:	2200      	movs	r2, #0
 800c7e6:	4ba6      	ldr	r3, [pc, #664]	; (800ca80 <__ieee754_asin+0x320>)
 800c7e8:	f7f4 f906 	bl	80009f8 <__aeabi_dcmpgt>
 800c7ec:	2800      	cmp	r0, #0
 800c7ee:	d1e8      	bne.n	800c7c2 <__ieee754_asin+0x62>
 800c7f0:	4620      	mov	r0, r4
 800c7f2:	4629      	mov	r1, r5
 800c7f4:	f000 fcbe 	bl	800d174 <fabs>
 800c7f8:	4602      	mov	r2, r0
 800c7fa:	460b      	mov	r3, r1
 800c7fc:	2000      	movs	r0, #0
 800c7fe:	49a0      	ldr	r1, [pc, #640]	; (800ca80 <__ieee754_asin+0x320>)
 800c800:	f7f3 fcb2 	bl	8000168 <__aeabi_dsub>
 800c804:	2200      	movs	r2, #0
 800c806:	4b9f      	ldr	r3, [pc, #636]	; (800ca84 <__ieee754_asin+0x324>)
 800c808:	f7f3 fe66 	bl	80004d8 <__aeabi_dmul>
 800c80c:	a386      	add	r3, pc, #536	; (adr r3, 800ca28 <__ieee754_asin+0x2c8>)
 800c80e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c812:	4604      	mov	r4, r0
 800c814:	460d      	mov	r5, r1
 800c816:	f7f3 fe5f 	bl	80004d8 <__aeabi_dmul>
 800c81a:	a385      	add	r3, pc, #532	; (adr r3, 800ca30 <__ieee754_asin+0x2d0>)
 800c81c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c820:	f7f3 fca4 	bl	800016c <__adddf3>
 800c824:	4622      	mov	r2, r4
 800c826:	462b      	mov	r3, r5
 800c828:	f7f3 fe56 	bl	80004d8 <__aeabi_dmul>
 800c82c:	a382      	add	r3, pc, #520	; (adr r3, 800ca38 <__ieee754_asin+0x2d8>)
 800c82e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c832:	f7f3 fc99 	bl	8000168 <__aeabi_dsub>
 800c836:	4622      	mov	r2, r4
 800c838:	462b      	mov	r3, r5
 800c83a:	f7f3 fe4d 	bl	80004d8 <__aeabi_dmul>
 800c83e:	a380      	add	r3, pc, #512	; (adr r3, 800ca40 <__ieee754_asin+0x2e0>)
 800c840:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c844:	f7f3 fc92 	bl	800016c <__adddf3>
 800c848:	4622      	mov	r2, r4
 800c84a:	462b      	mov	r3, r5
 800c84c:	f7f3 fe44 	bl	80004d8 <__aeabi_dmul>
 800c850:	a37d      	add	r3, pc, #500	; (adr r3, 800ca48 <__ieee754_asin+0x2e8>)
 800c852:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c856:	f7f3 fc87 	bl	8000168 <__aeabi_dsub>
 800c85a:	4622      	mov	r2, r4
 800c85c:	462b      	mov	r3, r5
 800c85e:	f7f3 fe3b 	bl	80004d8 <__aeabi_dmul>
 800c862:	a37b      	add	r3, pc, #492	; (adr r3, 800ca50 <__ieee754_asin+0x2f0>)
 800c864:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c868:	f7f3 fc80 	bl	800016c <__adddf3>
 800c86c:	4622      	mov	r2, r4
 800c86e:	462b      	mov	r3, r5
 800c870:	f7f3 fe32 	bl	80004d8 <__aeabi_dmul>
 800c874:	a378      	add	r3, pc, #480	; (adr r3, 800ca58 <__ieee754_asin+0x2f8>)
 800c876:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c87a:	e9cd 0100 	strd	r0, r1, [sp]
 800c87e:	4620      	mov	r0, r4
 800c880:	4629      	mov	r1, r5
 800c882:	f7f3 fe29 	bl	80004d8 <__aeabi_dmul>
 800c886:	a376      	add	r3, pc, #472	; (adr r3, 800ca60 <__ieee754_asin+0x300>)
 800c888:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c88c:	f7f3 fc6c 	bl	8000168 <__aeabi_dsub>
 800c890:	4622      	mov	r2, r4
 800c892:	462b      	mov	r3, r5
 800c894:	f7f3 fe20 	bl	80004d8 <__aeabi_dmul>
 800c898:	a373      	add	r3, pc, #460	; (adr r3, 800ca68 <__ieee754_asin+0x308>)
 800c89a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c89e:	f7f3 fc65 	bl	800016c <__adddf3>
 800c8a2:	4622      	mov	r2, r4
 800c8a4:	462b      	mov	r3, r5
 800c8a6:	f7f3 fe17 	bl	80004d8 <__aeabi_dmul>
 800c8aa:	a371      	add	r3, pc, #452	; (adr r3, 800ca70 <__ieee754_asin+0x310>)
 800c8ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8b0:	f7f3 fc5a 	bl	8000168 <__aeabi_dsub>
 800c8b4:	4622      	mov	r2, r4
 800c8b6:	462b      	mov	r3, r5
 800c8b8:	f7f3 fe0e 	bl	80004d8 <__aeabi_dmul>
 800c8bc:	4b70      	ldr	r3, [pc, #448]	; (800ca80 <__ieee754_asin+0x320>)
 800c8be:	2200      	movs	r2, #0
 800c8c0:	f7f3 fc54 	bl	800016c <__adddf3>
 800c8c4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c8c8:	4620      	mov	r0, r4
 800c8ca:	4629      	mov	r1, r5
 800c8cc:	f000 fa16 	bl	800ccfc <__ieee754_sqrt>
 800c8d0:	4b6d      	ldr	r3, [pc, #436]	; (800ca88 <__ieee754_asin+0x328>)
 800c8d2:	4682      	mov	sl, r0
 800c8d4:	429e      	cmp	r6, r3
 800c8d6:	468b      	mov	fp, r1
 800c8d8:	f340 80d8 	ble.w	800ca8c <__ieee754_asin+0x32c>
 800c8dc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c8e0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c8e4:	f7f3 ff22 	bl	800072c <__aeabi_ddiv>
 800c8e8:	4652      	mov	r2, sl
 800c8ea:	465b      	mov	r3, fp
 800c8ec:	f7f3 fdf4 	bl	80004d8 <__aeabi_dmul>
 800c8f0:	4652      	mov	r2, sl
 800c8f2:	465b      	mov	r3, fp
 800c8f4:	f7f3 fc3a 	bl	800016c <__adddf3>
 800c8f8:	4602      	mov	r2, r0
 800c8fa:	460b      	mov	r3, r1
 800c8fc:	f7f3 fc36 	bl	800016c <__adddf3>
 800c900:	a345      	add	r3, pc, #276	; (adr r3, 800ca18 <__ieee754_asin+0x2b8>)
 800c902:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c906:	f7f3 fc2f 	bl	8000168 <__aeabi_dsub>
 800c90a:	4602      	mov	r2, r0
 800c90c:	460b      	mov	r3, r1
 800c90e:	a140      	add	r1, pc, #256	; (adr r1, 800ca10 <__ieee754_asin+0x2b0>)
 800c910:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c914:	f7f3 fc28 	bl	8000168 <__aeabi_dsub>
 800c918:	9b05      	ldr	r3, [sp, #20]
 800c91a:	4604      	mov	r4, r0
 800c91c:	2b00      	cmp	r3, #0
 800c91e:	bfdc      	itt	le
 800c920:	4602      	movle	r2, r0
 800c922:	f101 4300 	addle.w	r3, r1, #2147483648	; 0x80000000
 800c926:	460d      	mov	r5, r1
 800c928:	bfdc      	itt	le
 800c92a:	4614      	movle	r4, r2
 800c92c:	461d      	movle	r5, r3
 800c92e:	e748      	b.n	800c7c2 <__ieee754_asin+0x62>
 800c930:	460b      	mov	r3, r1
 800c932:	f7f3 fdd1 	bl	80004d8 <__aeabi_dmul>
 800c936:	a33c      	add	r3, pc, #240	; (adr r3, 800ca28 <__ieee754_asin+0x2c8>)
 800c938:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c93c:	4606      	mov	r6, r0
 800c93e:	460f      	mov	r7, r1
 800c940:	f7f3 fdca 	bl	80004d8 <__aeabi_dmul>
 800c944:	a33a      	add	r3, pc, #232	; (adr r3, 800ca30 <__ieee754_asin+0x2d0>)
 800c946:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c94a:	f7f3 fc0f 	bl	800016c <__adddf3>
 800c94e:	4632      	mov	r2, r6
 800c950:	463b      	mov	r3, r7
 800c952:	f7f3 fdc1 	bl	80004d8 <__aeabi_dmul>
 800c956:	a338      	add	r3, pc, #224	; (adr r3, 800ca38 <__ieee754_asin+0x2d8>)
 800c958:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c95c:	f7f3 fc04 	bl	8000168 <__aeabi_dsub>
 800c960:	4632      	mov	r2, r6
 800c962:	463b      	mov	r3, r7
 800c964:	f7f3 fdb8 	bl	80004d8 <__aeabi_dmul>
 800c968:	a335      	add	r3, pc, #212	; (adr r3, 800ca40 <__ieee754_asin+0x2e0>)
 800c96a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c96e:	f7f3 fbfd 	bl	800016c <__adddf3>
 800c972:	4632      	mov	r2, r6
 800c974:	463b      	mov	r3, r7
 800c976:	f7f3 fdaf 	bl	80004d8 <__aeabi_dmul>
 800c97a:	a333      	add	r3, pc, #204	; (adr r3, 800ca48 <__ieee754_asin+0x2e8>)
 800c97c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c980:	f7f3 fbf2 	bl	8000168 <__aeabi_dsub>
 800c984:	4632      	mov	r2, r6
 800c986:	463b      	mov	r3, r7
 800c988:	f7f3 fda6 	bl	80004d8 <__aeabi_dmul>
 800c98c:	a330      	add	r3, pc, #192	; (adr r3, 800ca50 <__ieee754_asin+0x2f0>)
 800c98e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c992:	f7f3 fbeb 	bl	800016c <__adddf3>
 800c996:	4632      	mov	r2, r6
 800c998:	463b      	mov	r3, r7
 800c99a:	f7f3 fd9d 	bl	80004d8 <__aeabi_dmul>
 800c99e:	a32e      	add	r3, pc, #184	; (adr r3, 800ca58 <__ieee754_asin+0x2f8>)
 800c9a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9a4:	4680      	mov	r8, r0
 800c9a6:	4689      	mov	r9, r1
 800c9a8:	4630      	mov	r0, r6
 800c9aa:	4639      	mov	r1, r7
 800c9ac:	f7f3 fd94 	bl	80004d8 <__aeabi_dmul>
 800c9b0:	a32b      	add	r3, pc, #172	; (adr r3, 800ca60 <__ieee754_asin+0x300>)
 800c9b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9b6:	f7f3 fbd7 	bl	8000168 <__aeabi_dsub>
 800c9ba:	4632      	mov	r2, r6
 800c9bc:	463b      	mov	r3, r7
 800c9be:	f7f3 fd8b 	bl	80004d8 <__aeabi_dmul>
 800c9c2:	a329      	add	r3, pc, #164	; (adr r3, 800ca68 <__ieee754_asin+0x308>)
 800c9c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9c8:	f7f3 fbd0 	bl	800016c <__adddf3>
 800c9cc:	4632      	mov	r2, r6
 800c9ce:	463b      	mov	r3, r7
 800c9d0:	f7f3 fd82 	bl	80004d8 <__aeabi_dmul>
 800c9d4:	a326      	add	r3, pc, #152	; (adr r3, 800ca70 <__ieee754_asin+0x310>)
 800c9d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9da:	f7f3 fbc5 	bl	8000168 <__aeabi_dsub>
 800c9de:	4632      	mov	r2, r6
 800c9e0:	463b      	mov	r3, r7
 800c9e2:	f7f3 fd79 	bl	80004d8 <__aeabi_dmul>
 800c9e6:	2200      	movs	r2, #0
 800c9e8:	4b25      	ldr	r3, [pc, #148]	; (800ca80 <__ieee754_asin+0x320>)
 800c9ea:	f7f3 fbbf 	bl	800016c <__adddf3>
 800c9ee:	4602      	mov	r2, r0
 800c9f0:	460b      	mov	r3, r1
 800c9f2:	4640      	mov	r0, r8
 800c9f4:	4649      	mov	r1, r9
 800c9f6:	f7f3 fe99 	bl	800072c <__aeabi_ddiv>
 800c9fa:	4622      	mov	r2, r4
 800c9fc:	462b      	mov	r3, r5
 800c9fe:	f7f3 fd6b 	bl	80004d8 <__aeabi_dmul>
 800ca02:	4602      	mov	r2, r0
 800ca04:	460b      	mov	r3, r1
 800ca06:	4620      	mov	r0, r4
 800ca08:	4629      	mov	r1, r5
 800ca0a:	e6ce      	b.n	800c7aa <__ieee754_asin+0x4a>
 800ca0c:	f3af 8000 	nop.w
 800ca10:	54442d18 	.word	0x54442d18
 800ca14:	3ff921fb 	.word	0x3ff921fb
 800ca18:	33145c07 	.word	0x33145c07
 800ca1c:	3c91a626 	.word	0x3c91a626
 800ca20:	8800759c 	.word	0x8800759c
 800ca24:	7e37e43c 	.word	0x7e37e43c
 800ca28:	0dfdf709 	.word	0x0dfdf709
 800ca2c:	3f023de1 	.word	0x3f023de1
 800ca30:	7501b288 	.word	0x7501b288
 800ca34:	3f49efe0 	.word	0x3f49efe0
 800ca38:	b5688f3b 	.word	0xb5688f3b
 800ca3c:	3fa48228 	.word	0x3fa48228
 800ca40:	0e884455 	.word	0x0e884455
 800ca44:	3fc9c155 	.word	0x3fc9c155
 800ca48:	03eb6f7d 	.word	0x03eb6f7d
 800ca4c:	3fd4d612 	.word	0x3fd4d612
 800ca50:	55555555 	.word	0x55555555
 800ca54:	3fc55555 	.word	0x3fc55555
 800ca58:	b12e9282 	.word	0xb12e9282
 800ca5c:	3fb3b8c5 	.word	0x3fb3b8c5
 800ca60:	1b8d0159 	.word	0x1b8d0159
 800ca64:	3fe6066c 	.word	0x3fe6066c
 800ca68:	9c598ac8 	.word	0x9c598ac8
 800ca6c:	40002ae5 	.word	0x40002ae5
 800ca70:	1c8a2d4b 	.word	0x1c8a2d4b
 800ca74:	40033a27 	.word	0x40033a27
 800ca78:	3fefffff 	.word	0x3fefffff
 800ca7c:	3fdfffff 	.word	0x3fdfffff
 800ca80:	3ff00000 	.word	0x3ff00000
 800ca84:	3fe00000 	.word	0x3fe00000
 800ca88:	3fef3332 	.word	0x3fef3332
 800ca8c:	4602      	mov	r2, r0
 800ca8e:	460b      	mov	r3, r1
 800ca90:	f7f3 fb6c 	bl	800016c <__adddf3>
 800ca94:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ca98:	4606      	mov	r6, r0
 800ca9a:	460f      	mov	r7, r1
 800ca9c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800caa0:	f7f3 fe44 	bl	800072c <__aeabi_ddiv>
 800caa4:	4602      	mov	r2, r0
 800caa6:	460b      	mov	r3, r1
 800caa8:	4630      	mov	r0, r6
 800caaa:	4639      	mov	r1, r7
 800caac:	f7f3 fd14 	bl	80004d8 <__aeabi_dmul>
 800cab0:	f04f 0800 	mov.w	r8, #0
 800cab4:	4606      	mov	r6, r0
 800cab6:	460f      	mov	r7, r1
 800cab8:	4642      	mov	r2, r8
 800caba:	465b      	mov	r3, fp
 800cabc:	4640      	mov	r0, r8
 800cabe:	4659      	mov	r1, fp
 800cac0:	f7f3 fd0a 	bl	80004d8 <__aeabi_dmul>
 800cac4:	4602      	mov	r2, r0
 800cac6:	460b      	mov	r3, r1
 800cac8:	4620      	mov	r0, r4
 800caca:	4629      	mov	r1, r5
 800cacc:	f7f3 fb4c 	bl	8000168 <__aeabi_dsub>
 800cad0:	4642      	mov	r2, r8
 800cad2:	4604      	mov	r4, r0
 800cad4:	460d      	mov	r5, r1
 800cad6:	465b      	mov	r3, fp
 800cad8:	4650      	mov	r0, sl
 800cada:	4659      	mov	r1, fp
 800cadc:	f7f3 fb46 	bl	800016c <__adddf3>
 800cae0:	4602      	mov	r2, r0
 800cae2:	460b      	mov	r3, r1
 800cae4:	4620      	mov	r0, r4
 800cae6:	4629      	mov	r1, r5
 800cae8:	f7f3 fe20 	bl	800072c <__aeabi_ddiv>
 800caec:	4602      	mov	r2, r0
 800caee:	460b      	mov	r3, r1
 800caf0:	f7f3 fb3c 	bl	800016c <__adddf3>
 800caf4:	4602      	mov	r2, r0
 800caf6:	460b      	mov	r3, r1
 800caf8:	a113      	add	r1, pc, #76	; (adr r1, 800cb48 <__ieee754_asin+0x3e8>)
 800cafa:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cafe:	f7f3 fb33 	bl	8000168 <__aeabi_dsub>
 800cb02:	4602      	mov	r2, r0
 800cb04:	460b      	mov	r3, r1
 800cb06:	4630      	mov	r0, r6
 800cb08:	4639      	mov	r1, r7
 800cb0a:	f7f3 fb2d 	bl	8000168 <__aeabi_dsub>
 800cb0e:	4642      	mov	r2, r8
 800cb10:	4604      	mov	r4, r0
 800cb12:	460d      	mov	r5, r1
 800cb14:	465b      	mov	r3, fp
 800cb16:	4640      	mov	r0, r8
 800cb18:	4659      	mov	r1, fp
 800cb1a:	f7f3 fb27 	bl	800016c <__adddf3>
 800cb1e:	4602      	mov	r2, r0
 800cb20:	460b      	mov	r3, r1
 800cb22:	a10b      	add	r1, pc, #44	; (adr r1, 800cb50 <__ieee754_asin+0x3f0>)
 800cb24:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cb28:	f7f3 fb1e 	bl	8000168 <__aeabi_dsub>
 800cb2c:	4602      	mov	r2, r0
 800cb2e:	460b      	mov	r3, r1
 800cb30:	4620      	mov	r0, r4
 800cb32:	4629      	mov	r1, r5
 800cb34:	f7f3 fb18 	bl	8000168 <__aeabi_dsub>
 800cb38:	4602      	mov	r2, r0
 800cb3a:	460b      	mov	r3, r1
 800cb3c:	a104      	add	r1, pc, #16	; (adr r1, 800cb50 <__ieee754_asin+0x3f0>)
 800cb3e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cb42:	e6e7      	b.n	800c914 <__ieee754_asin+0x1b4>
 800cb44:	f3af 8000 	nop.w
 800cb48:	33145c07 	.word	0x33145c07
 800cb4c:	3c91a626 	.word	0x3c91a626
 800cb50:	54442d18 	.word	0x54442d18
 800cb54:	3fe921fb 	.word	0x3fe921fb

0800cb58 <__ieee754_atan2>:
 800cb58:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb5c:	4692      	mov	sl, r2
 800cb5e:	4699      	mov	r9, r3
 800cb60:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800cb64:	461f      	mov	r7, r3
 800cb66:	f1ca 0300 	rsb	r3, sl, #0
 800cb6a:	f8df e184 	ldr.w	lr, [pc, #388]	; 800ccf0 <__ieee754_atan2+0x198>
 800cb6e:	ea43 030a 	orr.w	r3, r3, sl
 800cb72:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800cb76:	4573      	cmp	r3, lr
 800cb78:	4604      	mov	r4, r0
 800cb7a:	460d      	mov	r5, r1
 800cb7c:	d808      	bhi.n	800cb90 <__ieee754_atan2+0x38>
 800cb7e:	4246      	negs	r6, r0
 800cb80:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800cb84:	4306      	orrs	r6, r0
 800cb86:	ea43 76d6 	orr.w	r6, r3, r6, lsr #31
 800cb8a:	4576      	cmp	r6, lr
 800cb8c:	468c      	mov	ip, r1
 800cb8e:	d908      	bls.n	800cba2 <__ieee754_atan2+0x4a>
 800cb90:	4652      	mov	r2, sl
 800cb92:	464b      	mov	r3, r9
 800cb94:	4620      	mov	r0, r4
 800cb96:	4629      	mov	r1, r5
 800cb98:	f7f3 fae8 	bl	800016c <__adddf3>
 800cb9c:	4604      	mov	r4, r0
 800cb9e:	460d      	mov	r5, r1
 800cba0:	e019      	b.n	800cbd6 <__ieee754_atan2+0x7e>
 800cba2:	f109 4640 	add.w	r6, r9, #3221225472	; 0xc0000000
 800cba6:	f506 1680 	add.w	r6, r6, #1048576	; 0x100000
 800cbaa:	ea56 060a 	orrs.w	r6, r6, sl
 800cbae:	d103      	bne.n	800cbb8 <__ieee754_atan2+0x60>
 800cbb0:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cbb4:	f000 b954 	b.w	800ce60 <atan>
 800cbb8:	17be      	asrs	r6, r7, #30
 800cbba:	f006 0602 	and.w	r6, r6, #2
 800cbbe:	ea46 76d1 	orr.w	r6, r6, r1, lsr #31
 800cbc2:	ea53 0100 	orrs.w	r1, r3, r0
 800cbc6:	d10a      	bne.n	800cbde <__ieee754_atan2+0x86>
 800cbc8:	2e02      	cmp	r6, #2
 800cbca:	d067      	beq.n	800cc9c <__ieee754_atan2+0x144>
 800cbcc:	2e03      	cmp	r6, #3
 800cbce:	d102      	bne.n	800cbd6 <__ieee754_atan2+0x7e>
 800cbd0:	a53b      	add	r5, pc, #236	; (adr r5, 800ccc0 <__ieee754_atan2+0x168>)
 800cbd2:	e9d5 4500 	ldrd	r4, r5, [r5]
 800cbd6:	4620      	mov	r0, r4
 800cbd8:	4629      	mov	r1, r5
 800cbda:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cbde:	ea52 010a 	orrs.w	r1, r2, sl
 800cbe2:	d106      	bne.n	800cbf2 <__ieee754_atan2+0x9a>
 800cbe4:	f1bc 0f00 	cmp.w	ip, #0
 800cbe8:	da63      	bge.n	800ccb2 <__ieee754_atan2+0x15a>
 800cbea:	a537      	add	r5, pc, #220	; (adr r5, 800ccc8 <__ieee754_atan2+0x170>)
 800cbec:	e9d5 4500 	ldrd	r4, r5, [r5]
 800cbf0:	e7f1      	b.n	800cbd6 <__ieee754_atan2+0x7e>
 800cbf2:	4572      	cmp	r2, lr
 800cbf4:	d10f      	bne.n	800cc16 <__ieee754_atan2+0xbe>
 800cbf6:	4293      	cmp	r3, r2
 800cbf8:	f106 36ff 	add.w	r6, r6, #4294967295
 800cbfc:	d107      	bne.n	800cc0e <__ieee754_atan2+0xb6>
 800cbfe:	2e02      	cmp	r6, #2
 800cc00:	d850      	bhi.n	800cca4 <__ieee754_atan2+0x14c>
 800cc02:	4b3c      	ldr	r3, [pc, #240]	; (800ccf4 <__ieee754_atan2+0x19c>)
 800cc04:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800cc08:	e9d6 4500 	ldrd	r4, r5, [r6]
 800cc0c:	e7e3      	b.n	800cbd6 <__ieee754_atan2+0x7e>
 800cc0e:	2e02      	cmp	r6, #2
 800cc10:	d84c      	bhi.n	800ccac <__ieee754_atan2+0x154>
 800cc12:	4b39      	ldr	r3, [pc, #228]	; (800ccf8 <__ieee754_atan2+0x1a0>)
 800cc14:	e7f6      	b.n	800cc04 <__ieee754_atan2+0xac>
 800cc16:	4573      	cmp	r3, lr
 800cc18:	d0e4      	beq.n	800cbe4 <__ieee754_atan2+0x8c>
 800cc1a:	1a9b      	subs	r3, r3, r2
 800cc1c:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 800cc20:	ea4f 5223 	mov.w	r2, r3, asr #20
 800cc24:	da20      	bge.n	800cc68 <__ieee754_atan2+0x110>
 800cc26:	2f00      	cmp	r7, #0
 800cc28:	da01      	bge.n	800cc2e <__ieee754_atan2+0xd6>
 800cc2a:	323c      	adds	r2, #60	; 0x3c
 800cc2c:	db20      	blt.n	800cc70 <__ieee754_atan2+0x118>
 800cc2e:	4652      	mov	r2, sl
 800cc30:	464b      	mov	r3, r9
 800cc32:	4620      	mov	r0, r4
 800cc34:	4629      	mov	r1, r5
 800cc36:	f7f3 fd79 	bl	800072c <__aeabi_ddiv>
 800cc3a:	f000 fa9b 	bl	800d174 <fabs>
 800cc3e:	f000 f90f 	bl	800ce60 <atan>
 800cc42:	4604      	mov	r4, r0
 800cc44:	460d      	mov	r5, r1
 800cc46:	2e01      	cmp	r6, #1
 800cc48:	d015      	beq.n	800cc76 <__ieee754_atan2+0x11e>
 800cc4a:	2e02      	cmp	r6, #2
 800cc4c:	d017      	beq.n	800cc7e <__ieee754_atan2+0x126>
 800cc4e:	2e00      	cmp	r6, #0
 800cc50:	d0c1      	beq.n	800cbd6 <__ieee754_atan2+0x7e>
 800cc52:	a31f      	add	r3, pc, #124	; (adr r3, 800ccd0 <__ieee754_atan2+0x178>)
 800cc54:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc58:	4620      	mov	r0, r4
 800cc5a:	4629      	mov	r1, r5
 800cc5c:	f7f3 fa84 	bl	8000168 <__aeabi_dsub>
 800cc60:	a31d      	add	r3, pc, #116	; (adr r3, 800ccd8 <__ieee754_atan2+0x180>)
 800cc62:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc66:	e016      	b.n	800cc96 <__ieee754_atan2+0x13e>
 800cc68:	a51d      	add	r5, pc, #116	; (adr r5, 800cce0 <__ieee754_atan2+0x188>)
 800cc6a:	e9d5 4500 	ldrd	r4, r5, [r5]
 800cc6e:	e7ea      	b.n	800cc46 <__ieee754_atan2+0xee>
 800cc70:	2400      	movs	r4, #0
 800cc72:	2500      	movs	r5, #0
 800cc74:	e7e7      	b.n	800cc46 <__ieee754_atan2+0xee>
 800cc76:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800cc7a:	461d      	mov	r5, r3
 800cc7c:	e7ab      	b.n	800cbd6 <__ieee754_atan2+0x7e>
 800cc7e:	a314      	add	r3, pc, #80	; (adr r3, 800ccd0 <__ieee754_atan2+0x178>)
 800cc80:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc84:	4620      	mov	r0, r4
 800cc86:	4629      	mov	r1, r5
 800cc88:	f7f3 fa6e 	bl	8000168 <__aeabi_dsub>
 800cc8c:	4602      	mov	r2, r0
 800cc8e:	460b      	mov	r3, r1
 800cc90:	a111      	add	r1, pc, #68	; (adr r1, 800ccd8 <__ieee754_atan2+0x180>)
 800cc92:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cc96:	f7f3 fa67 	bl	8000168 <__aeabi_dsub>
 800cc9a:	e77f      	b.n	800cb9c <__ieee754_atan2+0x44>
 800cc9c:	a50e      	add	r5, pc, #56	; (adr r5, 800ccd8 <__ieee754_atan2+0x180>)
 800cc9e:	e9d5 4500 	ldrd	r4, r5, [r5]
 800cca2:	e798      	b.n	800cbd6 <__ieee754_atan2+0x7e>
 800cca4:	a510      	add	r5, pc, #64	; (adr r5, 800cce8 <__ieee754_atan2+0x190>)
 800cca6:	e9d5 4500 	ldrd	r4, r5, [r5]
 800ccaa:	e794      	b.n	800cbd6 <__ieee754_atan2+0x7e>
 800ccac:	2400      	movs	r4, #0
 800ccae:	2500      	movs	r5, #0
 800ccb0:	e791      	b.n	800cbd6 <__ieee754_atan2+0x7e>
 800ccb2:	a50b      	add	r5, pc, #44	; (adr r5, 800cce0 <__ieee754_atan2+0x188>)
 800ccb4:	e9d5 4500 	ldrd	r4, r5, [r5]
 800ccb8:	e78d      	b.n	800cbd6 <__ieee754_atan2+0x7e>
 800ccba:	bf00      	nop
 800ccbc:	f3af 8000 	nop.w
 800ccc0:	54442d18 	.word	0x54442d18
 800ccc4:	c00921fb 	.word	0xc00921fb
 800ccc8:	54442d18 	.word	0x54442d18
 800cccc:	bff921fb 	.word	0xbff921fb
 800ccd0:	33145c07 	.word	0x33145c07
 800ccd4:	3ca1a626 	.word	0x3ca1a626
 800ccd8:	54442d18 	.word	0x54442d18
 800ccdc:	400921fb 	.word	0x400921fb
 800cce0:	54442d18 	.word	0x54442d18
 800cce4:	3ff921fb 	.word	0x3ff921fb
 800cce8:	54442d18 	.word	0x54442d18
 800ccec:	3fe921fb 	.word	0x3fe921fb
 800ccf0:	7ff00000 	.word	0x7ff00000
 800ccf4:	0800d630 	.word	0x0800d630
 800ccf8:	0800d648 	.word	0x0800d648

0800ccfc <__ieee754_sqrt>:
 800ccfc:	f8df c158 	ldr.w	ip, [pc, #344]	; 800ce58 <__ieee754_sqrt+0x15c>
 800cd00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cd04:	ea3c 0c01 	bics.w	ip, ip, r1
 800cd08:	4606      	mov	r6, r0
 800cd0a:	460d      	mov	r5, r1
 800cd0c:	460c      	mov	r4, r1
 800cd0e:	460a      	mov	r2, r1
 800cd10:	4607      	mov	r7, r0
 800cd12:	4603      	mov	r3, r0
 800cd14:	d10f      	bne.n	800cd36 <__ieee754_sqrt+0x3a>
 800cd16:	4602      	mov	r2, r0
 800cd18:	460b      	mov	r3, r1
 800cd1a:	f7f3 fbdd 	bl	80004d8 <__aeabi_dmul>
 800cd1e:	4602      	mov	r2, r0
 800cd20:	460b      	mov	r3, r1
 800cd22:	4630      	mov	r0, r6
 800cd24:	4629      	mov	r1, r5
 800cd26:	f7f3 fa21 	bl	800016c <__adddf3>
 800cd2a:	4606      	mov	r6, r0
 800cd2c:	460d      	mov	r5, r1
 800cd2e:	4630      	mov	r0, r6
 800cd30:	4629      	mov	r1, r5
 800cd32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cd36:	2900      	cmp	r1, #0
 800cd38:	dc0e      	bgt.n	800cd58 <__ieee754_sqrt+0x5c>
 800cd3a:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 800cd3e:	ea5c 0707 	orrs.w	r7, ip, r7
 800cd42:	d0f4      	beq.n	800cd2e <__ieee754_sqrt+0x32>
 800cd44:	b141      	cbz	r1, 800cd58 <__ieee754_sqrt+0x5c>
 800cd46:	4602      	mov	r2, r0
 800cd48:	460b      	mov	r3, r1
 800cd4a:	f7f3 fa0d 	bl	8000168 <__aeabi_dsub>
 800cd4e:	4602      	mov	r2, r0
 800cd50:	460b      	mov	r3, r1
 800cd52:	f7f3 fceb 	bl	800072c <__aeabi_ddiv>
 800cd56:	e7e8      	b.n	800cd2a <__ieee754_sqrt+0x2e>
 800cd58:	1521      	asrs	r1, r4, #20
 800cd5a:	d075      	beq.n	800ce48 <__ieee754_sqrt+0x14c>
 800cd5c:	07cc      	lsls	r4, r1, #31
 800cd5e:	f04f 0400 	mov.w	r4, #0
 800cd62:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800cd66:	f2a1 37ff 	subw	r7, r1, #1023	; 0x3ff
 800cd6a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800cd6e:	bf5e      	ittt	pl
 800cd70:	0fd9      	lsrpl	r1, r3, #31
 800cd72:	005b      	lslpl	r3, r3, #1
 800cd74:	eb01 0242 	addpl.w	r2, r1, r2, lsl #1
 800cd78:	0fd9      	lsrs	r1, r3, #31
 800cd7a:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 800cd7e:	2516      	movs	r5, #22
 800cd80:	4620      	mov	r0, r4
 800cd82:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800cd86:	107f      	asrs	r7, r7, #1
 800cd88:	005b      	lsls	r3, r3, #1
 800cd8a:	1846      	adds	r6, r0, r1
 800cd8c:	4296      	cmp	r6, r2
 800cd8e:	bfde      	ittt	le
 800cd90:	1b92      	suble	r2, r2, r6
 800cd92:	1870      	addle	r0, r6, r1
 800cd94:	1864      	addle	r4, r4, r1
 800cd96:	0052      	lsls	r2, r2, #1
 800cd98:	3d01      	subs	r5, #1
 800cd9a:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800cd9e:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800cda2:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800cda6:	d1f0      	bne.n	800cd8a <__ieee754_sqrt+0x8e>
 800cda8:	4629      	mov	r1, r5
 800cdaa:	f04f 0e20 	mov.w	lr, #32
 800cdae:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800cdb2:	4282      	cmp	r2, r0
 800cdb4:	eb06 0c05 	add.w	ip, r6, r5
 800cdb8:	dc02      	bgt.n	800cdc0 <__ieee754_sqrt+0xc4>
 800cdba:	d113      	bne.n	800cde4 <__ieee754_sqrt+0xe8>
 800cdbc:	459c      	cmp	ip, r3
 800cdbe:	d811      	bhi.n	800cde4 <__ieee754_sqrt+0xe8>
 800cdc0:	f1bc 0f00 	cmp.w	ip, #0
 800cdc4:	eb0c 0506 	add.w	r5, ip, r6
 800cdc8:	da43      	bge.n	800ce52 <__ieee754_sqrt+0x156>
 800cdca:	2d00      	cmp	r5, #0
 800cdcc:	db41      	blt.n	800ce52 <__ieee754_sqrt+0x156>
 800cdce:	f100 0801 	add.w	r8, r0, #1
 800cdd2:	1a12      	subs	r2, r2, r0
 800cdd4:	4640      	mov	r0, r8
 800cdd6:	459c      	cmp	ip, r3
 800cdd8:	bf88      	it	hi
 800cdda:	f102 32ff 	addhi.w	r2, r2, #4294967295
 800cdde:	eba3 030c 	sub.w	r3, r3, ip
 800cde2:	4431      	add	r1, r6
 800cde4:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800cde8:	f1be 0e01 	subs.w	lr, lr, #1
 800cdec:	eb0c 0242 	add.w	r2, ip, r2, lsl #1
 800cdf0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800cdf4:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800cdf8:	d1db      	bne.n	800cdb2 <__ieee754_sqrt+0xb6>
 800cdfa:	4313      	orrs	r3, r2
 800cdfc:	d006      	beq.n	800ce0c <__ieee754_sqrt+0x110>
 800cdfe:	1c48      	adds	r0, r1, #1
 800ce00:	bf0b      	itete	eq
 800ce02:	4671      	moveq	r1, lr
 800ce04:	3101      	addne	r1, #1
 800ce06:	3401      	addeq	r4, #1
 800ce08:	f021 0101 	bicne.w	r1, r1, #1
 800ce0c:	1063      	asrs	r3, r4, #1
 800ce0e:	0849      	lsrs	r1, r1, #1
 800ce10:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800ce14:	07e2      	lsls	r2, r4, #31
 800ce16:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800ce1a:	bf48      	it	mi
 800ce1c:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 800ce20:	460e      	mov	r6, r1
 800ce22:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800ce26:	e782      	b.n	800cd2e <__ieee754_sqrt+0x32>
 800ce28:	0ada      	lsrs	r2, r3, #11
 800ce2a:	3815      	subs	r0, #21
 800ce2c:	055b      	lsls	r3, r3, #21
 800ce2e:	2a00      	cmp	r2, #0
 800ce30:	d0fa      	beq.n	800ce28 <__ieee754_sqrt+0x12c>
 800ce32:	02d5      	lsls	r5, r2, #11
 800ce34:	d50a      	bpl.n	800ce4c <__ieee754_sqrt+0x150>
 800ce36:	f1c1 0420 	rsb	r4, r1, #32
 800ce3a:	fa23 f404 	lsr.w	r4, r3, r4
 800ce3e:	1e4d      	subs	r5, r1, #1
 800ce40:	408b      	lsls	r3, r1
 800ce42:	4322      	orrs	r2, r4
 800ce44:	1b41      	subs	r1, r0, r5
 800ce46:	e789      	b.n	800cd5c <__ieee754_sqrt+0x60>
 800ce48:	4608      	mov	r0, r1
 800ce4a:	e7f0      	b.n	800ce2e <__ieee754_sqrt+0x132>
 800ce4c:	0052      	lsls	r2, r2, #1
 800ce4e:	3101      	adds	r1, #1
 800ce50:	e7ef      	b.n	800ce32 <__ieee754_sqrt+0x136>
 800ce52:	4680      	mov	r8, r0
 800ce54:	e7bd      	b.n	800cdd2 <__ieee754_sqrt+0xd6>
 800ce56:	bf00      	nop
 800ce58:	7ff00000 	.word	0x7ff00000
 800ce5c:	00000000 	.word	0x00000000

0800ce60 <atan>:
 800ce60:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce64:	4bb6      	ldr	r3, [pc, #728]	; (800d140 <atan+0x2e0>)
 800ce66:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800ce6a:	429e      	cmp	r6, r3
 800ce6c:	4604      	mov	r4, r0
 800ce6e:	460d      	mov	r5, r1
 800ce70:	468b      	mov	fp, r1
 800ce72:	dd17      	ble.n	800cea4 <atan+0x44>
 800ce74:	4bb3      	ldr	r3, [pc, #716]	; (800d144 <atan+0x2e4>)
 800ce76:	429e      	cmp	r6, r3
 800ce78:	dc01      	bgt.n	800ce7e <atan+0x1e>
 800ce7a:	d109      	bne.n	800ce90 <atan+0x30>
 800ce7c:	b140      	cbz	r0, 800ce90 <atan+0x30>
 800ce7e:	4622      	mov	r2, r4
 800ce80:	462b      	mov	r3, r5
 800ce82:	4620      	mov	r0, r4
 800ce84:	4629      	mov	r1, r5
 800ce86:	f7f3 f971 	bl	800016c <__adddf3>
 800ce8a:	4604      	mov	r4, r0
 800ce8c:	460d      	mov	r5, r1
 800ce8e:	e005      	b.n	800ce9c <atan+0x3c>
 800ce90:	f1bb 0f00 	cmp.w	fp, #0
 800ce94:	4cac      	ldr	r4, [pc, #688]	; (800d148 <atan+0x2e8>)
 800ce96:	f300 8121 	bgt.w	800d0dc <atan+0x27c>
 800ce9a:	4dac      	ldr	r5, [pc, #688]	; (800d14c <atan+0x2ec>)
 800ce9c:	4620      	mov	r0, r4
 800ce9e:	4629      	mov	r1, r5
 800cea0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cea4:	4baa      	ldr	r3, [pc, #680]	; (800d150 <atan+0x2f0>)
 800cea6:	429e      	cmp	r6, r3
 800cea8:	dc11      	bgt.n	800cece <atan+0x6e>
 800ceaa:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800ceae:	429e      	cmp	r6, r3
 800ceb0:	dc0a      	bgt.n	800cec8 <atan+0x68>
 800ceb2:	a38b      	add	r3, pc, #556	; (adr r3, 800d0e0 <atan+0x280>)
 800ceb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ceb8:	f7f3 f958 	bl	800016c <__adddf3>
 800cebc:	2200      	movs	r2, #0
 800cebe:	4ba5      	ldr	r3, [pc, #660]	; (800d154 <atan+0x2f4>)
 800cec0:	f7f3 fd9a 	bl	80009f8 <__aeabi_dcmpgt>
 800cec4:	2800      	cmp	r0, #0
 800cec6:	d1e9      	bne.n	800ce9c <atan+0x3c>
 800cec8:	f04f 3aff 	mov.w	sl, #4294967295
 800cecc:	e027      	b.n	800cf1e <atan+0xbe>
 800cece:	f000 f951 	bl	800d174 <fabs>
 800ced2:	4ba1      	ldr	r3, [pc, #644]	; (800d158 <atan+0x2f8>)
 800ced4:	4604      	mov	r4, r0
 800ced6:	429e      	cmp	r6, r3
 800ced8:	460d      	mov	r5, r1
 800ceda:	f300 80b8 	bgt.w	800d04e <atan+0x1ee>
 800cede:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800cee2:	429e      	cmp	r6, r3
 800cee4:	f300 809c 	bgt.w	800d020 <atan+0x1c0>
 800cee8:	4602      	mov	r2, r0
 800ceea:	460b      	mov	r3, r1
 800ceec:	f7f3 f93e 	bl	800016c <__adddf3>
 800cef0:	2200      	movs	r2, #0
 800cef2:	4b98      	ldr	r3, [pc, #608]	; (800d154 <atan+0x2f4>)
 800cef4:	f7f3 f938 	bl	8000168 <__aeabi_dsub>
 800cef8:	2200      	movs	r2, #0
 800cefa:	4606      	mov	r6, r0
 800cefc:	460f      	mov	r7, r1
 800cefe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800cf02:	4620      	mov	r0, r4
 800cf04:	4629      	mov	r1, r5
 800cf06:	f7f3 f931 	bl	800016c <__adddf3>
 800cf0a:	4602      	mov	r2, r0
 800cf0c:	460b      	mov	r3, r1
 800cf0e:	4630      	mov	r0, r6
 800cf10:	4639      	mov	r1, r7
 800cf12:	f7f3 fc0b 	bl	800072c <__aeabi_ddiv>
 800cf16:	f04f 0a00 	mov.w	sl, #0
 800cf1a:	4604      	mov	r4, r0
 800cf1c:	460d      	mov	r5, r1
 800cf1e:	4622      	mov	r2, r4
 800cf20:	462b      	mov	r3, r5
 800cf22:	4620      	mov	r0, r4
 800cf24:	4629      	mov	r1, r5
 800cf26:	f7f3 fad7 	bl	80004d8 <__aeabi_dmul>
 800cf2a:	4602      	mov	r2, r0
 800cf2c:	460b      	mov	r3, r1
 800cf2e:	4680      	mov	r8, r0
 800cf30:	4689      	mov	r9, r1
 800cf32:	f7f3 fad1 	bl	80004d8 <__aeabi_dmul>
 800cf36:	a36c      	add	r3, pc, #432	; (adr r3, 800d0e8 <atan+0x288>)
 800cf38:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf3c:	4606      	mov	r6, r0
 800cf3e:	460f      	mov	r7, r1
 800cf40:	f7f3 faca 	bl	80004d8 <__aeabi_dmul>
 800cf44:	a36a      	add	r3, pc, #424	; (adr r3, 800d0f0 <atan+0x290>)
 800cf46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf4a:	f7f3 f90f 	bl	800016c <__adddf3>
 800cf4e:	4632      	mov	r2, r6
 800cf50:	463b      	mov	r3, r7
 800cf52:	f7f3 fac1 	bl	80004d8 <__aeabi_dmul>
 800cf56:	a368      	add	r3, pc, #416	; (adr r3, 800d0f8 <atan+0x298>)
 800cf58:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf5c:	f7f3 f906 	bl	800016c <__adddf3>
 800cf60:	4632      	mov	r2, r6
 800cf62:	463b      	mov	r3, r7
 800cf64:	f7f3 fab8 	bl	80004d8 <__aeabi_dmul>
 800cf68:	a365      	add	r3, pc, #404	; (adr r3, 800d100 <atan+0x2a0>)
 800cf6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf6e:	f7f3 f8fd 	bl	800016c <__adddf3>
 800cf72:	4632      	mov	r2, r6
 800cf74:	463b      	mov	r3, r7
 800cf76:	f7f3 faaf 	bl	80004d8 <__aeabi_dmul>
 800cf7a:	a363      	add	r3, pc, #396	; (adr r3, 800d108 <atan+0x2a8>)
 800cf7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf80:	f7f3 f8f4 	bl	800016c <__adddf3>
 800cf84:	4632      	mov	r2, r6
 800cf86:	463b      	mov	r3, r7
 800cf88:	f7f3 faa6 	bl	80004d8 <__aeabi_dmul>
 800cf8c:	a360      	add	r3, pc, #384	; (adr r3, 800d110 <atan+0x2b0>)
 800cf8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf92:	f7f3 f8eb 	bl	800016c <__adddf3>
 800cf96:	4642      	mov	r2, r8
 800cf98:	464b      	mov	r3, r9
 800cf9a:	f7f3 fa9d 	bl	80004d8 <__aeabi_dmul>
 800cf9e:	a35e      	add	r3, pc, #376	; (adr r3, 800d118 <atan+0x2b8>)
 800cfa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cfa4:	4680      	mov	r8, r0
 800cfa6:	4689      	mov	r9, r1
 800cfa8:	4630      	mov	r0, r6
 800cfaa:	4639      	mov	r1, r7
 800cfac:	f7f3 fa94 	bl	80004d8 <__aeabi_dmul>
 800cfb0:	a35b      	add	r3, pc, #364	; (adr r3, 800d120 <atan+0x2c0>)
 800cfb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cfb6:	f7f3 f8d7 	bl	8000168 <__aeabi_dsub>
 800cfba:	4632      	mov	r2, r6
 800cfbc:	463b      	mov	r3, r7
 800cfbe:	f7f3 fa8b 	bl	80004d8 <__aeabi_dmul>
 800cfc2:	a359      	add	r3, pc, #356	; (adr r3, 800d128 <atan+0x2c8>)
 800cfc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cfc8:	f7f3 f8ce 	bl	8000168 <__aeabi_dsub>
 800cfcc:	4632      	mov	r2, r6
 800cfce:	463b      	mov	r3, r7
 800cfd0:	f7f3 fa82 	bl	80004d8 <__aeabi_dmul>
 800cfd4:	a356      	add	r3, pc, #344	; (adr r3, 800d130 <atan+0x2d0>)
 800cfd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cfda:	f7f3 f8c5 	bl	8000168 <__aeabi_dsub>
 800cfde:	4632      	mov	r2, r6
 800cfe0:	463b      	mov	r3, r7
 800cfe2:	f7f3 fa79 	bl	80004d8 <__aeabi_dmul>
 800cfe6:	a354      	add	r3, pc, #336	; (adr r3, 800d138 <atan+0x2d8>)
 800cfe8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cfec:	f7f3 f8bc 	bl	8000168 <__aeabi_dsub>
 800cff0:	4632      	mov	r2, r6
 800cff2:	463b      	mov	r3, r7
 800cff4:	f7f3 fa70 	bl	80004d8 <__aeabi_dmul>
 800cff8:	4602      	mov	r2, r0
 800cffa:	460b      	mov	r3, r1
 800cffc:	4640      	mov	r0, r8
 800cffe:	4649      	mov	r1, r9
 800d000:	f7f3 f8b4 	bl	800016c <__adddf3>
 800d004:	4622      	mov	r2, r4
 800d006:	462b      	mov	r3, r5
 800d008:	f7f3 fa66 	bl	80004d8 <__aeabi_dmul>
 800d00c:	f1ba 3fff 	cmp.w	sl, #4294967295
 800d010:	4602      	mov	r2, r0
 800d012:	460b      	mov	r3, r1
 800d014:	d144      	bne.n	800d0a0 <atan+0x240>
 800d016:	4620      	mov	r0, r4
 800d018:	4629      	mov	r1, r5
 800d01a:	f7f3 f8a5 	bl	8000168 <__aeabi_dsub>
 800d01e:	e734      	b.n	800ce8a <atan+0x2a>
 800d020:	2200      	movs	r2, #0
 800d022:	4b4c      	ldr	r3, [pc, #304]	; (800d154 <atan+0x2f4>)
 800d024:	f7f3 f8a0 	bl	8000168 <__aeabi_dsub>
 800d028:	2200      	movs	r2, #0
 800d02a:	4606      	mov	r6, r0
 800d02c:	460f      	mov	r7, r1
 800d02e:	4620      	mov	r0, r4
 800d030:	4629      	mov	r1, r5
 800d032:	4b48      	ldr	r3, [pc, #288]	; (800d154 <atan+0x2f4>)
 800d034:	f7f3 f89a 	bl	800016c <__adddf3>
 800d038:	4602      	mov	r2, r0
 800d03a:	460b      	mov	r3, r1
 800d03c:	4630      	mov	r0, r6
 800d03e:	4639      	mov	r1, r7
 800d040:	f7f3 fb74 	bl	800072c <__aeabi_ddiv>
 800d044:	f04f 0a01 	mov.w	sl, #1
 800d048:	4604      	mov	r4, r0
 800d04a:	460d      	mov	r5, r1
 800d04c:	e767      	b.n	800cf1e <atan+0xbe>
 800d04e:	4b43      	ldr	r3, [pc, #268]	; (800d15c <atan+0x2fc>)
 800d050:	429e      	cmp	r6, r3
 800d052:	da1a      	bge.n	800d08a <atan+0x22a>
 800d054:	2200      	movs	r2, #0
 800d056:	4b42      	ldr	r3, [pc, #264]	; (800d160 <atan+0x300>)
 800d058:	f7f3 f886 	bl	8000168 <__aeabi_dsub>
 800d05c:	2200      	movs	r2, #0
 800d05e:	4606      	mov	r6, r0
 800d060:	460f      	mov	r7, r1
 800d062:	4620      	mov	r0, r4
 800d064:	4629      	mov	r1, r5
 800d066:	4b3e      	ldr	r3, [pc, #248]	; (800d160 <atan+0x300>)
 800d068:	f7f3 fa36 	bl	80004d8 <__aeabi_dmul>
 800d06c:	2200      	movs	r2, #0
 800d06e:	4b39      	ldr	r3, [pc, #228]	; (800d154 <atan+0x2f4>)
 800d070:	f7f3 f87c 	bl	800016c <__adddf3>
 800d074:	4602      	mov	r2, r0
 800d076:	460b      	mov	r3, r1
 800d078:	4630      	mov	r0, r6
 800d07a:	4639      	mov	r1, r7
 800d07c:	f7f3 fb56 	bl	800072c <__aeabi_ddiv>
 800d080:	f04f 0a02 	mov.w	sl, #2
 800d084:	4604      	mov	r4, r0
 800d086:	460d      	mov	r5, r1
 800d088:	e749      	b.n	800cf1e <atan+0xbe>
 800d08a:	4602      	mov	r2, r0
 800d08c:	460b      	mov	r3, r1
 800d08e:	2000      	movs	r0, #0
 800d090:	4934      	ldr	r1, [pc, #208]	; (800d164 <atan+0x304>)
 800d092:	f7f3 fb4b 	bl	800072c <__aeabi_ddiv>
 800d096:	f04f 0a03 	mov.w	sl, #3
 800d09a:	4604      	mov	r4, r0
 800d09c:	460d      	mov	r5, r1
 800d09e:	e73e      	b.n	800cf1e <atan+0xbe>
 800d0a0:	4b31      	ldr	r3, [pc, #196]	; (800d168 <atan+0x308>)
 800d0a2:	4e32      	ldr	r6, [pc, #200]	; (800d16c <atan+0x30c>)
 800d0a4:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800d0a8:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 800d0ac:	e9da 2300 	ldrd	r2, r3, [sl]
 800d0b0:	f7f3 f85a 	bl	8000168 <__aeabi_dsub>
 800d0b4:	4622      	mov	r2, r4
 800d0b6:	462b      	mov	r3, r5
 800d0b8:	f7f3 f856 	bl	8000168 <__aeabi_dsub>
 800d0bc:	4602      	mov	r2, r0
 800d0be:	460b      	mov	r3, r1
 800d0c0:	e9d6 0100 	ldrd	r0, r1, [r6]
 800d0c4:	f7f3 f850 	bl	8000168 <__aeabi_dsub>
 800d0c8:	f1bb 0f00 	cmp.w	fp, #0
 800d0cc:	4604      	mov	r4, r0
 800d0ce:	460d      	mov	r5, r1
 800d0d0:	f6bf aee4 	bge.w	800ce9c <atan+0x3c>
 800d0d4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d0d8:	461d      	mov	r5, r3
 800d0da:	e6df      	b.n	800ce9c <atan+0x3c>
 800d0dc:	4d24      	ldr	r5, [pc, #144]	; (800d170 <atan+0x310>)
 800d0de:	e6dd      	b.n	800ce9c <atan+0x3c>
 800d0e0:	8800759c 	.word	0x8800759c
 800d0e4:	7e37e43c 	.word	0x7e37e43c
 800d0e8:	e322da11 	.word	0xe322da11
 800d0ec:	3f90ad3a 	.word	0x3f90ad3a
 800d0f0:	24760deb 	.word	0x24760deb
 800d0f4:	3fa97b4b 	.word	0x3fa97b4b
 800d0f8:	a0d03d51 	.word	0xa0d03d51
 800d0fc:	3fb10d66 	.word	0x3fb10d66
 800d100:	c54c206e 	.word	0xc54c206e
 800d104:	3fb745cd 	.word	0x3fb745cd
 800d108:	920083ff 	.word	0x920083ff
 800d10c:	3fc24924 	.word	0x3fc24924
 800d110:	5555550d 	.word	0x5555550d
 800d114:	3fd55555 	.word	0x3fd55555
 800d118:	2c6a6c2f 	.word	0x2c6a6c2f
 800d11c:	bfa2b444 	.word	0xbfa2b444
 800d120:	52defd9a 	.word	0x52defd9a
 800d124:	3fadde2d 	.word	0x3fadde2d
 800d128:	af749a6d 	.word	0xaf749a6d
 800d12c:	3fb3b0f2 	.word	0x3fb3b0f2
 800d130:	fe231671 	.word	0xfe231671
 800d134:	3fbc71c6 	.word	0x3fbc71c6
 800d138:	9998ebc4 	.word	0x9998ebc4
 800d13c:	3fc99999 	.word	0x3fc99999
 800d140:	440fffff 	.word	0x440fffff
 800d144:	7ff00000 	.word	0x7ff00000
 800d148:	54442d18 	.word	0x54442d18
 800d14c:	bff921fb 	.word	0xbff921fb
 800d150:	3fdbffff 	.word	0x3fdbffff
 800d154:	3ff00000 	.word	0x3ff00000
 800d158:	3ff2ffff 	.word	0x3ff2ffff
 800d15c:	40038000 	.word	0x40038000
 800d160:	3ff80000 	.word	0x3ff80000
 800d164:	bff00000 	.word	0xbff00000
 800d168:	0800d680 	.word	0x0800d680
 800d16c:	0800d660 	.word	0x0800d660
 800d170:	3ff921fb 	.word	0x3ff921fb

0800d174 <fabs>:
 800d174:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800d178:	4770      	bx	lr
	...

0800d17c <nan>:
 800d17c:	2000      	movs	r0, #0
 800d17e:	4901      	ldr	r1, [pc, #4]	; (800d184 <nan+0x8>)
 800d180:	4770      	bx	lr
 800d182:	bf00      	nop
 800d184:	7ff80000 	.word	0x7ff80000

0800d188 <_init>:
 800d188:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d18a:	bf00      	nop
 800d18c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d18e:	bc08      	pop	{r3}
 800d190:	469e      	mov	lr, r3
 800d192:	4770      	bx	lr

0800d194 <_fini>:
 800d194:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d196:	bf00      	nop
 800d198:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d19a:	bc08      	pop	{r3}
 800d19c:	469e      	mov	lr, r3
 800d19e:	4770      	bx	lr
